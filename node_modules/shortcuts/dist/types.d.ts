declare type Chord = string;
declare type ChordID = number;
declare type Shortcut = string;
declare type ShortcutID = ChordID[];
declare type Disposer = () => void;
declare type RecordHandler = (shortcut: Shortcut) => void;
declare type ShouldHandleEventFunction = (event: KeyboardEvent) => boolean;
declare type ListenerOptions = {
    capture?: boolean;
    target?: Node;
    handler: (id: ShortcutID, event: KeyboardEvent) => 0 | 1 | 2 | ShortcutID;
    shouldHandleEvent?: ShouldHandleEventFunction;
};
declare type ShortcutsOptions = {
    capture?: boolean;
    target?: Node;
    shortcuts?: ShortcutDescriptor[];
    shouldHandleEvent?: ShouldHandleEventFunction;
};
declare type ShortcutsTree = {
    [id: number]: ShortcutsTree;
    parent?: ShortcutsTree;
    id?: ChordID;
    size: number;
    handlers: Function[];
};
declare type ShortcutDescriptor = {
    handler?: (event: KeyboardEvent) => boolean | void;
    shortcut: string;
};
export type { Chord, ChordID, Shortcut, ShortcutID };
export type { Disposer, RecordHandler, ShouldHandleEventFunction };
export type { ListenerOptions, ShortcutsOptions, ShortcutsTree, ShortcutDescriptor };
