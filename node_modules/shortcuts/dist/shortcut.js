/* IMPORT */
import { MODIFIER_KEY_BITMASK, TRIGGER_KEY_BITMASK } from './constants.js';
import { PLUSES_RE, WHITESPACE_RE, SHORTCUT_RE } from './constants.js';
import { KEY2ID, CODE2ID, ID2SHORTCUT, ID2ACCELERATOR, ID2SYMBOL } from './maps.js';
import Utils from './utils.js';
/* MAIN */
const Shortcut = {
    /* MODIFIER KEY */
    getModifierKey: (id) => {
        return id & MODIFIER_KEY_BITMASK;
    },
    hasModifierKey: (id) => {
        return !!Shortcut.getModifierKey(id);
    },
    /* TRIGGER KEY */
    getTriggerKey: (id) => {
        return id & TRIGGER_KEY_BITMASK;
    },
    hasTriggerKey: (id) => {
        return !!Shortcut.getTriggerKey(id);
    },
    /* EVENT */
    event2id: (event) => {
        let id = 0;
        /* TRIGGER */
        if (Utils.isKeyboardEvent(event)) {
            const isKeypress = (event.type === 'keypress');
            const code = event.which || event.keyCode || 0;
            const char = String.fromCharCode(code).toLowerCase();
            const key = event.key;
            id = isKeypress ? KEY2ID[key] || KEY2ID[char] || 0 : CODE2ID[code] || KEY2ID[char] || KEY2ID[key] || 0;
        }
        /* MODIFIERS */
        if (event.ctrlKey)
            id |= KEY2ID.ctrl;
        if (event.altKey)
            id |= KEY2ID.alt;
        if (event.shiftKey)
            id |= KEY2ID.shift;
        if (event.metaKey)
            id |= KEY2ID.cmd;
        return id;
    },
    event2shortcut: (event) => {
        return Shortcut.id2shortcut([Shortcut.event2id(event)]);
    },
    event2accelerator: (event) => {
        return Shortcut.id2accelerator([Shortcut.event2id(event)]);
    },
    event2symbols: (event) => {
        return Shortcut.id2symbols([Shortcut.event2id(event)]);
    },
    /* CHORD */
    chord2id: Utils.memoize((chord) => {
        const keys = chord.replace(PLUSES_RE, '+Plus').toLowerCase().split('+');
        return keys.reduce((keyCode, key) => {
            return keyCode | (KEY2ID[key] || 0);
        }, 0);
    }),
    chord2accelerator: (chord) => {
        return Shortcut.id2accelerator([Shortcut.chord2id(chord)]);
    },
    chord2symbols: (chord) => {
        return Shortcut.id2symbols([Shortcut.chord2id(chord)]);
    },
    /* SHORTCUT */
    isValidShortcut: (shortcut) => {
        return SHORTCUT_RE.test(shortcut);
    },
    checkValidShortcut: (shortcut) => {
        const isValid = Shortcut.isValidShortcut(shortcut);
        if (!isValid)
            console.error(`Invalid shortcut: "${shortcut}"`);
        return isValid;
    },
    shortcut2id: Utils.memoize((shortcut) => {
        const chords = shortcut.trim().split(WHITESPACE_RE);
        return chords.map(Shortcut.chord2id);
    }),
    shortcut2accelerator: Utils.memoize((shortcut) => {
        return Shortcut.id2accelerator(Shortcut.shortcut2id(shortcut));
    }),
    shortcut2symbols: Utils.memoize((shortcut) => {
        return Shortcut.id2symbols(Shortcut.shortcut2id(shortcut));
    }),
    /* ID */
    isValidID: (id) => {
        return id.every(Utils.isTruthy);
    },
    checkValidID: (id) => {
        const isValid = Shortcut.isValidID(id);
        if (!isValid)
            console.error(`Invalid shortcut: "${Shortcut.id2accelerator(id)}"`);
        return isValid;
    },
    id2output: (id, idMap, chordSeparator, sequenceSeparator) => {
        const { ctrl, alt, shift, cmd } = KEY2ID;
        return id.map(id => {
            const keys = [];
            if (id & ctrl)
                keys.push(idMap[ctrl]);
            if (id & alt)
                keys.push(idMap[alt]);
            if (id & shift)
                keys.push(idMap[shift]);
            if (id & cmd)
                keys.push(idMap[cmd]);
            const triggerKey = Shortcut.getTriggerKey(id);
            if (triggerKey)
                keys.push(idMap[triggerKey] || String.fromCharCode(triggerKey).toUpperCase());
            return keys.join(chordSeparator);
        }).join(sequenceSeparator);
    },
    id2shortcut: (id) => {
        return Shortcut.id2output(id, ID2SHORTCUT, '+', ' ');
    },
    id2accelerator: (id) => {
        return Shortcut.id2output(id, ID2ACCELERATOR, '+', ' ');
    },
    id2symbols: (id) => {
        return Shortcut.id2output(id, ID2SYMBOL, '', ' ');
    }
};
/* EXPORT */
export default Shortcut;
