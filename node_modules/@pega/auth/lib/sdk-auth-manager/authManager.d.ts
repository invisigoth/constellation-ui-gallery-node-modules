/**
 * Retrieve UserInfo for current authentication service
 */
export declare const getUserInfo: () => any;
export declare const login: (bFullReauth?: boolean) => void;
export declare const authRedirectCallback: (href: any, fnLoggedInCB?: any) => void;
/**
 * Silent or visible login based on login status
 *  @param {string} appName - unique name for application route (will be used to clear an session storage for another route)
 *  @param {boolean} noMainRedirect - avoid the initial main window redirect that happens in scenarios where it is OK to transition
 *   away from the main page
 *  @param {boolean} deferLogin - defer logging in (if not already authenticated)
 */
export declare const loginIfNecessary: (loginProps: any) => void;
export declare const getHomeUrl: () => string;
export declare const authIsMainRedirect: () => boolean;
export declare const sdkIsLoggedIn: () => boolean;
export declare const logout: () => Promise<unknown>;
export declare const sdkSetAuthHeader: (authHeader: any) => void;
export declare const sdkSetCustomTokenParamsCB: (fnCustomTokenParamsCB: (() => any) | null) => void;
export declare const getAvailablePortals: () => Promise<string[]>;
//# sourceMappingURL=authManager.d.ts.map