{"version":3,"file":"Editor.types.js","sourceRoot":"","sources":["../../../src/components/Editor/Editor.types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  ReactNode,\n  Ref,\n  MouseEvent as ReactMouseEvent,\n  KeyboardEvent as ReactKeyboardEvent\n} from 'react';\nimport { Editor as TinymceEditor } from 'tinymce/tinymce';\n\nimport { Action, BaseProps, FormControlProps } from '@pega/cosmos-react-core';\n\nimport { Features } from '../RichTextEditor/Toolbar/Toolbar.types';\nimport { RichTextEditorState } from '../RichTextEditor';\n\nexport type EditorState = RichTextEditorState & {\n  getEditor: () => TinymceEditor | undefined;\n  element?: HTMLElement;\n  setCursorLocationToStart?: () => void;\n};\n\nexport type CustomAction = {\n  text: Action['text'];\n  icon: NonNullable<Action['icon']>;\n  onMouseDown: (e: ReactMouseEvent | ReactKeyboardEvent) => void;\n  active?: (editor: TinymceEditor) => void;\n  shortcut?: { pattern: string; description: string; command: (editor: TinymceEditor) => void };\n};\n\nexport type CustomComponent = {\n  createCustomElement: (window: typeof globalThis) => CustomElementConstructor;\n  name: string;\n  extensionAttributes?: string[];\n  style?: string;\n};\n\nexport interface EditorProps extends FormControlProps, BaseProps {\n  /** An array of strings that activate features on the toolbar */\n  toolbar?: Features[];\n  /** Children content */\n  children?: ReactNode;\n  /** A callback that supplies an object with functions that can manipulate the editor and retrieve it's content/state */\n  onChange?: (editor?: TinymceEditor) => void;\n  /** KeyDown event custom handlers for the editor */\n  onKeyDown?: (event?: KeyboardEvent) => void;\n  /** A callback that runs if the editor is focused */\n  onFocus?: () => void;\n  /** A callback that runs if the editor loses focus */\n  onBlur?: () => void;\n  /** A callback when an image is added through the toolbar image feature */\n  onImageAdded?: (image: File, id: string) => void;\n  /** A callback for when tinymce is finished initializing */\n  onInit?: (editor: TinymceEditor) => void;\n  /** Standard placeholder for an input */\n  placeholder?: string;\n  /** Default value for the RTE - HTML String */\n  defaultValue?: string;\n  /** Will automatically focus the RTE on render if true */\n  autoFocus?: boolean;\n  /** Sets the height for the RTE. If no max height is set the RTE will continue to expand, otherwise an overflow will be applied */\n  height?: {\n    min?: number;\n    max?: number;\n  };\n  /** An array of custom components, custom components must use web component API */\n  customComponents?: CustomComponent[];\n  /** An array of custom buttons to be inserted into the toolbar */\n  customActions?: CustomAction[];\n  /**\n   * Enables browser spellcheck.\n   * @default true\n   */\n  spellcheck?: boolean;\n  /** Handle to the state. */\n  ref?: Ref<EditorState>;\n}\n"]}