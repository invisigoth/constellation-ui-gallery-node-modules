import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useState, useEffect } from 'react';
import { HTML, ErrorState, useI18n } from '@pega/cosmos-react-core';
import convertMarkdown from './utils/markdownConverter';
import { StyledEditorContainer, StyledRichTextViewer } from './RichTextEditor.styles';
import { convertHtml } from './utils/htmlConverter';
import { RichTextTreeRenderer } from './RichTextTreeRenderer';
// Regex to match valid URLs
export const URL_REGEX = /(?<leadingChar>^|\s)(?<url>(?<protocol>https?:\/\/)?(?<host>[a-z0-9]+(?:[-.][a-z0-9]+)*\.(?<tld>[a-z]{2,5})(?<port>:[0-9]{1,5})?)(?<pathQueryHash>[/a-zA-Z0-9?=&+%@.|#_~:[\]'()-]*)?)/g;
const RichTextViewer = forwardRef(function RichTextViewer({ content, type, interactionRenderers, markdownMap, onRetry, ...restProps }, ref) {
    const t = useI18n();
    const [nodes, setNodes] = useState([]);
    const [error, setError] = useState(false);
    useEffect(() => {
        if (type === 'markdown') {
            setNodes(convertMarkdown(content, [...(interactionRenderers || []), { regexPattern: URL_REGEX, type: 'builtin-url' }], markdownMap));
        }
        if (type === 'richtext') {
            setNodes(JSON.parse(content));
        }
        if (type === 'html' && interactionRenderers && interactionRenderers.length > 0) {
            try {
                setNodes(convertHtml(content, interactionRenderers));
                setError(false);
            }
            catch {
                setNodes([]);
                setError(true);
            }
        }
    }, [content, type, interactionRenderers]);
    if (type === 'html' && (!interactionRenderers || interactionRenderers.length === 0)) {
        return _jsx(HTML, { ref: ref, content: content });
    }
    return error ? (_jsx(ErrorState, { message: t('rte_invalid_html'), onRetry: onRetry })) : (_jsx(StyledRichTextViewer, { ref: ref, ...restProps, children: _jsx(StyledEditorContainer, { children: _jsx(RichTextTreeRenderer, { nodes: nodes }) }) }));
});
export default RichTextViewer;
//# sourceMappingURL=RichTextViewer.js.map