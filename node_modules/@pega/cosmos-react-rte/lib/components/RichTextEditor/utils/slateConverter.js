import { Element, Text } from 'slate';
export const slateToHtmlMap = {
    link: 'a',
    'heading-1': 'h1',
    'heading-2': 'h2',
    'heading-3': 'h3',
    'heading-4': 'h4',
    'unordered-list': 'ul',
    'ordered-list': 'ol',
    'list-item': 'li',
    table: 'table',
    'table-body': 'tbody',
    'table-row': 'tr',
    'table-cell': 'td',
    text: 'span',
    paragraph: 'p',
    bold: 'b',
    'line-through': 'del',
    italic: 'i',
    href: 'a',
    image: 'img'
};
// Reduces the properties in a slate node into the correct html attributes, mostly used for list-items at the moment
const getAttrs = (el) => {
    // eslint-disable-next-line sonarjs/no-small-switch
    switch (el.type) {
        case 'list-item':
            return [
                { name: 'data-id', value: el.id },
                { name: 'data-parent-id', value: el.parentId },
                { name: 'data-order', value: el.order },
                { name: 'data-level', value: el.level }
            ].reduce((acc, attr) => {
                if (attr.value) {
                    return `${acc} ${attr.name}='${attr.value}'`;
                }
                return acc;
            }, '');
        default:
            return Object.keys(el).reduce((innerAcc, key) => {
                return key !== 'type' && key !== 'children'
                    ? `${innerAcc} ${key}='${el[key]}'`
                    : innerAcc;
            }, '');
    }
};
// Recursive function to reduce Slate Nodes into an HTML string
export const constructHtml = (nodes) => {
    return nodes.reduce((acc, node) => {
        if (Element.isElement(node) &&
            (node.type === 'image-placeholder' || node.type === 'custom' || node.type === 'override'))
            return acc;
        const htmlTag = Element.isElement(node) ? slateToHtmlMap[node.type] : undefined;
        let html;
        if (Text.isText(node)) {
            const { text, ...restNode } = node;
            // Reducing inline style properties from a single Slate Node into the correct HTML tags
            html = Object.keys(restNode).reduce((innerAcc, key, i) => {
                const tag = slateToHtmlMap[key];
                // Add the href attribute if needed
                const firstInnerTag = tag === 'a' ? `${tag} href='${restNode[key]}'` : tag;
                if (i === 0) {
                    return `<${firstInnerTag}>${text}</${tag}>`;
                }
                return `<${firstInnerTag}>${innerAcc}</${tag}>`;
            }, '');
            if (!html) {
                html = text;
            }
        }
        else {
            const attrs = getAttrs(node);
            html = `<${htmlTag}${attrs}>${constructHtml(node.children || [])}</${htmlTag}>`;
        }
        return `${acc}${html}`;
    }, '');
};
export const convertSlateToHtml = (nodes) => {
    if (nodes.length === 1 &&
        Element.isElement(nodes[0]) &&
        Text.isText(nodes[0].children[0]) &&
        nodes[0].children[0].text === '') {
        return '';
    }
    const htmlNodes = constructHtml(nodes);
    return `<body>${htmlNodes}</body>`;
};
//# sourceMappingURL=slateConverter.js.map