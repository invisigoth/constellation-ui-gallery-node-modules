import { KeyboardEvent } from 'react';
import { Editor, Range, NodeEntry, Node, Element, Text } from 'slate';
import { ExcludeStrict } from '@pega/cosmos-react-core';
declare const commands: {
    isFormatActive: (format: ExcludeStrict<keyof Text, 'text'>, editor: Editor) => boolean;
    toggleFormat: (format: ExcludeStrict<keyof Text, 'text'>, editor: Editor) => void;
    isBlockActive: (format: Element['type'], editor: Editor) => boolean;
    getActiveBlockType: (editor: Editor) => string;
    setBlock: (format: Element['type'], editor: Editor) => void;
    replaceWithText: (editor: Editor, target: Range | null, text: string) => void;
    replaceWithNodes: (editor: Editor, target: Range | null, node: Node) => void;
    getSelectedNode: (editor: Editor) => NodeEntry<Node>;
    appendTable: (editor: Editor) => void;
    appendImage: (editor: Editor, imageData: {
        src: string;
        alt: string;
    }, id: string) => import("slate").BasePoint | null;
    appendImagePlaceholder: (editor: Editor) => string;
    createLink: (editor: Editor, text: string, url: string, selection: Range | null) => void;
    checkImageEnter: (editor: Editor, e: KeyboardEvent) => void;
    checkLinkBreak: (editor: Editor, e: KeyboardEvent) => void;
    /**
     * Turns the searchResult property off on the text node when any key is pressed while on a searchResult.
     * Will delete the searchResult node if backspace key is hit.
     * Will re-position cursor to the start/end of the searchResult if arrow navigation is used.
     */
    checkSearchDownKeys: (editor: Editor, e: KeyboardEvent) => void;
    checkSearchUpKeys: (editor: Editor, e: KeyboardEvent) => void;
    indent: (editor: Editor) => void;
    unindent: (editor: Editor) => void;
    checkKeyCommands: (editor: Editor, e: KeyboardEvent, markdownOnly?: boolean) => void;
};
export default commands;
//# sourceMappingURL=EditorCommands.d.ts.map