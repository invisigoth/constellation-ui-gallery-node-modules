{"version":3,"file":"ListCommands.js","sourceRoot":"","sources":["../../../../src/components/RichTextEditor/utils/ListCommands.ts"],"names":[],"mappings":"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","sourcesContent":["import { KeyboardEvent } from 'react';\nimport { Editor, Node, Element, Path, Transforms, CosmosCustom, Text, NodeEntry } from 'slate';\n\nimport { createUID } from '@pega/cosmos-react-core';\n\nimport { LIST_TYPES, TEXT_TYPES } from './utils.types';\n\ntype FullListItemElement = CosmosCustom.ListItemElement & {\n  id: string;\n  parentId: string;\n  order: number;\n  level: number;\n};\n\nconst matchList = (n: Node): n is CosmosCustom.ListElement =>\n  Element.isElement(n) && LIST_TYPES.includes(n.type);\n\nconst matchListItem = (n: Node): n is CosmosCustom.ListItemElement =>\n  Element.isElement(n) && n.type === 'list-item';\n\nconst getNextPathBelow = (path: Path) => {\n  path[path.length - 1] = path[path.length - 1] + 1;\n  return path;\n};\n\nconst commands = {\n  toggleList: (type: 'unordered-list' | 'ordered-list', editor: Editor) => {\n    const [listItemInSelection] = Editor.nodes(editor, {\n      at: editor.selection?.anchor.path || undefined,\n      match: matchListItem\n    });\n\n    if (!listItemInSelection) {\n      Transforms.wrapNodes(editor, { type, children: [] });\n      Transforms.wrapNodes(editor, {\n        type: 'list-item',\n        order: 1,\n        level: 1,\n        id: createUID(),\n        children: []\n      });\n    } else {\n      Transforms.setNodes(editor, { type }, { match: matchList });\n    }\n  },\n  checkListEnter: (editor: Editor, event: KeyboardEvent<any>) => {\n    // Gets the list item node at your selection in the lowest part of the tree.\n    // Your selection could technically be in multiple list items in the tree because\n    // the lists can be nested. That is what the mode: 'lowest' arg is for.\n    const [listItemNodeEntry] = Editor.nodes(editor, {\n      at: editor.selection?.anchor.path || undefined,\n      match: matchListItem,\n      mode: 'lowest'\n    });\n\n    if (['Backspace', 'Enter'].includes(event.key) && listItemNodeEntry) {\n      const [listItemNode, listItemPath] = listItemNodeEntry;\n      // Getting the text node\n      const [[textNode]] = Editor.nodes(editor, {\n        at: editor.selection?.anchor.path || undefined,\n        match: Text.isText\n      });\n      // Getting the parent list-item node\n      const [[parentNode]] = Editor.nodes(editor, {\n        at: editor.selection || undefined,\n        match: matchListItem,\n        mode: 'highest'\n      });\n\n      let belowListItemPath;\n      try {\n        belowListItemPath = Path.next(listItemPath);\n      } catch {\n        belowListItemPath = undefined;\n      }\n\n      if (textNode.text !== '') {\n        // If the text node the selection is in is not empty, and the key that was pressed is Enter\n        if (event.key === 'Enter') {\n          event.preventDefault();\n          const newId = createUID();\n          const copiedChildren: Element[] = [];\n          // If this list-item has another list nested inside of it\n          if (listItemNode.children.length === 2) {\n            // Copy the list nested inside\n            const copiedList = { ...listItemNode.children[1] } as CosmosCustom.ListElement;\n            // Add a new parentId to all the children in the list\n            copiedList.children = copiedList.children.map(node => {\n              return { ...node, parentId: newId };\n            });\n            copiedChildren.push(copiedList);\n            // Remove the list\n            Transforms.removeNodes(editor, { at: [...listItemPath, 1] });\n          }\n          // Create a new list item with the copied children as it's children,\n          // and insert it into the editor\n          Transforms.insertNodes(editor, {\n            type: 'list-item',\n            order: listItemNode.order ? listItemNode.order + 1 : 0,\n            level: listItemNode.level ? listItemNode.level : 1,\n            id: newId,\n            parentId: parentNode.id,\n            children: [{ type: 'paragraph', children: [{ text: '' }] }, ...copiedChildren]\n          });\n          // Nodes needs to be lifted one level higher because it will be inserted\n          // into the list item itself rather than it's parent list\n          Transforms.liftNodes<CosmosCustom.ListItemElement>(editor, {\n            match: n => matchListItem(n) && n.id === newId\n          });\n          const selectionPoint = { path: [...Path.next(listItemPath), 0, 0], offset: 0 };\n          // Set the selection to the new list item created\n          Transforms.setSelection(editor, { focus: selectionPoint, anchor: selectionPoint });\n        } else if (editor.selection?.anchor.offset === 0) {\n          commands.unNestList(editor);\n        }\n      } else if (parentNode && parentNode.children.length > 1) {\n        // Un nest this list item from it's parent\n        event.preventDefault();\n        commands.unNestList(editor);\n      } else if (belowListItemPath) {\n        // Break out of the list\n        event.preventDefault();\n        Transforms.unwrapNodes(editor, {\n          at: editor.selection?.anchor.path || undefined,\n          match: matchListItem\n        });\n        Transforms.liftNodes(editor);\n      }\n    }\n  },\n  nestList: (editor: Editor) => {\n    const [listItemNodeEntry] = Editor.nodes(editor, {\n      at: editor.selection?.anchor.path || undefined,\n      match: matchListItem,\n      mode: 'lowest'\n    });\n\n    let listType: `${'un' | ''}ordered-list` = 'unordered-list';\n    const [highestList] = Editor.nodes(editor, {\n      at: editor.selection?.anchor.path || undefined,\n      match: matchList,\n      mode: 'highest'\n    });\n\n    if (highestList) {\n      listType = highestList[0].type;\n    }\n\n    const [listItemNode, listItemPath] = (listItemNodeEntry as NodeEntry<FullListItemElement>) || [\n      undefined,\n      undefined\n    ];\n\n    // Try to find the path to the node above the selected list item\n    let abovePath;\n    try {\n      abovePath = Path.previous(listItemPath);\n    } catch {\n      abovePath = undefined;\n    }\n\n    // Only nest the list if there is a list item above the list item trying to be nested\n    if (listItemNode && abovePath && listItemNode.level < 3) {\n      // Get the list item and it's path from above the current list item\n      const [[aboveListItemNode, aboveListItemPath]] = Editor.nodes<CosmosCustom.ListItemElement>(\n        editor,\n        {\n          at: abovePath,\n          match: n => matchListItem(n) && n.level === listItemNode.level\n        }\n      );\n      // Gets the path for the text node above list-item\n      const [[, innerTextNodePath]] = Editor.nodes<CosmosCustom.TextElement>(editor, {\n        at: abovePath,\n        match: n => Element.isElement(n) && TEXT_TYPES.includes(n.type)\n      });\n\n      let copiedSubListNodes: CosmosCustom.ListItemElement[] = [];\n      const newListItemChildren = [listItemNode.children[0]];\n      if (listItemNode.children.length && listItemNode.children.length > 1) {\n        // Copy the item to be nested's sub list if it has one\n        const subList = listItemNode.children[1] as CosmosCustom.ListElement;\n        if (subList) {\n          copiedSubListNodes = [...subList.children];\n        }\n      }\n\n      // If the above list item has a sub list\n      if (aboveListItemNode.children.length > 1) {\n        // Get the list items in the sub list of the above list item\n        const { children } = aboveListItemNode.children[1] as CosmosCustom.ListElement;\n        // Gets the last list item in the above sub list\n        const [[parentSubListItem, parentSubListItemPath]] = Editor.nodes<FullListItemElement>(\n          editor,\n          {\n            at: aboveListItemPath,\n            match: n =>\n              matchListItem(n) &&\n              n.order === children.length &&\n              (n.level as number) - 1 === listItemNode.level\n          }\n        );\n\n        // Gets the path after the last list item in the above sub list\n        const nextParentSubListItemPath = Path.next(parentSubListItemPath);\n\n        // Inserts a copy of the list-item you are nesting below the lowest list item\n        // in the above sub list, as well as copies of any children the list-item you are\n        // nesting had.\n        let subOrderCount = parentSubListItem.order + 1;\n        Transforms.insertNodes(\n          editor,\n          [\n            {\n              ...listItemNode,\n              level: listItemNode.level + 1,\n              order: parentSubListItem.order + 1,\n              parentId: aboveListItemNode.id,\n              children: newListItemChildren\n            },\n            ...copiedSubListNodes.map(n => {\n              subOrderCount += 1;\n              return {\n                ...n,\n                level: listItemNode.level + 1,\n                order: subOrderCount,\n                parentId: aboveListItemNode.id\n              };\n            })\n          ],\n          { at: nextParentSubListItemPath }\n        );\n      } else {\n        const nextInnerTextNodePath = getNextPathBelow(innerTextNodePath);\n        // Nest the selected list item into a new list and then into the above list item\n        let subOrderCount = 1;\n        Transforms.insertNodes(\n          editor,\n          {\n            type: listType,\n            children: [\n              {\n                ...listItemNode,\n                order: 1,\n                level: listItemNode.level + 1,\n                parentId: aboveListItemNode.id,\n                children: newListItemChildren\n              },\n              ...copiedSubListNodes.map(n => {\n                subOrderCount += 1;\n                return {\n                  ...n,\n                  level: listItemNode.level + 1,\n                  order: subOrderCount,\n                  parentId: aboveListItemNode.id\n                };\n              })\n            ]\n          },\n          { at: nextInnerTextNodePath, mode: 'lowest' }\n        );\n      }\n\n      // Remove the old list item as we just copied it into the correct place\n      Transforms.removeNodes(editor, { at: listItemPath });\n    }\n  },\n  unNestList: (editor: Editor) => {\n    // Get the current node to be un nested\n    const [[node, nodePath]] = Editor.nodes<FullListItemElement>(editor, {\n      at: editor.selection?.anchor.path || undefined,\n      match: matchListItem,\n      mode: 'lowest'\n    });\n    const [singleItemList] = Editor.nodes<CosmosCustom.ListElement>(editor, {\n      match: n => matchList(n) && n.children.length === 1,\n      mode: 'highest'\n    });\n\n    if (singleItemList) {\n      Transforms.unwrapNodes(editor, { match: matchListItem });\n      Transforms.unwrapNodes(editor, { match: matchList });\n      return;\n    }\n    // Attempt to get the highest parent in the nested list if it exists\n    const [highestParent] = Editor.nodes<FullListItemElement>(editor, {\n      at: editor.selection || undefined,\n      match: n => matchListItem(n) && node.level - (n.level as number) === 2,\n      mode: 'lowest'\n    });\n    // Get the parent list node if it exists (list item)\n    const [[parentNode]] = Editor.nodes<FullListItemElement>(editor, {\n      at: editor.selection || undefined,\n      match: n => matchListItem(n) && node.level - (n.level as number) === 1,\n      mode: 'lowest'\n    });\n    // Get the parent list\n    const [[parentList]] = Editor.nodes(editor, {\n      at: editor.selection || undefined,\n      match: matchList,\n      mode: 'lowest'\n    });\n    if (parentNode && parentNode.children.length > 1) {\n      let newParentId;\n      if (highestParent) {\n        const [highestParentNode] = highestParent;\n        newParentId = highestParentNode.id;\n      }\n\n      // Setting the node to un nests new order and level\n      Transforms.setNodes<CosmosCustom.ListItemElement>(\n        editor,\n        {\n          level: node.level - 1,\n          order: parentNode.order + 1\n        },\n        { at: nodePath, match: n => matchListItem(n) && n.id === node.id }\n      );\n\n      // Set the level of any children under the node we are un nesting\n      Transforms.setNodes<CosmosCustom.ListItemElement>(\n        editor,\n        { level: node.level },\n        {\n          at: nodePath,\n          match: n => matchListItem(n) && (n.level as number) > node.level\n        }\n      );\n\n      // If there's a new parent id set it, otherwise unset the parent id entirely\n      if (newParentId) {\n        Transforms.setNodes<CosmosCustom.ListItemElement>(\n          editor,\n          { parentId: newParentId },\n          { at: nodePath, match: n => matchListItem(n) && n.id === node.id }\n        );\n      } else {\n        Transforms.unsetNodes<CosmosCustom.ListItemElement>(editor, 'parentId', {\n          at: nodePath,\n          match: n => matchListItem(n) && n.id === node.id\n        });\n      }\n\n      const listItemsExistBelow = node.order < parentList.children.length;\n\n      if (listItemsExistBelow) {\n        // Getting the inner text node inside of the list item in order to get the next path\n        const [[, innerTextNodePath]] = Editor.nodes(editor, {\n          at: nodePath,\n          match: matchList\n        });\n        const nextPath = Path.next(innerTextNodePath);\n        const copiedChildren = [];\n\n        let count = 1;\n        // Copy the children from the parent list that are below the list item we are un nesting\n        for (let i = node.order; i < parentList.children.length; i += 1) {\n          copiedChildren.push({\n            ...parentList.children[i],\n            parentId: node.id,\n            order: count\n          });\n          count += 1;\n        }\n\n        // Insert a new list with the copied children into the un nested list item\n        Transforms.insertNodes(\n          editor,\n          {\n            type: parentList.type,\n            children: [...copiedChildren]\n          },\n          { at: nextPath }\n        );\n\n        const [[newParentList, newParentListPath]] = Editor.nodes(editor, {\n          at: editor.selection?.anchor.path || undefined,\n          match: matchList,\n          mode: 'lowest'\n        });\n\n        let order = 0;\n        // Set the nodes below the list item being un nested\n        Transforms.setNodes<CosmosCustom.ListItemElement>(\n          editor,\n          {\n            parentId: node.id,\n            order\n          },\n          {\n            match: n => {\n              if (!matchListItem(n)) return false;\n\n              if (n.parentId === node.id) order += 1;\n              return n.parentId === node.id;\n            }\n          }\n        );\n\n        // Removing all old nodes from that were under the un nested item\n        for (let i = newParentList.children.length - 1; i >= node.order; i -= 1) {\n          const childPath = [...newParentListPath, i];\n          Transforms.removeNodes(editor, { at: childPath, match: matchListItem });\n        }\n      }\n\n      // Lift the current node at the users selection out of it's parent node twice\n      Transforms.liftNodes(editor, { match: matchListItem });\n      Transforms.liftNodes(editor, { match: matchListItem });\n    }\n  }\n};\n\nexport default commands;\n"]}