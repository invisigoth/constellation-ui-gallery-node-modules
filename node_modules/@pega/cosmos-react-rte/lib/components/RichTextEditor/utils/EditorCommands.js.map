{"version":3,"file":"EditorCommands.js","sourceRoot":"","sources":["../../../../src/components/RichTextEditor/utils/EditorCommands.ts"],"names":[],"mappings":"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","sourcesContent":["import { KeyboardEvent } from 'react';\nimport {\n  Editor,\n  Transforms,\n  Range,\n  Path,\n  NodeEntry,\n  Node,\n  Element,\n  Text,\n  CosmosCustom\n} from 'slate';\n\nimport { ExcludeStrict } from '@pega/cosmos-react-core';\n\nimport ListCommands from './ListCommands';\n\nconst textKeyCodeMapping: { [key: number]: Element['type'] } = {\n  48: 'paragraph',\n  49: 'heading-1',\n  50: 'heading-2',\n  51: 'heading-3',\n  52: 'heading-4'\n};\n\nconst commands = {\n  // Checks if an inline format is active\n  isFormatActive: (format: ExcludeStrict<keyof Text, 'text'>, editor: Editor) => {\n    const marks = Editor.marks(editor);\n    return marks ? marks[format] === true : false;\n  },\n  // Toggles an inline format on or off\n  toggleFormat: (format: ExcludeStrict<keyof Text, 'text'>, editor: Editor) => {\n    const formatActive = commands.isFormatActive(format, editor);\n    if (formatActive) {\n      Editor.removeMark(editor, format);\n    } else {\n      Editor.addMark(editor, format, true);\n    }\n  },\n  // Checks if a block level format is active\n  isBlockActive: (format: Element['type'], editor: Editor) => {\n    const [match] = Editor.nodes<Element>(editor, {\n      match: n => Element.isElement(n) && n.type === format\n    });\n\n    return !!match;\n  },\n  // Gets the active block level type\n  getActiveBlockType: (editor: Editor): string => {\n    const [match] = Editor.nodes<Element>(editor, {\n      at: editor.selection || undefined,\n      match: Element.isElement,\n      mode: 'lowest'\n    });\n\n    if (match) {\n      return match[0].type;\n    }\n    return '';\n  },\n  // Sets the block type of the currently selected block\n  setBlock: (format: Element['type'], editor: Editor) => {\n    Transforms.setNodes(editor, { type: format }, { mode: 'lowest' });\n  },\n  // Replaces a target in the editor with the given text\n  replaceWithText: (editor: Editor, target: Range | null, text: string) => {\n    if (target) {\n      Transforms.select(editor, target);\n    }\n    Transforms.insertText(editor, text);\n    Transforms.move(editor);\n  },\n  // Replaces a target in the editor with the given node\n  replaceWithNodes: (editor: Editor, target: Range | null, node: Node) => {\n    if (target) {\n      Transforms.select(editor, target);\n    }\n    Transforms.insertNodes(editor, node);\n  },\n  // Gets the highest selected block level node\n  getSelectedNode: (editor: Editor): NodeEntry<Node> => {\n    const [node] = Editor.nodes<Element>(editor, {\n      at: editor.selection || undefined,\n      match: n => Element.isElement(n),\n      mode: 'highest'\n    });\n    return node;\n  },\n  // Appends a 3x3 table into the editor and adds a blank line to the bottom\n  appendTable: (editor: Editor) => {\n    const baseArr: unknown[][] = new Array(3).fill(new Array(3).fill(0));\n    const table: [CosmosCustom.TableElement, CosmosCustom.ParagraphElement] = [\n      {\n        type: 'table',\n        children: [\n          {\n            type: 'table-body',\n            children: baseArr.map(row => {\n              return {\n                type: 'table-row',\n                children: row.map(() => {\n                  return {\n                    type: 'table-cell',\n                    children: [{ type: 'paragraph', children: [{ text: '' }] }]\n                  };\n                })\n              };\n            })\n          }\n        ]\n      },\n      {\n        type: 'paragraph',\n        children: [{ text: '' }]\n      }\n    ];\n\n    Transforms.insertNodes(editor, table, { mode: 'highest' });\n    const [firstTableCell] = Editor.nodes<CosmosCustom.ParagraphElement>(editor, {\n      at: editor.selection?.anchor.path.slice(0, 1),\n      match: n => Element.isElement(n) && n.type === 'paragraph',\n      mode: 'highest'\n    });\n    if (firstTableCell) {\n      const [, path] = firstTableCell;\n      path.push(0);\n      const nextPosition = { path, offset: 0 };\n      Transforms.setSelection(editor, { anchor: nextPosition, focus: nextPosition });\n    }\n  },\n  // Finds the image placeholder and replaces it with an image node\n  appendImage: (editor: Editor, imageData: { src: string; alt: string }, id: string) => {\n    const [node] = Editor.nodes<CosmosCustom.ImagePlaceholderElement>(editor, {\n      match: n => Element.isElement(n) && n.type === 'image-placeholder',\n      at: [Number(id)]\n    });\n\n    if (node) {\n      const [, path] = node;\n      Transforms.setNodes(\n        editor,\n        { type: 'image', src: imageData.src, alt: imageData.alt },\n        { at: path }\n      );\n      Transforms.unsetNodes(editor, 'id', { at: path });\n      return Editor.end(editor, path);\n    }\n    return null;\n  },\n  appendImagePlaceholder: (editor: Editor): string => {\n    const node = commands.getSelectedNode(editor);\n\n    if (node) {\n      const [, path] = node;\n      const next = Path.next(path);\n      Transforms.insertNodes(\n        editor,\n        { type: 'image-placeholder', children: [{ text: '' }] },\n        { at: next }\n      );\n      return next[0].toString();\n    }\n    return '';\n  },\n  // Creates a link at the given selection\n  createLink: (editor: Editor, text: string, url: string, selection: Range | null) => {\n    const linkNode = { text: text || url, href: url };\n    if (selection) {\n      if (Range.isCollapsed(selection)) {\n        const [node] = Editor.node(editor, selection);\n        if (Text.isText(node) && node.href) {\n          const before = Editor.before(editor, selection, { unit: 'word' });\n          const after = Editor.after(editor, selection, { unit: 'word' });\n\n          if (before && after) {\n            Transforms.insertNodes(editor, [linkNode], { at: { anchor: before, focus: after } });\n          } else if (before) {\n            const calculatedAfter = Editor.after(editor, before, { unit: 'word' });\n            if (calculatedAfter) {\n              Transforms.insertNodes(editor, [linkNode], {\n                at: { anchor: before, focus: calculatedAfter }\n              });\n            }\n          } else if (after) {\n            const calculatedBefore = Editor.before(editor, after, { unit: 'word' });\n            if (calculatedBefore) {\n              Transforms.insertNodes(editor, [linkNode], {\n                at: { anchor: calculatedBefore, focus: after }\n              });\n            }\n          }\n        } else {\n          Transforms.insertNodes(editor, [linkNode]);\n        }\n      } else {\n        Transforms.insertNodes(editor, [linkNode], {\n          at: selection\n        });\n      }\n    } else {\n      Transforms.insertNodes(editor, [linkNode]);\n    }\n  },\n  // Used to handle the enter key when the cursor is next to an image, inserts a new paragraph\n  checkImageEnter: (editor: Editor, e: KeyboardEvent) => {\n    const [image] = Editor.nodes<CosmosCustom.ImageElement>(editor, {\n      match: n => Element.isElement(n) && n.type === 'image'\n    });\n    if (image) {\n      if (e.keyCode < 37 && e.keyCode > 40) {\n        e.preventDefault();\n      }\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const [, path] = image;\n        const next = Path.next(path);\n        Transforms.insertNodes(\n          editor,\n          { type: 'paragraph', children: [{ text: '' }] },\n          { at: next }\n        );\n        Transforms.select(editor, next);\n      }\n    }\n  },\n  // Turns the href and/or searchResult property off on the text node when space is pressed while on a link or mention\n  checkLinkBreak: (editor: Editor, e: KeyboardEvent) => {\n    const [link] = Editor.nodes<Text>(editor, {\n      match: n => Text.isText(n) && !!n.href\n    });\n    const [searchResult] = Editor.nodes<Text>(editor, {\n      match: n => Text.isText(n) && !!n.searchResult\n    });\n    if ((link || searchResult) && (e.key === ' ' || e.key === 'Enter')) {\n      e.preventDefault();\n      Editor.insertNode(editor, { text: e.key === 'Enter' ? '\\n' : ' ' });\n      Editor.removeMark(editor, link ? 'href' : 'searchResult');\n    }\n  },\n  /**\n   * Turns the searchResult property off on the text node when any key is pressed while on a searchResult.\n   * Will delete the searchResult node if backspace key is hit.\n   * Will re-position cursor to the start/end of the searchResult if arrow navigation is used.\n   */\n  checkSearchDownKeys: (editor: Editor, e: KeyboardEvent) => {\n    const [text] = Editor.nodes<Text>(editor, {\n      match: n => Text.isText(n)\n    });\n\n    if (text) {\n      const [node, path] = text;\n      const nextNode = Editor.next(editor)?.[0] as Text;\n      const nextPath = Editor.next(editor)?.[1];\n      const previousNode = Editor.previous(editor)?.[0] as Text;\n      const previousPath = Editor.previous(editor)?.[1];\n\n      const next = nextNode && nextNode.searchResult;\n      const nextInline = next && path[0] === nextPath?.[0];\n      const previous = previousNode && previousNode.searchResult;\n      const previousInline = previous && path[0] === previousPath?.[0];\n\n      // Checks if the current selection is a single cursor point rather than spanning multiple characters\n      const singlePointSelection =\n        editor.selection?.anchor.offset === editor.selection?.focus.offset &&\n        editor.selection?.anchor.path[0] === editor.selection?.focus.path[0] &&\n        editor.selection?.anchor.path[1] === editor.selection?.focus.path[1];\n\n      // Checks if the current selected node is a search result, or directly adjacent inline with a search result\n      if (node.searchResult || (next && nextInline) || (previous && previousInline)) {\n        const atStart = node.searchResult && editor.selection?.anchor.offset === 0;\n        const atEnd = node.searchResult && editor.selection?.anchor.offset === node.text.length;\n\n        // Deletes the entire search result only if the cursor is at the end of the search result\n        if (e.key === 'Backspace' && (atEnd || (previous && previousInline))) {\n          if (singlePointSelection) e.preventDefault();\n          Transforms.delete(editor, { at: previous ? previousPath : path });\n          // Deletes the entire search result only if the cursor is at the start of the search result\n        } else if (e.key === 'Delete' && (atStart || (next && nextInline))) {\n          if (singlePointSelection) e.preventDefault();\n          Transforms.delete(editor, { at: next ? nextPath : path });\n          // Moves cursor to start of search result only if the cursor is at the end of the search result\n        } else if (e.key === 'ArrowLeft' && (atEnd || (previous && previousInline))) {\n          if (singlePointSelection) e.preventDefault();\n          Transforms.move(editor, {\n            distance: previous ? previousNode.text.length : node.text.length,\n            unit: 'character',\n            reverse: true\n          });\n          // Moves cursor to end of search result only if the cursor is at the start of the search result\n        } else if (e.key === 'ArrowRight' && (atStart || (next && nextInline))) {\n          if (singlePointSelection) e.preventDefault();\n          Transforms.move(editor, {\n            distance: next ? nextNode.text.length : node.text.length,\n            unit: 'character'\n          });\n          // Ensures all other character (besides special key bindings) are inserted as plain text\n        } else if (e.key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {\n          e.preventDefault();\n          Editor.insertNode(editor, { text: e.key === 'Enter' ? '\\n' : e.key });\n        }\n\n        // Prevents partial search result selections from disabling the searchResult flag\n        if (singlePointSelection) {\n          Editor.removeMark(editor, 'searchResult');\n        }\n      }\n    }\n  },\n  // Checks arrow navigation key up events around search results\n  checkSearchUpKeys: (editor: Editor, e: KeyboardEvent) => {\n    const [text] = Editor.nodes<Text>(editor, {\n      match: n => Text.isText(n)\n    });\n\n    if (text) {\n      const [node, path] = text;\n\n      const cursorInSearchResult =\n        node.searchResult &&\n        editor.selection?.anchor.path[0] === path[0] &&\n        editor.selection?.anchor.path[1] === path[1];\n\n      if (cursorInSearchResult && editor.selection) {\n        const distanceToStart = editor.selection.anchor.offset;\n        const distanceToEnd = node.text.length - editor.selection.anchor.offset;\n        // Moves cursor to the start of the search result\n        if (e.key === 'ArrowLeft') {\n          e.preventDefault();\n          Transforms.move(editor, {\n            distance: distanceToStart,\n            unit: 'character',\n            reverse: true\n          });\n          // Moves cursor to end of search result\n        } else if (e.key === 'ArrowRight') {\n          e.preventDefault();\n          Transforms.move(editor, {\n            distance: distanceToEnd,\n            unit: 'character'\n          });\n          // Moves cursor to start or end of search result, whichever is closer\n        } else if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n          e.preventDefault();\n          Transforms.move(editor, {\n            distance: distanceToStart <= distanceToEnd ? distanceToStart : distanceToEnd,\n            unit: 'character',\n            reverse: distanceToStart <= distanceToEnd\n          });\n        }\n      }\n    }\n  },\n  // Either adds a tab character or indents a list depending on the selection\n  indent: (editor: Editor) => {\n    const [nodeInListItem] = Editor.nodes<CosmosCustom.ListElement>(editor, {\n      match: n => Element.isElement(n) && n.type === 'list-item'\n    });\n\n    if (nodeInListItem) {\n      ListCommands.nestList(editor);\n      return;\n    }\n\n    if (editor.selection) {\n      let start = Editor.before(editor, editor.selection, { unit: 'block' });\n      start = start || Editor.start(editor, editor.selection);\n      Transforms.insertText(editor, '\\t', { at: start });\n    }\n  },\n  // Either removes a tab character or un indents a list depending on the selection\n  unindent: (editor: Editor) => {\n    const [nodeInListItem] = Editor.nodes<CosmosCustom.ListItemElement>(editor, {\n      match: n => Element.isElement(n) && n.type === 'list-item'\n    });\n\n    if (nodeInListItem) {\n      ListCommands.unNestList(editor);\n      return;\n    }\n\n    if (editor.selection) {\n      let start = Editor.before(editor, editor.selection, { unit: 'block' });\n      start = start || Editor.start(editor, editor.selection);\n      let end = Editor.after(editor, editor.selection, { unit: 'block' });\n      end = end || Editor.end(editor, editor.selection);\n      if (start && end) {\n        const text = Editor.string(editor, { anchor: start, focus: end });\n        const newText = text.replace(/\\t/, '');\n        Transforms.insertText(editor, newText, { at: { anchor: start, focus: end } });\n      }\n    }\n  },\n  checkKeyCommands: (editor: Editor, e: KeyboardEvent, markdownOnly?: boolean) => {\n    const cmdOrCtrl = e.metaKey || e.ctrlKey;\n    let commandExecuted = false;\n    if (cmdOrCtrl && !markdownOnly) {\n      // Command or Ctrl + Shift\n      if (e.shiftKey) {\n        switch (e.key) {\n          case 'b':\n            commands.toggleFormat('bold', editor);\n            commandExecuted = true;\n            break;\n          case 'i':\n            commands.toggleFormat('italic', editor);\n            commandExecuted = true;\n            break;\n          case 'x':\n            commands.toggleFormat('line-through', editor);\n            commandExecuted = true;\n            break;\n          case 'l':\n            ListCommands.toggleList('unordered-list', editor);\n            commandExecuted = true;\n            break;\n          default:\n        }\n        // Command or Ctrl but not alt\n      } else if (!e.shiftKey && !e.altKey) {\n        switch (e.key) {\n          case 'b':\n            commands.toggleFormat('bold', editor);\n            commandExecuted = true;\n            break;\n          case 'i':\n            commands.toggleFormat('italic', editor);\n            commandExecuted = true;\n            break;\n          default:\n        }\n      }\n    } else if (cmdOrCtrl && markdownOnly && !e.shiftKey && !e.altKey && e.key === 'x') {\n      const [searchResult] = Editor.nodes<Text>(editor, {\n        match: n => Text.isText(n) && !!n.searchResult\n      });\n      if (searchResult) {\n        Editor.removeMark(editor, 'searchResult');\n      }\n    }\n\n    if (e.altKey && !markdownOnly) {\n      if (cmdOrCtrl) {\n        if (textKeyCodeMapping[e.keyCode]) {\n          commands.setBlock(textKeyCodeMapping[e.keyCode], editor);\n          commandExecuted = true;\n        }\n      } else if (e.keyCode === 77) {\n        if (e.shiftKey) {\n          commands.unindent(editor);\n          commandExecuted = true;\n        } else {\n          commands.indent(editor);\n          commandExecuted = true;\n        }\n      }\n    }\n\n    if (markdownOnly && e.key === 'Backspace') {\n      const [searchResult] = Editor.nodes<Text>(editor, {\n        match: n => Text.isText(n) && !!n.searchResult\n      });\n      if (searchResult) {\n        Editor.removeMark(editor, 'searchResult');\n      }\n      if (!editor.selection) {\n        Transforms.select(editor, {\n          anchor: { offset: 0, path: [0, 0] },\n          focus: { offset: 0, path: [0, 0] }\n        });\n      }\n    }\n\n    if (commandExecuted) e.preventDefault();\n  }\n};\n\nexport default commands;\n"]}