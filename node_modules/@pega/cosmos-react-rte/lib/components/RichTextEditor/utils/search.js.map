{"version":3,"file":"search.js","sourceRoot":"","sources":["../../../../src/components/RichTextEditor/utils/search.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,KAAK,EAAQ,MAAM,OAAO,CAAC;AAE5C,wDAAwD;AACxD,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,MAAc,EACd,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAuD,EAChF,EAAE;IACF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;IAC7B,IAAI,SAAS,CAAC;IAEd,kCAAkC;IAClC,IAAI;QACF,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;KAC9D;IAAC,OAAO,CAAC,EAAE;QACV,SAAS,GAAG,KAAK,CAAC;KACnB;IAED,IAAI,SAAS,IAAI,SAAS,EAAE;QAC1B,sCAAsC;QACtC,MAAM,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC3C,4CAA4C;QAC5C,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACpD,gFAAgF;QAChF,IAAK,UAAmB,EAAE,YAAY;YAAE,OAAO;QAE/C,0EAA0E;QAC1E,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;QACzE,2DAA2D;QAC3D,MAAM,SAAS,GAAG,aAAa,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;QAClF,2CAA2C;QAC3C,MAAM,QAAQ,GAAG,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAE/D,+DAA+D;QAC/D,MAAM,WAAW,GAAG,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEtD,IAAI,WAAW,IAAI,OAAO,WAAW,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,EAAE;YACpE,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACpD,qEAAqE;YACrE,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAC9B,MAAM,EACN,EAAE,GAAG,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,GAAG,WAAW,EAAE,EACxD,SAAS,CACV,CAAC;YACF,OAAO,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC;SAC9E;KACF;AACH,CAAC,CAAC","sourcesContent":["import { Editor, Range, Text } from 'slate';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const onSearchChange = (\n  editor: Editor,\n  { groupId, regex, trigger }: { groupId: string; regex: RegExp; trigger: string }\n) => {\n  const { selection } = editor;\n  let collapsed;\n\n  // Prevents error on triple clicks\n  try {\n    collapsed = selection ? Range.isCollapsed(selection) : false;\n  } catch (e) {\n    collapsed = false;\n  }\n\n  if (selection && collapsed) {\n    // Gets the cursor position in the RTE\n    const [cursorPos] = Range.edges(selection);\n    // Gets the Slate node at the search trigger\n    const [searchNode] = Editor.node(editor, cursorPos);\n    // If the search is triggered from within a searchResult node, ignore the search\n    if ((searchNode as Text)?.searchResult) return;\n\n    // Gets the point before the line that is currently being typed in the RTE\n    const posBeforeWord = Editor.before(editor, cursorPos, { unit: 'line' });\n    // Gets the range before the line up to the cursor position\n    const lineRange = posBeforeWord && Editor.range(editor, posBeforeWord, cursorPos);\n    // Gets all of the text on the current line\n    const lineText = lineRange && Editor.string(editor, lineRange);\n\n    // Matches the text on the current line with the regex provided\n    const beforeMatch = lineText && lineText.match(regex);\n\n    if (beforeMatch && typeof beforeMatch.groups?.[groupId] === 'string') {\n      const matchLength = beforeMatch.groups.match.length;\n      // Gets the range of the matching text to place the popover correctly\n      const targetRange = Editor.range(\n        editor,\n        { ...cursorPos, offset: cursorPos.offset - matchLength },\n        cursorPos\n      );\n      return { search: beforeMatch.groups[groupId], target: targetRange, trigger };\n    }\n  }\n};\n"]}