{"version":3,"file":"RichTextEditor.types.js","sourceRoot":"","sources":["../../../src/components/RichTextEditor/RichTextEditor.types.ts"],"names":[],"mappings":"","sourcesContent":["import { Ref, ComponentType } from 'react';\n\nimport { FormControlProps, MenuProps } from '@pega/cosmos-react-core';\nimport { BaseProps } from '@pega/cosmos-react-core/lib/types';\n\nimport { Features } from './Toolbar/Toolbar.types';\nimport { InteractionRenderers } from './RichTextViewer.types';\n\nexport type RichTextEditorState = {\n  focus: () => void;\n  getPlainText: () => string;\n  getRichText: () => string;\n  getHtml: () => string;\n  clear: () => void;\n  appendImage: (imageData: { src: string; alt: string }, id: string) => void;\n  /** This functionality will only work when the editor is focused. */\n  insertText: (text: string) => void;\n  insertHtml: (html: string, overwrite: boolean) => void;\n};\nexport interface RichTextEditorProps extends FormControlProps, BaseProps {\n  /** An array of strings that activate features on the toolbar */\n  toolbar?: Features[];\n  /** Turning on markdown only turns off the tool bar, any rich text features, and input styling */\n  markdownOnly?: boolean;\n  /** A set of characters that designate special search capabilities. */\n  searchTriggers?: {\n    trigger: string;\n    regex?: string;\n  }[];\n  /** Callback triggered on text change following a valid search trigger. */\n  onSearch?: (event: { search: string; trigger: string }) => void;\n  /** Callback triggered on selection of a search result that returns an object representing the node to replace the search with. */\n  getSearchItemReplacement?: (id: string) =>\n    | {\n        markdown?: string;\n        component?: ComponentType<any>;\n        props?: Record<string, any>;\n        text: string;\n      }\n    | undefined;\n  /**\n   * A set of custom renderer configurations to convert markdown for search results.\n   * @internal\n   */\n  searchRenderers?: InteractionRenderers[];\n  /** The menu that will render as a response to a search query. */\n  menu?: MenuProps;\n  /** A callback that supplies an object with functions that can manipulate the editor and retrieve it's content/state */\n  onChange?: () => void;\n  /** A callback that runs if the editor is focused */\n  onFocus?: () => void;\n  /** A callback that runs if the editor loses focus */\n  onBlur?: () => void;\n  /** A callback when an image is added through the toolbar image feature */\n  onImageAdded?: (image: File, id: string) => void;\n  /** Standard placeholder for an input */\n  placeholder?: string;\n  /** Default value for the RTE - HTML String */\n  defaultValue?: string;\n  /** Will automatically focus the RTE on render if true */\n  autoFocus?: boolean;\n  /** Sets the height for the RTE. If no max height is set the RTE will continue to expand, otherwise an overflow will be applied */\n  height?:\n    | string\n    | {\n        min?: string;\n        max?: string;\n      };\n  type?: 'html' | 'markdown';\n  /** Handle to the state. */\n  ref?: Ref<RichTextEditorState>;\n}\n"]}