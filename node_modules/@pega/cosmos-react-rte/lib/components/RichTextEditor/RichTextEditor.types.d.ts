import { Ref, ComponentType } from 'react';
import { FormControlProps, MenuProps } from '@pega/cosmos-react-core';
import { BaseProps } from '@pega/cosmos-react-core/lib/types';
import { Features } from './Toolbar/Toolbar.types';
import { InteractionRenderers } from './RichTextViewer.types';
export type RichTextEditorState = {
    focus: () => void;
    getPlainText: () => string;
    getRichText: () => string;
    getHtml: () => string;
    clear: () => void;
    appendImage: (imageData: {
        src: string;
        alt: string;
    }, id: string) => void;
    /** This functionality will only work when the editor is focused. */
    insertText: (text: string) => void;
    insertHtml: (html: string, overwrite: boolean) => void;
};
export interface RichTextEditorProps extends FormControlProps, BaseProps {
    /** An array of strings that activate features on the toolbar */
    toolbar?: Features[];
    /** Turning on markdown only turns off the tool bar, any rich text features, and input styling */
    markdownOnly?: boolean;
    /** A set of characters that designate special search capabilities. */
    searchTriggers?: {
        trigger: string;
        regex?: string;
    }[];
    /** Callback triggered on text change following a valid search trigger. */
    onSearch?: (event: {
        search: string;
        trigger: string;
    }) => void;
    /** Callback triggered on selection of a search result that returns an object representing the node to replace the search with. */
    getSearchItemReplacement?: (id: string) => {
        markdown?: string;
        component?: ComponentType<any>;
        props?: Record<string, any>;
        text: string;
    } | undefined;
    /**
     * A set of custom renderer configurations to convert markdown for search results.
     * @internal
     */
    searchRenderers?: InteractionRenderers[];
    /** The menu that will render as a response to a search query. */
    menu?: MenuProps;
    /** A callback that supplies an object with functions that can manipulate the editor and retrieve it's content/state */
    onChange?: () => void;
    /** A callback that runs if the editor is focused */
    onFocus?: () => void;
    /** A callback that runs if the editor loses focus */
    onBlur?: () => void;
    /** A callback when an image is added through the toolbar image feature */
    onImageAdded?: (image: File, id: string) => void;
    /** Standard placeholder for an input */
    placeholder?: string;
    /** Default value for the RTE - HTML String */
    defaultValue?: string;
    /** Will automatically focus the RTE on render if true */
    autoFocus?: boolean;
    /** Sets the height for the RTE. If no max height is set the RTE will continue to expand, otherwise an overflow will be applied */
    height?: string | {
        min?: string;
        max?: string;
    };
    type?: 'html' | 'markdown';
    /** Handle to the state. */
    ref?: Ref<RichTextEditorState>;
}
//# sourceMappingURL=RichTextEditor.types.d.ts.map