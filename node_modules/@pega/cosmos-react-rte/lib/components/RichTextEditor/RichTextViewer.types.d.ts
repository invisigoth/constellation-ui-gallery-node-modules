import { marked } from 'marked';
import { ComponentType, FC } from 'react';
import { ErrorStateProps, ExcludeStrict } from '@pega/cosmos-react-core';
export interface InteractionRenderers {
    type: string;
    regexPattern: RegExp;
    xmlElement?: string;
    component?: ComponentType<any>;
    getSearchAttributes?: (xmlElement: string, searchResult: string) => {
        markdown: string;
        component: ComponentType<any>;
        props: Record<string, any>;
        text: string;
    } | undefined;
}
export type TokenMap = {
    [K in ExcludeStrict<marked.Token, marked.Tokens.Def>['type']]: Extract<marked.Token, {
        type: K;
    }>;
};
export type MDMap = {
    [K in ExcludeStrict<marked.Token, marked.Tokens.Def>['type']]?: (token: TokenMap[K]) => FC<{
        token: TokenMap[K];
    }> | undefined;
};
export interface RichTextViewerProps {
    content: string;
    type: 'markdown' | 'html' | 'richtext';
    interactionRenderers?: InteractionRenderers[];
    markdownMap?: MDMap;
    onRetry?: ErrorStateProps['onRetry'];
}
//# sourceMappingURL=RichTextViewer.types.d.ts.map