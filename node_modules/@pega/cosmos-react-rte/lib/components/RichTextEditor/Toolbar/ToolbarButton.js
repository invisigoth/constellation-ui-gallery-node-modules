import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { mix } from 'polished';
import { defaultThemeProp, Tooltip, tryCatch, useConsolidatedRef, useElement, useI18n } from '@pega/cosmos-react-core';
import { useRTEContext } from '../RichTextEditor.context';
const StyledToolbarButton = styled.button(props => {
    const { active, theme, styleType } = props;
    const size = `calc(4 * ${props.theme.base.spacing})`;
    const activeColor = tryCatch(() => mix(0.85, theme.base.palette['primary-background'], theme.base.palette.interactive));
    return css `
    background-color: ${active ? activeColor : 'transparent'};
    border: none;
    color: ${active ? theme.base.palette.interactive : theme.base.palette['foreground-color']};
    outline: none;
    display: inline-flex;
    line-height: 1;
    align-items: center;
    justify-content: center;
    height: ${size};
    min-width: ${size};
    opacity: ${active ? 'inherit' : '0.7'};
    cursor: pointer;

    &:focus {
      box-shadow: ${theme.base.shadow.focus};
    }

    &:hover {
      opacity: 1;
    }

    &:disabled {
      cursor: not-allowed;
      box-shadow: none;
    }

    ${styleType === 'BOLD' &&
        css `
      font-weight: bold;
    `}

    ${styleType === 'ITALIC' &&
        css `
      font-style: italic;
    `}

    ${styleType === 'STRIKE-THROUGH' &&
        css `
      text-decoration: line-through;
    `}
  `;
});
StyledToolbarButton.defaultProps = defaultThemeProp;
const ToolbarButton = forwardRef(function ToolbarButton({ tooltip, active, styleType, disabled, label, onMouseDown, ...restProps }, ref) {
    const { disabled: contextDisabled } = useRTEContext();
    const [el, setEl] = useElement();
    const toolBarRef = useConsolidatedRef(setEl, ref);
    const t = useI18n();
    return (_jsxs(_Fragment, { children: [_jsx(StyledToolbarButton, { active: active, styleType: styleType, ref: toolBarRef, disabled: contextDisabled || disabled, tabIndex: -1, onKeyPress: (e) => {
                    if (e.key === 'Enter') {
                        onMouseDown?.(e);
                    }
                }, onMouseDown: onMouseDown, type: 'button', "aria-label": `${label}${active ? ` - ${t('active')}` : ''}`, "aria-pressed": active, ...restProps }), el && tooltip && (_jsx(Tooltip, { target: el, showDelay: 'none', hideDelay: 'none', children: tooltip }))] }));
});
export default ToolbarButton;
//# sourceMappingURL=ToolbarButton.js.map