import { Grid, Flex, FieldGroup, withConfiguration } from '@pega/cosmos-react-core';

import type { PConnFieldProps } from './PConnProps';

import Styled{{COMPONENT_CLASS_NAME}}Wrapper from './styles';

// interface for props
interface {{COMPONENT_CLASS_NAME}}Props extends PConnFieldProps {
  // If any, enter additional props that only exist on TextInput here
  showLabel: boolean;
  children: any;
}

// Duplicated runtime code from Constellation Design System Component

// props passed in combination of props from property panel (config.json) and run time props from Constellation
// any default values in config.pros should be set in defaultProps at bottom of this file
function {{COMPONENT_CLASS_NAME}}(props: {{COMPONENT_CLASS_NAME}}Props) {


  const { children = [], label, showLabel, getPConnect } = props;
  const propsToUse = { label, showLabel, ...getPConnect().getInheritedProps() };

  const numRegions = children?.length;
  const gridRepeat = "repeat(".concat(numRegions).concat(", 1fr)");
  const gridContainer = {"colGap" : 1};
  // @ts-ignore
  gridContainer.cols = gridRepeat;
  // @ts-ignore
  gridContainer.alignItems = 'start';

  const flexContainer = {direction: 'column'};
  // @ts-ignore
  flexContainer.gap = 2;

  return (
    <Styled{{COMPONENT_CLASS_NAME}}Wrapper>
    {{! pick new delimiters for mustache }}
    {{=<% %>=}}
      <FieldGroup name={propsToUse.showLabel ? propsToUse.label : ''}>
        <Grid container={gridContainer}>
        {children.map((child: any, i: number) => (
          // @ts-ignore
          <Flex container={flexContainer} key={`r-${i + 1}`}>
          {child}
          </Flex>
        ))}
        </Grid>
      </FieldGroup>
    <%={{ }}=%>     {{! revert delimiters for mustache }}
    </Styled{{COMPONENT_CLASS_NAME}}Wrapper>
  );

}


export default withConfiguration({{COMPONENT_CLASS_NAME}});
