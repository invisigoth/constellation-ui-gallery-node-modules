import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, isValidElement, useContext, useState } from 'react';
import styled from 'styled-components';
import { Button, Link, useConsolidatedRef, useElement } from '@pega/cosmos-react-core';
import { getXMLAttributes } from '@pega/cosmos-react-rte';
import { FeedContext } from '../Feed/Feed.context';
const StyledButton = styled(Button) `
  &:enabled:focus,
  &:not([disabled]):focus {
    box-shadow: none;
    text-decoration: underline;
  }
`;
const StyledLink = styled(Link) `
  &:enabled:focus,
  &:not([disabled]):focus {
    box-shadow: none;
    text-decoration: underline;
  }
`;
const serializer = new XMLSerializer();
const MentionButton = forwardRef(function MentionButton({ children, id: idProp = '', text: textProp = '', type: typeProp = '', href: hrefProp = '', ...restProps }, ref) {
    const { onMentionClick, onMentionPreview } = useContext(FeedContext);
    const [mentionContent, setMentionContent] = useState();
    const [target, setTarget] = useElement(null);
    const mentionRef = useConsolidatedRef(ref);
    let id = '';
    let text = '';
    let type = '';
    let href = '';
    if (!isValidElement(children)) {
        if (!children.id || !children.text || !children.type)
            return _jsx("span", { children: children.rawText });
        id = children.id;
        text = children.text;
        type = children.type;
        href = children.href || '';
    }
    else {
        id = idProp;
        text = textProp;
        type = typeProp;
        href = hrefProp;
    }
    const handleClick = (e) => {
        setTarget(e.currentTarget);
        const comp = onMentionClick?.({
            id,
            text,
            type,
            target: e.currentTarget,
            closeGlimpse: () => setTarget(null)
        });
        if (comp)
            setMentionContent(comp);
    };
    return (_jsxs(_Fragment, { children: [href ? (_jsx(StyledLink, { ...restProps, ref: mentionRef, href: href, previewable: !!onMentionPreview, onPreview: onMentionPreview
                    ? () => onMentionPreview({
                        id,
                        text,
                        type
                    })
                    : undefined, spellCheck: false, children: isValidElement(children) ? children : text })) : (_jsx(StyledButton, { ...restProps, ref: mentionRef, variant: 'link', onClick: handleClick, spellCheck: false, children: isValidElement(children) ? children : text })), target && mentionContent] }));
});
export const MentionButtonConfig = {
    type: 'mention',
    xmlElement: 'pega-mention',
    regexPattern: /(?:^|)<pega-mention (?:[^\n/]|\/(?!>))+\/>/g,
    component: MentionButton,
    inject: ({ id, type, text, href }) => {
        if (!id || !type || !text)
            return;
        const element = document.createElementNS(null, 'pega-mention');
        element.setAttribute('id', id);
        element.setAttribute('text', text);
        element.setAttribute('type', type);
        if (href)
            element.setAttribute('href', href);
        return serializer.serializeToString(element);
    },
    extract: (element) => {
        const attributes = getXMLAttributes(element);
        if (!attributes || !attributes.id || !attributes.text || !attributes.type)
            return undefined;
        return {
            id: attributes.id,
            text: attributes.text,
            type: attributes.type,
            href: attributes.href
        };
    }
};
export default MentionButton;
//# sourceMappingURL=MentionButton.js.map