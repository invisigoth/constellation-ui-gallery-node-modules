import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect, useContext } from 'react';
import styled, { css } from 'styled-components';
import { FileUploadItem, Grid, Image, defaultThemeProp, getKindFromMimeType, getMimeTypeFromFile, Flex, usePrevious, useI18n } from '@pega/cosmos-react-core';
import BareButton from '@pega/cosmos-react-core/lib/components/Button/BareButton';
import { FeedContext } from './Feed.context';
export const StyledFeedAttachments = styled.ul(({ theme }) => {
    return css `
    overflow-x: auto;

    > li {
      background-color: ${theme.base.palette['primary-background']};
      cursor: initial;
    }
  `;
});
StyledFeedAttachments.defaultProps = defaultThemeProp;
export const StyledImagePreview = styled(BareButton)(({ theme }) => {
    return css `
    line-height: 0;
    width: fit-content;
    border-radius: calc(0.5 * ${theme.base['border-radius']});

    & + & {
      margin: 0;
    }

    &:focus {
      box-shadow: ${theme.components.button['focus-shadow']};
    }

    img {
      border-radius: calc(0.5 * ${theme.base['border-radius']});
      object-fit: contain;
      max-height: 10rem;
      max-width: 100%;
    }
  `;
});
StyledImagePreview.defaultProps = defaultThemeProp;
export const StyledAttachmentsRegion = styled.div(({ variant, readOnly, theme }) => {
    return css `
      margin: ${theme.base.spacing} calc(5 * ${theme.base.spacing}) 0
        calc(${variant === 'post' ? 6 : 5} * ${theme.base.spacing});

      ${readOnly &&
        css `
        margin-block-start: ${theme.base.spacing};
        margin-inline: 0;

        div + ul {
          margin-block-start: ${theme.base.spacing};
        }
      `}
    `;
});
StyledAttachmentsRegion.defaultProps = defaultThemeProp;
const FeedAttachments = forwardRef(function FeedAttachments(props, ref) {
    const { variant, attachments = [], readOnly } = props;
    const t = useI18n();
    const { announce } = useContext(FeedContext);
    const prevAttachments = usePrevious(attachments) ?? [];
    useEffect(() => {
        if (!readOnly && attachments.length !== prevAttachments?.length) {
            const difference = attachments.length - prevAttachments.length;
            const normalizedDifference = difference * (difference > 0 ? 1 : -1);
            const timeoutId = announce(t(`feed_attachments_${difference > 0 ? 'added' : 'removed'}`, [normalizedDifference], {
                count: normalizedDifference
            }));
            return () => clearTimeout(timeoutId);
        }
    }, [attachments, readOnly]);
    if (attachments.length === 0)
        return null;
    const previewableFiles = [];
    const nonPreviewableFiles = [];
    attachments.forEach(file => {
        const type = getKindFromMimeType(getMimeTypeFromFile(file.name) ?? '');
        if (type === 'image' && file.thumbnail)
            previewableFiles.push(file);
        else
            nonPreviewableFiles.push(file);
    });
    return (_jsxs(StyledAttachmentsRegion, { variant: variant, readOnly: readOnly, children: [readOnly && !!previewableFiles.length && (_jsx(Flex, { container: { gap: 1, wrap: 'wrap' }, children: previewableFiles.map(({ lastModified, name, onPreview, thumbnail }) => {
                    return (_jsx(StyledImagePreview, { onClick: () => onPreview?.(name), children: _jsx(Image, { alt: name, src: thumbnail }) }, lastModified));
                }) })), _jsxs(Grid, { ref: ref, as: StyledFeedAttachments, container: {
                    cols: 'repeat(auto-fill, minmax(15rem, 1fr))',
                    gap: 1
                }, children: [!readOnly &&
                        previewableFiles.map(({ lastModified, name, size, ...restProps }) => {
                            return _jsx(FileUploadItem, { name: name, size: size, ...restProps }, lastModified);
                        }), nonPreviewableFiles.map(({ lastModified, name, size, ...restProps }) => {
                        return _jsx(FileUploadItem, { name: name, size: size, ...restProps }, lastModified);
                    })] })] }));
});
export default FeedAttachments;
//# sourceMappingURL=FeedAttachments.js.map