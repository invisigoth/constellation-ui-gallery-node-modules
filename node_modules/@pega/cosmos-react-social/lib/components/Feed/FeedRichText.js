import { jsx as _jsx } from "react/jsx-runtime";
import { useContext, forwardRef, useState, useRef } from 'react';
import { cap, useI18n } from '@pega/cosmos-react-core';
import { getXMLAttributes, RichTextEditor } from '@pega/cosmos-react-rte';
import { MentionButtonConfig } from '../MentionButton';
import { HashtagButtonConfig } from '../HashtagButton';
import { FeedContext } from './Feed.context';
const FeedRichText = forwardRef(function FeedRichText(props, ref) {
    const { height = { min: 'auto' }, ...restProps } = props;
    const { searchTypes = [], onSearch, searchResults = [], showSearchResults } = useContext(FeedContext);
    const [triggerType, setTriggerType] = useState('mention');
    const [showMentionType, setShowMentionType] = useState(false);
    const searchType = useRef('');
    const t = useI18n();
    const onDecoSearch = (event) => {
        const trigger = event.trigger === '@' ? 'mention' : 'tag';
        setTriggerType(trigger);
        if (trigger === 'mention' && event.search === '') {
            setShowMentionType(true);
        }
        else {
            setShowMentionType(false);
            onSearch?.({ type: trigger, search: event.search, mentionType: searchType.current });
        }
    };
    const typesMenu = {
        onItemActive: (id) => {
            searchType.current = id;
        },
        onItemClick: (id) => {
            searchType.current = id;
            setShowMentionType(false);
            onSearch?.({ type: 'mention', search: '', mentionType: id });
        },
        items: searchTypes.map(type => {
            return { id: type, primary: cap(type) };
        })
    };
    const searchMenu = searchResults.length && showSearchResults
        ? {
            header: triggerType === 'mention' ? t('mention_type', [searchType.current]) : '',
            items: searchResults.map(res => {
                return { ...res, href: undefined };
            })
        }
        : undefined;
    const getSearchAttributes = (xmlElement, searchResult) => {
        switch (xmlElement) {
            case 'pega-mention': {
                const attributes = getXMLAttributes(searchResult);
                if (!attributes)
                    return;
                return {
                    markdown: searchResult,
                    component: MentionButtonConfig.component,
                    props: attributes,
                    text: attributes.text
                };
            }
            case 'pega-tag': {
                const attributes = getXMLAttributes(searchResult);
                if (!attributes)
                    return;
                return {
                    markdown: searchResult,
                    component: HashtagButtonConfig.component,
                    props: attributes,
                    text: attributes.tag
                };
            }
            default:
        }
    };
    return (_jsx(RichTextEditor, { ...restProps, markdownOnly: true, ref: ref, height: height, searchTriggers: [
            { trigger: '@', regex: String.raw `(?:\S+(?:[^\n\S][^@#\s]\S*)*[^\n\S]?|)` },
            { trigger: '#', regex: String.raw `[^\s,]*` }
        ], getSearchItemReplacement: (id) => {
            const item = searchResults?.find(({ id: itemId }) => itemId === id);
            if (!item)
                return undefined;
            return {
                markdown: triggerType === 'mention'
                    ? MentionButtonConfig.inject({
                        id: item.id,
                        type: searchType.current,
                        text: item.primary,
                        href: item.href
                    })
                    : HashtagButtonConfig.inject({ tag: item.id }),
                component: triggerType === 'mention'
                    ? MentionButtonConfig.component
                    : HashtagButtonConfig.component,
                props: triggerType === 'mention'
                    ? {
                        id: item.id,
                        text: item.primary,
                        type: searchType.current,
                        tabIndex: -1
                    }
                    : { tag: item.primary, tabIndex: -1 },
                text: item.primary
            };
        }, searchRenderers: [
            {
                type: MentionButtonConfig.type,
                xmlElement: MentionButtonConfig.xmlElement,
                regexPattern: MentionButtonConfig.regexPattern,
                getSearchAttributes
            },
            {
                type: HashtagButtonConfig.type,
                xmlElement: HashtagButtonConfig.xmlElement,
                regexPattern: HashtagButtonConfig.regexPattern,
                getSearchAttributes
            }
        ], onSearch: onDecoSearch, menu: showMentionType ? typesMenu : searchMenu }));
});
export default FeedRichText;
//# sourceMappingURL=FeedRichText.js.map