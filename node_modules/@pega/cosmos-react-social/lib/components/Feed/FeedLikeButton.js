import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useContext, useMemo, useRef, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { Button, Icon, Avatar, Count, Tooltip, useModalManager, useI18n, useConfiguration, useElement, formatListToLocaleString, Flex, defaultThemeProp, useUID } from '@pega/cosmos-react-core';
import BareRoleButton from '@pega/cosmos-react-core/lib/components/Button/BareRoleButton';
import { FeedContext } from './Feed.context';
import FeedButton from './FeedButton';
import FeedModalList from './FeedModalList';
const InlineBareButton = styled(BareRoleButton)(({ theme }) => {
    return css `
    position: relative;
    display: inline-block;
    line-height: 1;
    outline: none;
    border-radius: calc(${theme.base['border-radius']} * 9999);

    &:hover {
      ::before {
        content: '';
        position: absolute;
        top: calc(${theme.components.button['border-width']} * -1);
        bottom: calc(${theme.components.button['border-width']} * -1);
        left: calc(${theme.components.button['border-width']} * -1);
        right: calc(${theme.components.button['border-width']} * -1);
        border-radius: inherit;
        background-color: currentColor;
        opacity: 0.15;
      }
    }

    &:focus {
      box-shadow: ${theme.components.button['focus-shadow']};
    }
  `;
});
InlineBareButton.defaultProps = defaultThemeProp;
const FeedLikeButton = forwardRef(function FeedLikeButton(props, ref) {
    const { id, liked, likeCount = 0, likes = [], onLikeClick, onLikeCountInteraction, onLoadMoreLikes, likesLoading } = props;
    const t = useI18n();
    const { locale } = useConfiguration();
    const { create } = useModalManager();
    const { userInfo: loggedInUser } = useContext(FeedContext);
    const [countEl, setCountEl] = useElement(null);
    const likesModalRef = useRef();
    const likeCountId = useUID();
    useEffect(() => {
        likesModalRef.current?.update({
            count: likeCount,
            heading: t('feed_likes'),
            listItems: likes,
            onLoadMore: onLoadMoreLikes,
            loading: likesLoading
        });
    }, [likeCount, likes, onLoadMoreLikes, likesLoading]);
    const likesAttributes = useMemo(() => {
        const likesList = likes.map(x => x.primary.toString());
        return {
            ariaLabel: likeCount
                ? `${t('feed_liked_by')} ${formatListToLocaleString(likesList.slice(0, 2), t, locale, {
                    count: likeCount
                })}`
                : t('feed_post_likes', [likeCount], { count: likeCount }),
            label: `${t('feed_liked_by')}:\n${formatListToLocaleString(likesList.slice(0, 2), t, locale, {
                count: likeCount,
                separator: '\n'
            })}`
        };
    }, [likes, likeCount]);
    const onLikeCountClick = () => {
        if (likes.length) {
            likesModalRef.current = create(FeedModalList, {
                count: likeCount,
                heading: t('feed_likes'),
                listItems: likes,
                onLoadMore: onLoadMoreLikes,
                loading: likesLoading
            });
        }
        else {
            onLikeCountInteraction?.();
        }
    };
    return (_jsxs(Flex, { container: { gap: 0.5, alignItems: 'center' }, children: [_jsx(Button, { variant: 'simple', icon: true, compact: true, as: FeedButton, onClick: () => {
                    const user = {
                        id: loggedInUser.username,
                        primary: loggedInUser.fullname,
                        secondary: loggedInUser.meta,
                        visual: (_jsx(Avatar, { size: 'l', imageSrc: loggedInUser.avatarSrc, name: loggedInUser.fullname }))
                    };
                    onLikeClick({
                        id,
                        user
                    });
                }, emphasized: liked, "aria-pressed": liked, label: liked ? t('feed_unlike_label') : t('feed_like_label'), "aria-describedby": likeCount > 0 ? likeCountId : undefined, ref: ref, children: _jsx(Icon, { name: liked ? 'thumbs-up-solid' : 'thumbs-up' }) }), likeCount > 0 && (_jsxs(_Fragment, { children: [_jsx(InlineBareButton, { ref: setCountEl, role: likes.length ? 'button' : undefined, onClick: onLikeCountClick, onFocus: onLikeCountInteraction, onMouseOver: onLikeCountInteraction, "aria-label": likesAttributes.ariaLabel, tabIndex: 0, onKeyDown: (e) => {
                            if (e.key === 'Enter') {
                                e.preventDefault();
                                onLikeCountClick();
                            }
                        }, children: _jsx(Count, { id: likeCountId, "aria-label": t('feed_post_likes', [likeCount], { count: likeCount }), children: likeCount }) }), _jsx(Tooltip, { target: countEl, showDelay: 'none', hideDelay: 'none', describeTarget: false, children: likesAttributes.label || t('feed_post_likes', [likeCount], { count: likeCount }) })] }))] }));
});
export default FeedLikeButton;
//# sourceMappingURL=FeedLikeButton.js.map