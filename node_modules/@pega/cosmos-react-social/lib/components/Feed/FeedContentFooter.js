import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useContext } from 'react';
import styled, { css } from 'styled-components';
import { Button, Count, defaultThemeProp, Flex, Icon, Progress, Text, useI18n, useUID } from '@pega/cosmos-react-core';
import FeedButton from './FeedButton';
import FeedLikeButton from './FeedLikeButton';
import { FeedReplyContext } from './Feed.context';
const StyledFeedContentFooter = styled.div(({ theme }) => {
    return css `
    margin-block-start: ${theme.base.spacing};
    margin-inline-end: calc(2 * ${theme.base.spacing});
  `;
});
StyledFeedContentFooter.defaultProps = defaultThemeProp;
const FeedContentFooter = (props) => {
    const { variant, id, username, liked, likes, likeCount, interactionsEnabled = true, likesLoading, replies = [], replyCount, repliesLoading, onCommentClick, onLikeClick, onLikeCountInteraction, onLoadMoreLikes, onShowMoreReplies, onShowLessReplies, replyInputOpen, setReplyInputOpen } = props;
    const t = useI18n();
    const commentCountId = useUID();
    const { onShowReplyInput } = useContext(FeedReplyContext);
    const numReplies = replyCount || replies.length;
    return (_jsxs(Flex, { as: StyledFeedContentFooter, container: { justify: 'between', alignItems: 'center', wrap: 'wrap', gap: 1 }, children: [interactionsEnabled ? (_jsxs(Flex, { container: { gap: 2 }, children: [_jsxs(Flex, { container: { gap: 0.5, alignItems: 'center' }, children: [_jsx(Button, { variant: 'simple', as: FeedButton, icon: true, compact: true, onClick: () => {
                                    onCommentClick?.({ id, username });
                                    if (variant === 'post') {
                                        if (!replyInputOpen) {
                                            setReplyInputOpen?.(true);
                                        }
                                    }
                                    else {
                                        onShowReplyInput?.();
                                    }
                                }, label: t('feed_comment_label'), "aria-describedby": variant === 'post' && numReplies > 0 ? commentCountId : undefined, children: _jsx(Icon, { name: 'chat' }) }), numReplies > 0 && (_jsx(Count, { "aria-label": t('feed_post_comments', [numReplies], { count: numReplies }), id: commentCountId, children: numReplies }))] }), _jsx(FeedLikeButton, { id: id, onLikeClick: onLikeClick, onLikeCountInteraction: onLikeCountInteraction, onLoadMoreLikes: onLoadMoreLikes, likesLoading: likesLoading, liked: liked, likes: likes, likeCount: likeCount })] })) : (_jsx("div", {})), (onShowLessReplies || onShowMoreReplies) && (_jsxs(Flex, { container: { gap: 0.5 }, children: [replies.length !== numReplies && (_jsxs(_Fragment, { children: [_jsx(Text, { children: t('showing_num_of_num', [replies.length, numReplies]) }), _jsx("span", { children: "\u2022" })] })), onShowMoreReplies && replies.length < numReplies && (_jsx(Button, { variant: 'link', onClick: () => onShowMoreReplies({ id }), children: t('show_more') })), repliesLoading && _jsx(Progress, { placement: 'inline' })] }))] }));
};
export default FeedContentFooter;
//# sourceMappingURL=FeedContentFooter.js.map