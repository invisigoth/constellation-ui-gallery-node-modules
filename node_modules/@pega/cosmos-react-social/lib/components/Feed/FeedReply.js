import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import styled, { css } from 'styled-components';
import { Flex, registerIcon, defaultThemeProp } from '@pega/cosmos-react-core';
import * as chatIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/chat.icon';
import * as thumbsUpSolidIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/thumbs-up-solid.icon';
import * as thumbsUpIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/thumbs-up.icon';
import FeedAttachments from './FeedAttachments';
import FeedContent from './FeedContent';
import FeedContentHeader from './FeedContentHeader';
import FeedContentFooter from './FeedContentFooter';
import FeedEditRegion from './FeedEditRegion';
registerIcon(chatIcon, thumbsUpSolidIcon, thumbsUpIcon);
export const StyledFeedReplyContainer = styled.div ``;
StyledFeedReplyContainer.defaultProps = defaultThemeProp;
const StyledReplyContent = styled.div(({ theme }) => {
    return css `
    margin-inline-start: calc(2 * ${theme.base.spacing});
    border-inline-start: solid 0.0625rem ${theme.base.palette['border-line']};
    padding-inline-start: calc(3 * ${theme.base.spacing});
  `;
});
StyledReplyContent.defaultProps = defaultThemeProp;
const FeedReply = (props) => {
    const { id, avatarSrc, postTimestamp, content, attachments, username, fullname, liked, likes, likeCount, interactionsEnabled, icon, userStatus, maxContentHeight = Infinity, menuItems, onEditSubmit, edited = false, editTimestamp, onMouseEnter, onMouseLeave, onCommentClick, onLikeClick, onLikeCountInteraction, onLoadMoreLikes, likesLoading, onUserClick, ...restProps } = props;
    const variant = 'reply';
    const [editMode, setEditMode] = useState(false);
    const [emptyEditText, setEmptyEditText] = useState(false);
    return (_jsxs(StyledFeedReplyContainer, { onMouseEnter: () => {
            onMouseEnter?.({ id });
        }, onMouseLeave: () => {
            onMouseLeave?.({ id });
        }, ...restProps, children: [_jsx(FeedContentHeader, { ...{
                    variant,
                    id,
                    fullname,
                    username,
                    postTimestamp,
                    content,
                    avatarSrc,
                    icon,
                    userStatus,
                    menuItems,
                    edited,
                    editTimestamp,
                    onEditSubmit,
                    onUserClick,
                    setEditMode
                } }), _jsxs(StyledReplyContent, { children: [_jsxs(Flex, { container: { direction: 'column', pad: [0, editMode ? 0 : 2, 0, 0] }, item: { grow: 1 }, children: [editMode ? (_jsx(FeedEditRegion, { ...{
                                    variant,
                                    id,
                                    content,
                                    setEditMode,
                                    onEditSubmit,
                                    emptyEditText,
                                    setEmptyEditText
                                } })) : (_jsx(FeedContent, { maxContentHeight: maxContentHeight, children: content })), _jsx(FeedAttachments, { variant: variant, attachments: attachments, readOnly: true })] }), _jsx(FeedContentFooter, { ...{
                            variant,
                            id,
                            username,
                            liked,
                            likes,
                            likeCount,
                            interactionsEnabled,
                            likesLoading,
                            onCommentClick,
                            onLikeClick,
                            onLikeCountInteraction,
                            onLoadMoreLikes
                        } })] })] }));
};
export default FeedReply;
//# sourceMappingURL=FeedReply.js.map