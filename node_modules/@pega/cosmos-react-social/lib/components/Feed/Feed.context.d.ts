import { Dispatch, RefObject, SetStateAction } from 'react';
import { InteractionRenderers, MDMap } from '@pega/cosmos-react-rte';
import { AvatarProps, MenuItemProps } from '@pega/cosmos-react-core';
import { BaseDialogProps } from '@pega/cosmos-react-core/lib/components/Dialog/Dialog.types';
export interface FeedContextValue {
    searchTypes?: string[];
    onSearch?: (e: {
        type: 'mention' | 'tag';
        search: string;
        mentionType: string;
    }) => void;
    searchResults?: MenuItemProps[];
    showSearchResults?: boolean;
    setShowSearchResults?: Dispatch<SetStateAction<boolean>>;
    onMentionClick?: (e: {
        id: string;
        text: string;
        type: string;
        target?: BaseDialogProps['target'];
        closeGlimpse?: () => void;
    }) => JSX.Element | undefined;
    onMentionPreview?: (e: {
        id: string;
        text: string;
        type: string;
    }) => void;
    onTagClick?: (tag: string) => void;
    interactionRenderers?: InteractionRenderers[];
    markdownMap?: MDMap;
    userInfo: {
        username: string;
        fullname: string;
        avatarSrc?: string;
        userStatus?: AvatarProps['status'];
        meta?: string[];
        timeZone?: string;
    };
    announce: (announcement: string) => ReturnType<typeof setTimeout>;
    feedRef?: RefObject<HTMLDivElement>;
}
export declare const FeedContext: import("react").Context<FeedContextValue>;
export interface FeedReplyContextValue {
    onShowReplyInput?: () => void;
}
export declare const FeedReplyContext: import("react").Context<FeedReplyContextValue>;
//# sourceMappingURL=Feed.context.d.ts.map