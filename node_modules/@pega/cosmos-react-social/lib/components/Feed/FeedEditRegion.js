import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useContext, useEffect, useRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { Button, defaultThemeProp, Flex, Icon, useI18n, useOuterEvent } from '@pega/cosmos-react-core';
import FeedRichText from './FeedRichText';
import { minInputHeight, StyledActions } from './FeedInputRegion';
import FeedButton from './FeedButton';
import { FeedContext } from './Feed.context';
const StyledInputContainer = styled.div(({ theme }) => {
    return css `
    width: calc(100% - (${theme.base.spacing} + ${theme.base['hit-area']['mouse-min']}));

    @media (pointer: coarse) {
      width: calc(100% - (${theme.base.spacing} + ${theme.base['hit-area']['finger-min']}));
    }
  `;
});
StyledInputContainer.defaultProps = defaultThemeProp;
const FeedEditRegion = (props) => {
    const { variant, id, content, setEditMode, onEditSubmit, emptyEditText, setEmptyEditText } = props;
    const t = useI18n();
    const { setShowSearchResults } = useContext(FeedContext);
    const rteRef = useRef();
    const editTextAreaRef = useRef(null);
    const [contentModified, setContentModified] = useState(false);
    useOuterEvent('mousedown', [editTextAreaRef], () => {
        if (emptyEditText)
            setEditMode(false);
    });
    const handleEdit = () => {
        setShowSearchResults?.(false);
        if (!emptyEditText && contentModified) {
            onEditSubmit?.({
                id,
                value: rteRef.current?.getPlainText() || ''
            });
            setEditMode(false);
        }
    };
    const onKeyDown = (event) => {
        setShowSearchResults?.(true);
        if ((event.metaKey || event.ctrlKey) && event.key === 'Enter')
            handleEdit();
    };
    useEffect(() => {
        if (rteRef.current) {
            rteRef.current?.focus();
        }
    }, [rteRef]);
    const label = t(variant === 'post' ? 'feed_edit_post' : 'feed_edit_comment');
    return (_jsxs(Flex, { container: { gap: 1, alignItems: 'start' }, children: [_jsx(StyledInputContainer, { ref: editTextAreaRef, children: _jsx(FeedRichText, { label: label, onChange: () => {
                        setEmptyEditText(rteRef.current?.getPlainText().trim() === '');
                        setContentModified(rteRef.current?.getPlainText() !== content);
                    }, onKeyDown: onKeyDown, height: { min: minInputHeight }, defaultValue: content, ref: rteRef }) }), _jsxs(Flex, { as: StyledActions, container: { direction: 'column', gap: 0.25 }, children: [_jsx(Button, { variant: 'simple', as: FeedButton, onClick: () => setEditMode(false), icon: true, label: t('cancel'), children: _jsx(Icon, { name: 'times' }) }), _jsx(Button, { as: FeedButton, disabled: emptyEditText || !contentModified, variant: 'simple', onClick: handleEdit, icon: true, label: t('update'), children: _jsx(Icon, { name: 'send' }) })] })] }));
};
export default FeedEditRegion;
//# sourceMappingURL=FeedEditRegion.js.map