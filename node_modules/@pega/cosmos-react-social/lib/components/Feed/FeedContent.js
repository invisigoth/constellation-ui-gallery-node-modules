import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState, useMemo, useRef, useEffect, useContext } from 'react';
import styled from 'styled-components';
import { Button, ExpandCollapse, Flex } from '@pega/cosmos-react-core';
import { RichTextViewer } from '@pega/cosmos-react-rte';
import { StyledEditorContainer } from '@pega/cosmos-react-rte/lib/components/RichTextEditor/RichTextEditor.styles';
import { FeedContext } from './Feed.context';
const StyledContent = styled.div `
  ${StyledEditorContainer} {
    padding: 0;
  }
`;
const FeedContent = forwardRef(function FeedContent({ children, maxContentHeight = Infinity, ...restProps }, ref) {
    const { interactionRenderers, markdownMap } = useContext(FeedContext);
    const [collapsed, setCollapsed] = useState(true);
    const [exceedsMaxHeight, setExceedsMaxHeight] = useState(true);
    const rtvRef = useRef(null);
    useEffect(() => {
        if (!rtvRef.current)
            return;
        const observer = new ResizeObserver(entries => {
            const exceedsHeight = entries.some(({ target, contentRect }) => {
                if (target !== rtvRef.current)
                    return;
                return contentRect.height > maxContentHeight;
            });
            setExceedsMaxHeight(exceedsHeight);
        });
        observer.observe(rtvRef.current);
        return () => {
            observer.disconnect();
        };
    }, [rtvRef.current, maxContentHeight]);
    return useMemo(() => typeof children === 'string' ? (_jsxs(Flex, { as: StyledContent, ref: ref, container: { direction: 'column', gap: 1 }, children: [_jsx(ExpandCollapse, { collapsed: collapsed, min: exceedsMaxHeight ? `${maxContentHeight}px` : 'max-content', ...restProps, children: _jsx(RichTextViewer, { ref: rtvRef, content: children, type: 'markdown', interactionRenderers: interactionRenderers, markdownMap: markdownMap }) }), exceedsMaxHeight && (_jsx(Flex, { container: { justify: 'center' }, children: _jsx(Button, { variant: 'link', onClick: () => setCollapsed(current => !current), children: collapsed ? 'Show more' : 'Show less' }) }))] })) : (children), [
        children,
        collapsed,
        exceedsMaxHeight,
        interactionRenderers,
        markdownMap,
        maxContentHeight,
        ref,
        restProps
    ]);
});
export default FeedContent;
//# sourceMappingURL=FeedContent.js.map