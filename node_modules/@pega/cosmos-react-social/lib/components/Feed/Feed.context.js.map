{"version":3,"file":"Feed.context.js","sourceRoot":"","sources":["../../../src/components/Feed/Feed.context.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAuC,MAAM,OAAO,CAAC;AAmC3E,MAAM,CAAC,MAAM,WAAW,GAAG,aAAa,CAAmB;IACzD,WAAW,EAAE,EAAE;IACf,QAAQ,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;IACxC,QAAQ,EAAE,GAAG,EAAE;QACb,OAAO,CAAC,CAAwD,CAAC;IACnE,CAAC;CACF,CAAC,CAAC;AAMH,MAAM,CAAC,MAAM,gBAAgB,GAAG,aAAa,CAAwB,EAAE,CAAC,CAAC","sourcesContent":["import { createContext, Dispatch, RefObject, SetStateAction } from 'react';\n\nimport { InteractionRenderers, MDMap } from '@pega/cosmos-react-rte';\nimport { AvatarProps, MenuItemProps } from '@pega/cosmos-react-core';\nimport { BaseDialogProps } from '@pega/cosmos-react-core/lib/components/Dialog/Dialog.types';\n\nexport interface FeedContextValue {\n  searchTypes?: string[];\n  onSearch?: (e: { type: 'mention' | 'tag'; search: string; mentionType: string }) => void;\n  searchResults?: MenuItemProps[];\n  showSearchResults?: boolean;\n  setShowSearchResults?: Dispatch<SetStateAction<boolean>>;\n  onMentionClick?: (e: {\n    id: string;\n    text: string;\n    type: string;\n    target?: BaseDialogProps['target'];\n    closeGlimpse?: () => void;\n  }) => JSX.Element | undefined;\n  onMentionPreview?: (e: { id: string; text: string; type: string }) => void;\n  onTagClick?: (tag: string) => void;\n  interactionRenderers?: InteractionRenderers[];\n  markdownMap?: MDMap;\n  userInfo: {\n    username: string;\n    fullname: string;\n    avatarSrc?: string;\n    userStatus?: AvatarProps['status'];\n    meta?: string[];\n    timeZone?: string;\n  };\n  announce: (announcement: string) => ReturnType<typeof setTimeout>;\n  feedRef?: RefObject<HTMLDivElement>;\n}\n\nexport const FeedContext = createContext<FeedContextValue>({\n  searchTypes: [],\n  userInfo: { username: '', fullname: '' },\n  announce: () => {\n    return -1 as unknown as ReturnType<FeedContextValue['announce']>;\n  }\n});\n\nexport interface FeedReplyContextValue {\n  onShowReplyInput?: () => void;\n}\n\nexport const FeedReplyContext = createContext<FeedReplyContextValue>({});\n"]}