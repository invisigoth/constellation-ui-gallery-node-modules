import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useContext, useState } from 'react';
import styled, { css } from 'styled-components';
import { Avatar, Button, defaultThemeProp, Flex, Icon, useElement, useI18n, useOuterEvent } from '@pega/cosmos-react-core';
import { FeedContext } from './Feed.context';
import FeedAttachments from './FeedAttachments';
import FeedButton from './FeedButton';
import FeedRichText from './FeedRichText';
export const minInputHeight = '4rem';
const StyledAvatar = styled(Avatar)(({ theme }) => {
    return css `
    margin-block-start: calc(0.5 * ${theme.base.spacing});
  `;
});
StyledAvatar.defaultProps = defaultThemeProp;
const StyledTextAreaContainer = styled.div(({ theme }) => {
    return css `
    width: 100%;
    overflow-y: hidden;
    padding: 0 ${theme.base.spacing} calc(0.5 * ${theme.base.spacing}) ${theme.base.spacing};
  `;
});
StyledTextAreaContainer.defaultProps = defaultThemeProp;
export const StyledActions = styled.div(({ theme }) => {
    return css `
    margin-block-start: calc(2.5 * ${theme.base.spacing});

    ${FeedButton} + ${FeedButton} {
      margin-inline-start: 0;
    }
  `;
});
StyledActions.defaultProps = defaultThemeProp;
const HiddenFileInput = styled.input `
  display: none;
`;
const FeedInputRegion = (props) => {
    const { variant, id, attachments = [], onFilesAdded, onSubmit, inputRegionEl, rteRef, selectedRecipients } = props;
    const t = useI18n();
    const { setShowSearchResults } = useContext(FeedContext);
    const { avatarSrc, fullname, username, userStatus } = useContext(FeedContext).userInfo;
    const [emptyText, setEmptyText] = useState(true);
    const [attachmentEl, setAttachmentEl] = useElement();
    useOuterEvent('mousedown', [inputRegionEl], () => {
        if (emptyText)
            rteRef.current?.clear();
    });
    const handleSubmit = () => {
        setShowSearchResults?.(false);
        if ((!emptyText || attachments.length > 0) && attachments.every(x => !x.error)) {
            onSubmit({
                id,
                value: rteRef.current?.getPlainText() || '',
                attachments: attachments || [],
                username,
                recipients: variant === 'post' ? selectedRecipients : undefined,
                clear: () => {
                    rteRef.current?.clear();
                }
            });
        }
    };
    const onKeyDown = (event) => {
        setShowSearchResults?.(true);
        if ((event.metaKey || event.ctrlKey) && event.key === 'Enter')
            handleSubmit();
    };
    const inputLabel = t(variant === 'post' ? 'feed_new_post' : 'feed_new_comment');
    const submitLabel = t(variant === 'post' ? 'feed_new_post_submit' : 'feed_new_comment_submit');
    return (_jsxs(_Fragment, { children: [_jsxs(Flex, { container: { alignItems: 'start' }, children: [_jsx(StyledAvatar, { name: fullname, size: variant === 'post' ? 'l' : 'm', imageSrc: avatarSrc, status: userStatus }), _jsx(StyledTextAreaContainer, { children: _jsx(FeedRichText, { label: inputLabel, onChange: () => {
                                setEmptyText(rteRef.current?.getPlainText().trim() === '');
                            }, onKeyDown: onKeyDown, height: { min: minInputHeight }, ref: rteRef }) }), _jsxs(Flex, { as: StyledActions, container: { direction: 'column', gap: 0.25 }, children: [onFilesAdded && (_jsx(Button, { variant: 'simple', as: FeedButton, onClick: () => {
                                    setShowSearchResults?.(false);
                                    attachmentEl?.click();
                                }, icon: true, label: t('feed_attach_files'), children: _jsx(Icon, { name: 'paper-clip' }) })), _jsx(Button, { as: FeedButton, disabled: (emptyText && attachments.length === 0) || attachments.some(x => x.error), variant: 'simple', onClick: handleSubmit, icon: true, label: submitLabel, children: _jsx(Icon, { name: 'send' }) })] })] }), _jsx(HiddenFileInput, { ref: setAttachmentEl, type: 'file', multiple: true, onChange: () => {
                    if (attachmentEl?.files) {
                        onFilesAdded?.(Array.from(attachmentEl?.files));
                    }
                }, 
                // Must trick input to believe there is no value when activated so that the same file may be added consecutively.
                onClick: (event) => {
                    event.target.value = '';
                } }), _jsx(FeedAttachments, { variant: variant, attachments: attachments })] }));
};
export default FeedInputRegion;
//# sourceMappingURL=FeedInputRegion.js.map