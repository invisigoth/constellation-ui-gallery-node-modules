{"version":3,"file":"Feed.types.js","sourceRoot":"","sources":["../../../src/components/Feed/Feed.types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  Dispatch,\n  MouseEvent,\n  MutableRefObject,\n  ReactElement,\n  ReactNode,\n  Ref,\n  SetStateAction\n} from 'react';\n\nimport {\n  AvatarProps,\n  DateTimeDisplayProps,\n  FileUploadItemProps,\n  MenuItemProps,\n  NoChildrenProp\n} from '@pega/cosmos-react-core';\nimport { RichTextEditorProps, RichTextEditorState } from '@pega/cosmos-react-rte';\n\nimport { FeedContextValue } from './Feed.context';\n\nexport interface SubComponentVariant {\n  variant: 'post' | 'reply';\n}\n\nexport interface Filter {\n  /** Sets DOM id for the control and associates label element via 'for' attribute. */\n  id: string;\n  /** Pass a string or a fragment with an Icon and string for the filter label. */\n  label: ReactNode;\n  /**\n   * Disables the filter.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Sets on prop via onFilterChange.\n   * @default false\n   */\n  on?: boolean;\n}\n\nexport interface FeedProps extends NoChildrenProp {\n  /** Title for the feed. */\n  title: string;\n  /** Information related to the user of the Feed. */\n  userInfo: FeedContextValue['userInfo'];\n  /** A set of search types that can be used to determine which data set to conduct a mention search on. */\n  searchTypes?: FeedContextValue['searchTypes'];\n  /** A callback that runs when a decorator search has been run inside of the feed. */\n  onDecoratorSearch?: FeedContextValue['onSearch'];\n  /** Results that will be shown in a Popover for a mention or tag search. */\n  searchResults?: FeedContextValue['searchResults'];\n  /** A callback that is triggered when a mention button is clicked. The callback sends back the id, text, and type of the mention. The callback should return a function component. */\n  onMentionClick?: FeedContextValue['onMentionClick'];\n  /** A callback that is triggered when a mention link is previewed. The callback sends back the id, text, and type of the mention. */\n  onMentionPreview?: FeedContextValue['onMentionPreview'];\n  /** A callback that is triggered when a hashtag is clicked. The callback sends back the test of the tag. */\n  onTagClick?: FeedContextValue['onTagClick'];\n  /** A list of configuration objects used to render custom components within Feed posts and replies based off of a given regex pattern. */\n  interactionRenderers?: FeedContextValue['interactionRenderers'];\n  /** A mapping for various element types to render custom components for within posts. */\n  markdownMap?: FeedContextValue['markdownMap'];\n  /** A set of filters to apply to the Feed. */\n  filters?: Filter[];\n  /** A callback that runs when the filter is toggled. */\n  onFilterChange?: (filterId: string, on: boolean) => void;\n  /** A callback that is triggered when the bottom of the Feed is scrolled into view so that additional posts may be displayed. */\n  onLoadMore?: () => void;\n  /** Indicates if the posts are being currently loading */\n  loadingPosts?: boolean;\n  /** A region to hold the new post component */\n  newPostRegion?: ReactNode;\n  /** A list of FeedPost components */\n  posts?: ReactNode[];\n}\n\nexport type FeedRichTextProps = Pick<\n  RichTextEditorProps,\n  'label' | 'onChange' | 'onFocus' | 'onBlur' | 'height'\n>;\n\nexport type AttachedFiles = FileUploadItemProps & File;\n\nexport interface FeedAttachmentsProps extends SubComponentVariant {\n  attachments?: AttachedFiles[];\n  readOnly?: boolean;\n  ref?: Ref<HTMLUListElement>;\n}\nexport interface FeedCompositionBaseProps {\n  /** A unique ID for the new message. */\n  id: string;\n  /** A set of attachment files. */\n  attachments?: AttachedFiles[];\n  /** A callback containing a list of added files that will run whenever files are added to the message. */\n  onFilesAdded?: (files: AttachedFiles[]) => void;\n  /** Callback that runs when the submit button has been clicked. */\n  onSubmit: (event: {\n    id: string;\n    value: string;\n    attachments: AttachedFiles[];\n    recipients?: RecipientMenuItem[];\n    username: string;\n    clear: () => void;\n  }) => void;\n}\n\nexport interface FeedInputRegionProps extends SubComponentVariant, FeedCompositionBaseProps {\n  inputRegionEl: HTMLDivElement | null;\n  rteRef: MutableRefObject<RichTextEditorState | undefined>;\n  selectedRecipients?: RecipientMenuItem[];\n}\n\nexport interface FeedEditRegionProps\n  extends SubComponentVariant,\n    Pick<FeedMessageBaseProps, 'id' | 'content' | 'onEditSubmit'> {\n  setEditMode: Dispatch<SetStateAction<boolean>>;\n  emptyEditText: boolean;\n  setEmptyEditText: Dispatch<SetStateAction<boolean>>;\n}\n\nexport interface FeedNewPostProps extends FeedCompositionBaseProps {\n  /** If true, the new post input will focus on page load.  */\n  autoFocus?: boolean;\n  /** Array of private recipient options. */\n  recipients?: PostTypeMenuProps['recipients'];\n  /** Handler for new search on private recipient options. */\n  onRecipientSearch?: (newSearch: string) => void;\n}\n\nexport interface FeedReplyInputProps extends FeedCompositionBaseProps {\n  /** Callback that sets returns a shared ref to the RTE component */\n  onSetInputRef?: (event: { ref: MutableRefObject<RichTextEditorState | undefined> }) => void;\n}\n\nexport interface FeedModalListProps {\n  /** The count for the list of items. */\n  count: number;\n  /** The heading for the Modal. */\n  heading: string;\n  /** The list of MenuItems to render in the Modal. */\n  listItems: MenuItemProps[];\n  /** A callback that is triggered when the bottom of the Modal list is scrolled into view so that additional data may be displayed. */\n  onLoadMore?: () => void;\n  /** Indicates if the data is being currently loading */\n  loading?: boolean;\n}\n\nexport type PostType = 'post' | 'private';\n\nexport interface RecipientOption {\n  /** Pretty printed recipient name */\n  primary: string;\n  /** Functional identifier of unique recipient */\n  value: string;\n}\n\nexport interface RecipientMenuItem {\n  id: string;\n  selected?: boolean;\n  primary: RecipientOption['primary'];\n  value: RecipientOption['value'];\n  secondary?: MenuItemProps['secondary'];\n  visual?: MenuItemProps['visual'];\n}\nexport interface PostTypeMenuProps {\n  /** Array of private recipient options */\n  recipients: RecipientOption[];\n  /** Post type update handler */\n  onSetPostType: (postType: PostType) => void;\n  /** Private post recipient list update handler */\n  onSelectedRecipientsUpdate: (recipients: RecipientMenuItem[]) => void;\n  /** Handler for new search on private recipient options */\n  onRecipientSearch: (newSearch: string) => void;\n  reset: boolean;\n  onReset: () => void;\n}\n\nexport interface PostTypeMenuState {\n  postType: PostType;\n  itemsLoading: boolean;\n  showTypeMenu: boolean;\n  showRecipientMenu: boolean;\n  viewingRecipients: boolean;\n  searchValue: string;\n  typeMenuItems: {\n    id: string;\n    primary: string;\n    selected: boolean;\n    value: PostType;\n  }[];\n  recipientMenuItems: RecipientMenuItem[];\n  multiSelectItems: RecipientMenuItem[];\n}\n\nexport interface FeedContentProps {\n  children: ReactElement | string;\n  /**\n   * A maximum height in pixels to display post content within before prompting to expand the post.\n   * @default Infinity\n   */\n  maxContentHeight?: number;\n  ref?: Ref<HTMLDivElement>;\n}\n\nexport interface FeedMessageBaseProps {\n  /** Unique ID for the message. */\n  id: string;\n  /** Display name for the message author. */\n  fullname: string;\n  /** Username for the message author. */\n  username: string;\n  /** A timestamp of when the message was initially submitted. */\n  postTimestamp: DateTimeDisplayProps['value'];\n  /** The message content. */\n  content: ReactElement | string;\n  /** Attachments on the message. */\n  attachments?: AttachedFiles[];\n  /** An image source for the message author's Avatar. */\n  avatarSrc?: string;\n  /** The name of an icon to render within the Avatar. */\n  icon?: string;\n  /** The status of the message author. */\n  userStatus?: AvatarProps['status'];\n  /** Set true if the user has liked the message. */\n  liked?: boolean;\n  /** A set of users that have liked the message. */\n  likes?: MenuItemProps[];\n  /** The total count of likes on the message. */\n  likeCount?: number;\n  /**\n   * If true, the like and comment buttons will be enabled.\n   * @default true\n   */\n  interactionsEnabled?: boolean;\n  /**\n   * A maximum height in pixels to display message content within before prompting to expand the message.\n   * @default Infinity\n   */\n  maxContentHeight?: FeedContentProps['maxContentHeight'];\n  /** A set of menu options for actions on the message. */\n  menuItems?: MenuItemProps[];\n  /** Callback that updates the message after being edited. If undefined, the message will not be editable. */\n  onEditSubmit?: (event: { id: string; value: string }) => void;\n  /**\n   * Flag that indicates if a message has been previously edited.\n   * @default false\n   */\n  edited?: boolean;\n  /** A timestamp of when the message was last edited. This will only display if edited prop is true. */\n  editTimestamp?: DateTimeDisplayProps['value'];\n  /** Callback that runs when the mouse pointer hovers over the message. */\n  onMouseEnter?: (event: { id: string }) => void;\n  /** Callback that runs when the mouse pointer leaves the message. */\n  onMouseLeave?: (event: { id: string }) => void;\n  /** Callback that runs when the author's name or Avatar has been clicked. */\n  onUserClick?: (event: { id: string; username: string }, clickEvent?: MouseEvent) => void;\n  /** Callback that runs when the comment button has been clicked. */\n  onCommentClick: (event: { id: string; username: string }) => void;\n  /** Callback that runs when the like button has been clicked. */\n  onLikeClick: (event: { id: string; user: MenuItemProps }) => void;\n  /** Callback that runs when the like count on a message is hovered, focused, or clicked. */\n  onLikeCountInteraction?: () => void;\n  /** Callback that runs when the bottom of the extended like list Modal is reached, allowing for more likes to be loaded. */\n  onLoadMoreLikes?: () => void;\n  /** A loading indicator for the likes Modal. */\n  likesLoading?: boolean;\n}\n\nexport interface FeedPostProps extends FeedMessageBaseProps {\n  /**\n   * The type of message. If private, then only the designated recipients will be able to view the message.\n   * @default 'public'\n   */\n  postType?: 'public' | 'private';\n  /** The set of recipients assigned to a private message. */\n  recipients?: MenuItemProps[];\n  /** The total number of private recipients. */\n  recipientsCount?: number;\n  /** The context of the message. */\n  postContext?: ReactElement | string;\n  /** Callback that runs when the private recipient icon on a post is hovered, focused, or clicked. */\n  onRecipientInteraction?: () => void;\n  /** Callback that runs when the bottom of the extended private recipient list Modal is reached, allowing for more recipients to be loaded. */\n  onLoadMoreRecipients?: () => void;\n  /** A loading indicator for the recipients Modal. */\n  recipientsLoading?: boolean;\n  /** Props that will be passed into the reply input, see FeedReplyInput for more information. */\n  replyInput: Pick<FeedReplyInputProps, 'onSubmit' | 'onFilesAdded' | 'attachments'>;\n  /** The default visibility for the reply input. */\n  replyInputShown?: boolean;\n  /** An array to of replies for this message. */\n  replies?: ReactElement[];\n  /** A total count of all replies. */\n  replyCount?: number;\n  /** Callback that runs when the user clicks Show more button for the replies. */\n  onShowMoreReplies?: (event: { id: string }) => void;\n  /** Callback that runs when the user clicks Show less button for the replies. */\n  onShowLessReplies?: (event: { id: string }) => void;\n  /** A loading indicator for the replies. */\n  repliesLoading?: boolean;\n}\n\nexport type FeedReplyProps = FeedMessageBaseProps;\n\nexport interface FeedContentHeaderProps extends SubComponentVariant {\n  id: FeedMessageBaseProps['id'];\n  fullname: FeedMessageBaseProps['fullname'];\n  username: FeedMessageBaseProps['username'];\n  postTimestamp: FeedMessageBaseProps['postTimestamp'];\n  content: FeedMessageBaseProps['content'];\n  avatarSrc?: FeedMessageBaseProps['avatarSrc'];\n  icon?: FeedMessageBaseProps['icon'];\n  userStatus?: FeedMessageBaseProps['userStatus'];\n  postType?: FeedPostProps['postType'];\n  postContext?: FeedPostProps['postContext'];\n  recipients?: FeedPostProps['recipients'];\n  recipientsCount?: FeedPostProps['recipientsCount'];\n  menuItems?: FeedMessageBaseProps['menuItems'];\n  edited?: FeedMessageBaseProps['edited'];\n  editTimestamp?: FeedMessageBaseProps['editTimestamp'];\n  recipientsLoading?: FeedPostProps['recipientsLoading'];\n  onEditSubmit?: FeedMessageBaseProps['onEditSubmit'];\n  onLoadMoreRecipients?: FeedPostProps['onLoadMoreRecipients'];\n  onRecipientInteraction?: FeedPostProps['onRecipientInteraction'];\n  onUserClick?: FeedMessageBaseProps['onUserClick'];\n  setEditMode: Dispatch<SetStateAction<boolean>>;\n}\n\nexport interface FeedContentFooterProps extends SubComponentVariant {\n  id: FeedMessageBaseProps['id'];\n  username: FeedMessageBaseProps['username'];\n  liked?: FeedMessageBaseProps['liked'];\n  likes?: FeedMessageBaseProps['likes'];\n  likeCount?: FeedMessageBaseProps['likeCount'];\n  interactionsEnabled?: FeedMessageBaseProps['interactionsEnabled'];\n  onCommentClick: FeedMessageBaseProps['onCommentClick'];\n  onLikeClick: FeedMessageBaseProps['onLikeClick'];\n  onLikeCountInteraction?: FeedMessageBaseProps['onLikeCountInteraction'];\n  onLoadMoreLikes?: FeedMessageBaseProps['onLoadMoreLikes'];\n  likesLoading?: FeedMessageBaseProps['likesLoading'];\n  replies?: FeedPostProps['replies'];\n  replyCount?: FeedPostProps['replyCount'];\n  onShowMoreReplies?: FeedPostProps['onShowMoreReplies'];\n  onShowLessReplies?: FeedPostProps['onShowMoreReplies'];\n  repliesLoading?: FeedPostProps['repliesLoading'];\n  replyInputOpen?: boolean;\n  setReplyInputOpen?: Dispatch<SetStateAction<boolean>>;\n}\n"]}