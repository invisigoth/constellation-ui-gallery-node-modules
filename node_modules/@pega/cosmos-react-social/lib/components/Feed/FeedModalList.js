import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef, useEffect, useState } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp, Flex, Progress, Count, Modal, SummaryListItems, useItemIntersection, usePrevious, useI18n, MetaList } from '@pega/cosmos-react-core';
import FeedAnnouncer from './FeedAnnouncer';
const StyledLoadMore = styled.div(({ theme }) => {
    return css `
    margin-top: ${theme.base.spacing};
    min-height: 2rem;
    min-width: 2rem;
  `;
});
StyledLoadMore.defaultProps = defaultThemeProp;
const FeedModalList = ({ loading, count, heading, listItems, onLoadMore }) => {
    const t = useI18n();
    const listRef = useRef(null);
    const prevItems = usePrevious(listItems);
    const [announcementText, setAnnouncementText] = useState('');
    useEffect(() => {
        if (loading)
            setAnnouncementText(t('loading'));
    }, [loading]);
    useEffect(() => {
        if (prevItems) {
            const difference = listItems.length - prevItems.length;
            if (difference > 0)
                setAnnouncementText(t('new_item_added', [difference], { count: difference }));
        }
    }, [listItems]);
    useItemIntersection(listRef, listItems.length - 1, () => {
        onLoadMore?.();
    }, ':scope li');
    return (_jsxs(Modal, { heading: _jsxs(Flex, { container: { gap: 1 }, children: [heading, _jsx(Flex, { item: { alignSelf: 'center' }, as: Count, children: count })] }), ref: listRef, children: [_jsx(FeedAnnouncer, { children: announcementText }), _jsx(SummaryListItems, { items: listItems.map(item => ({
                    ...item,
                    secondary: item.secondary && _jsx(MetaList, { items: item.secondary })
                })) }), loading && (_jsx(Flex, { container: { justify: 'center' }, as: StyledLoadMore, children: _jsx(Progress, { placement: 'inline' }) }))] }));
};
export default FeedModalList;
//# sourceMappingURL=FeedModalList.js.map