import { Dispatch, MouseEvent, MutableRefObject, ReactElement, ReactNode, Ref, SetStateAction } from 'react';
import { AvatarProps, DateTimeDisplayProps, FileUploadItemProps, MenuItemProps, NoChildrenProp } from '@pega/cosmos-react-core';
import { RichTextEditorProps, RichTextEditorState } from '@pega/cosmos-react-rte';
import { FeedContextValue } from './Feed.context';
export interface SubComponentVariant {
    variant: 'post' | 'reply';
}
export interface Filter {
    /** Sets DOM id for the control and associates label element via 'for' attribute. */
    id: string;
    /** Pass a string or a fragment with an Icon and string for the filter label. */
    label: ReactNode;
    /**
     * Disables the filter.
     * @default false
     */
    disabled?: boolean;
    /**
     * Sets on prop via onFilterChange.
     * @default false
     */
    on?: boolean;
}
export interface FeedProps extends NoChildrenProp {
    /** Title for the feed. */
    title: string;
    /** Information related to the user of the Feed. */
    userInfo: FeedContextValue['userInfo'];
    /** A set of search types that can be used to determine which data set to conduct a mention search on. */
    searchTypes?: FeedContextValue['searchTypes'];
    /** A callback that runs when a decorator search has been run inside of the feed. */
    onDecoratorSearch?: FeedContextValue['onSearch'];
    /** Results that will be shown in a Popover for a mention or tag search. */
    searchResults?: FeedContextValue['searchResults'];
    /** A callback that is triggered when a mention button is clicked. The callback sends back the id, text, and type of the mention. The callback should return a function component. */
    onMentionClick?: FeedContextValue['onMentionClick'];
    /** A callback that is triggered when a mention link is previewed. The callback sends back the id, text, and type of the mention. */
    onMentionPreview?: FeedContextValue['onMentionPreview'];
    /** A callback that is triggered when a hashtag is clicked. The callback sends back the test of the tag. */
    onTagClick?: FeedContextValue['onTagClick'];
    /** A list of configuration objects used to render custom components within Feed posts and replies based off of a given regex pattern. */
    interactionRenderers?: FeedContextValue['interactionRenderers'];
    /** A mapping for various element types to render custom components for within posts. */
    markdownMap?: FeedContextValue['markdownMap'];
    /** A set of filters to apply to the Feed. */
    filters?: Filter[];
    /** A callback that runs when the filter is toggled. */
    onFilterChange?: (filterId: string, on: boolean) => void;
    /** A callback that is triggered when the bottom of the Feed is scrolled into view so that additional posts may be displayed. */
    onLoadMore?: () => void;
    /** Indicates if the posts are being currently loading */
    loadingPosts?: boolean;
    /** A region to hold the new post component */
    newPostRegion?: ReactNode;
    /** A list of FeedPost components */
    posts?: ReactNode[];
}
export type FeedRichTextProps = Pick<RichTextEditorProps, 'label' | 'onChange' | 'onFocus' | 'onBlur' | 'height'>;
export type AttachedFiles = FileUploadItemProps & File;
export interface FeedAttachmentsProps extends SubComponentVariant {
    attachments?: AttachedFiles[];
    readOnly?: boolean;
    ref?: Ref<HTMLUListElement>;
}
export interface FeedCompositionBaseProps {
    /** A unique ID for the new message. */
    id: string;
    /** A set of attachment files. */
    attachments?: AttachedFiles[];
    /** A callback containing a list of added files that will run whenever files are added to the message. */
    onFilesAdded?: (files: AttachedFiles[]) => void;
    /** Callback that runs when the submit button has been clicked. */
    onSubmit: (event: {
        id: string;
        value: string;
        attachments: AttachedFiles[];
        recipients?: RecipientMenuItem[];
        username: string;
        clear: () => void;
    }) => void;
}
export interface FeedInputRegionProps extends SubComponentVariant, FeedCompositionBaseProps {
    inputRegionEl: HTMLDivElement | null;
    rteRef: MutableRefObject<RichTextEditorState | undefined>;
    selectedRecipients?: RecipientMenuItem[];
}
export interface FeedEditRegionProps extends SubComponentVariant, Pick<FeedMessageBaseProps, 'id' | 'content' | 'onEditSubmit'> {
    setEditMode: Dispatch<SetStateAction<boolean>>;
    emptyEditText: boolean;
    setEmptyEditText: Dispatch<SetStateAction<boolean>>;
}
export interface FeedNewPostProps extends FeedCompositionBaseProps {
    /** If true, the new post input will focus on page load.  */
    autoFocus?: boolean;
    /** Array of private recipient options. */
    recipients?: PostTypeMenuProps['recipients'];
    /** Handler for new search on private recipient options. */
    onRecipientSearch?: (newSearch: string) => void;
}
export interface FeedReplyInputProps extends FeedCompositionBaseProps {
    /** Callback that sets returns a shared ref to the RTE component */
    onSetInputRef?: (event: {
        ref: MutableRefObject<RichTextEditorState | undefined>;
    }) => void;
}
export interface FeedModalListProps {
    /** The count for the list of items. */
    count: number;
    /** The heading for the Modal. */
    heading: string;
    /** The list of MenuItems to render in the Modal. */
    listItems: MenuItemProps[];
    /** A callback that is triggered when the bottom of the Modal list is scrolled into view so that additional data may be displayed. */
    onLoadMore?: () => void;
    /** Indicates if the data is being currently loading */
    loading?: boolean;
}
export type PostType = 'post' | 'private';
export interface RecipientOption {
    /** Pretty printed recipient name */
    primary: string;
    /** Functional identifier of unique recipient */
    value: string;
}
export interface RecipientMenuItem {
    id: string;
    selected?: boolean;
    primary: RecipientOption['primary'];
    value: RecipientOption['value'];
    secondary?: MenuItemProps['secondary'];
    visual?: MenuItemProps['visual'];
}
export interface PostTypeMenuProps {
    /** Array of private recipient options */
    recipients: RecipientOption[];
    /** Post type update handler */
    onSetPostType: (postType: PostType) => void;
    /** Private post recipient list update handler */
    onSelectedRecipientsUpdate: (recipients: RecipientMenuItem[]) => void;
    /** Handler for new search on private recipient options */
    onRecipientSearch: (newSearch: string) => void;
    reset: boolean;
    onReset: () => void;
}
export interface PostTypeMenuState {
    postType: PostType;
    itemsLoading: boolean;
    showTypeMenu: boolean;
    showRecipientMenu: boolean;
    viewingRecipients: boolean;
    searchValue: string;
    typeMenuItems: {
        id: string;
        primary: string;
        selected: boolean;
        value: PostType;
    }[];
    recipientMenuItems: RecipientMenuItem[];
    multiSelectItems: RecipientMenuItem[];
}
export interface FeedContentProps {
    children: ReactElement | string;
    /**
     * A maximum height in pixels to display post content within before prompting to expand the post.
     * @default Infinity
     */
    maxContentHeight?: number;
    ref?: Ref<HTMLDivElement>;
}
export interface FeedMessageBaseProps {
    /** Unique ID for the message. */
    id: string;
    /** Display name for the message author. */
    fullname: string;
    /** Username for the message author. */
    username: string;
    /** A timestamp of when the message was initially submitted. */
    postTimestamp: DateTimeDisplayProps['value'];
    /** The message content. */
    content: ReactElement | string;
    /** Attachments on the message. */
    attachments?: AttachedFiles[];
    /** An image source for the message author's Avatar. */
    avatarSrc?: string;
    /** The name of an icon to render within the Avatar. */
    icon?: string;
    /** The status of the message author. */
    userStatus?: AvatarProps['status'];
    /** Set true if the user has liked the message. */
    liked?: boolean;
    /** A set of users that have liked the message. */
    likes?: MenuItemProps[];
    /** The total count of likes on the message. */
    likeCount?: number;
    /**
     * If true, the like and comment buttons will be enabled.
     * @default true
     */
    interactionsEnabled?: boolean;
    /**
     * A maximum height in pixels to display message content within before prompting to expand the message.
     * @default Infinity
     */
    maxContentHeight?: FeedContentProps['maxContentHeight'];
    /** A set of menu options for actions on the message. */
    menuItems?: MenuItemProps[];
    /** Callback that updates the message after being edited. If undefined, the message will not be editable. */
    onEditSubmit?: (event: {
        id: string;
        value: string;
    }) => void;
    /**
     * Flag that indicates if a message has been previously edited.
     * @default false
     */
    edited?: boolean;
    /** A timestamp of when the message was last edited. This will only display if edited prop is true. */
    editTimestamp?: DateTimeDisplayProps['value'];
    /** Callback that runs when the mouse pointer hovers over the message. */
    onMouseEnter?: (event: {
        id: string;
    }) => void;
    /** Callback that runs when the mouse pointer leaves the message. */
    onMouseLeave?: (event: {
        id: string;
    }) => void;
    /** Callback that runs when the author's name or Avatar has been clicked. */
    onUserClick?: (event: {
        id: string;
        username: string;
    }, clickEvent?: MouseEvent) => void;
    /** Callback that runs when the comment button has been clicked. */
    onCommentClick: (event: {
        id: string;
        username: string;
    }) => void;
    /** Callback that runs when the like button has been clicked. */
    onLikeClick: (event: {
        id: string;
        user: MenuItemProps;
    }) => void;
    /** Callback that runs when the like count on a message is hovered, focused, or clicked. */
    onLikeCountInteraction?: () => void;
    /** Callback that runs when the bottom of the extended like list Modal is reached, allowing for more likes to be loaded. */
    onLoadMoreLikes?: () => void;
    /** A loading indicator for the likes Modal. */
    likesLoading?: boolean;
}
export interface FeedPostProps extends FeedMessageBaseProps {
    /**
     * The type of message. If private, then only the designated recipients will be able to view the message.
     * @default 'public'
     */
    postType?: 'public' | 'private';
    /** The set of recipients assigned to a private message. */
    recipients?: MenuItemProps[];
    /** The total number of private recipients. */
    recipientsCount?: number;
    /** The context of the message. */
    postContext?: ReactElement | string;
    /** Callback that runs when the private recipient icon on a post is hovered, focused, or clicked. */
    onRecipientInteraction?: () => void;
    /** Callback that runs when the bottom of the extended private recipient list Modal is reached, allowing for more recipients to be loaded. */
    onLoadMoreRecipients?: () => void;
    /** A loading indicator for the recipients Modal. */
    recipientsLoading?: boolean;
    /** Props that will be passed into the reply input, see FeedReplyInput for more information. */
    replyInput: Pick<FeedReplyInputProps, 'onSubmit' | 'onFilesAdded' | 'attachments'>;
    /** The default visibility for the reply input. */
    replyInputShown?: boolean;
    /** An array to of replies for this message. */
    replies?: ReactElement[];
    /** A total count of all replies. */
    replyCount?: number;
    /** Callback that runs when the user clicks Show more button for the replies. */
    onShowMoreReplies?: (event: {
        id: string;
    }) => void;
    /** Callback that runs when the user clicks Show less button for the replies. */
    onShowLessReplies?: (event: {
        id: string;
    }) => void;
    /** A loading indicator for the replies. */
    repliesLoading?: boolean;
}
export type FeedReplyProps = FeedMessageBaseProps;
export interface FeedContentHeaderProps extends SubComponentVariant {
    id: FeedMessageBaseProps['id'];
    fullname: FeedMessageBaseProps['fullname'];
    username: FeedMessageBaseProps['username'];
    postTimestamp: FeedMessageBaseProps['postTimestamp'];
    content: FeedMessageBaseProps['content'];
    avatarSrc?: FeedMessageBaseProps['avatarSrc'];
    icon?: FeedMessageBaseProps['icon'];
    userStatus?: FeedMessageBaseProps['userStatus'];
    postType?: FeedPostProps['postType'];
    postContext?: FeedPostProps['postContext'];
    recipients?: FeedPostProps['recipients'];
    recipientsCount?: FeedPostProps['recipientsCount'];
    menuItems?: FeedMessageBaseProps['menuItems'];
    edited?: FeedMessageBaseProps['edited'];
    editTimestamp?: FeedMessageBaseProps['editTimestamp'];
    recipientsLoading?: FeedPostProps['recipientsLoading'];
    onEditSubmit?: FeedMessageBaseProps['onEditSubmit'];
    onLoadMoreRecipients?: FeedPostProps['onLoadMoreRecipients'];
    onRecipientInteraction?: FeedPostProps['onRecipientInteraction'];
    onUserClick?: FeedMessageBaseProps['onUserClick'];
    setEditMode: Dispatch<SetStateAction<boolean>>;
}
export interface FeedContentFooterProps extends SubComponentVariant {
    id: FeedMessageBaseProps['id'];
    username: FeedMessageBaseProps['username'];
    liked?: FeedMessageBaseProps['liked'];
    likes?: FeedMessageBaseProps['likes'];
    likeCount?: FeedMessageBaseProps['likeCount'];
    interactionsEnabled?: FeedMessageBaseProps['interactionsEnabled'];
    onCommentClick: FeedMessageBaseProps['onCommentClick'];
    onLikeClick: FeedMessageBaseProps['onLikeClick'];
    onLikeCountInteraction?: FeedMessageBaseProps['onLikeCountInteraction'];
    onLoadMoreLikes?: FeedMessageBaseProps['onLoadMoreLikes'];
    likesLoading?: FeedMessageBaseProps['likesLoading'];
    replies?: FeedPostProps['replies'];
    replyCount?: FeedPostProps['replyCount'];
    onShowMoreReplies?: FeedPostProps['onShowMoreReplies'];
    onShowLessReplies?: FeedPostProps['onShowMoreReplies'];
    repliesLoading?: FeedPostProps['repliesLoading'];
    replyInputOpen?: boolean;
    setReplyInputOpen?: Dispatch<SetStateAction<boolean>>;
}
//# sourceMappingURL=Feed.types.d.ts.map