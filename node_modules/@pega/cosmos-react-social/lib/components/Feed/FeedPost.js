import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect, useRef, useContext, useMemo } from 'react';
import styled, { css } from 'styled-components';
import { Button, Card, CardContent, Flex, registerIcon, defaultThemeProp, useI18n, Progress, usePrevious } from '@pega/cosmos-react-core';
import * as arrowMicroDownIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/arrow-micro-down.icon';
import * as caretLeftIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/caret-left.icon';
import FeedAttachments from './FeedAttachments';
import FeedContent from './FeedContent';
import FeedReplyInput, { StyledReplyInputContainer } from './FeedReplyInput';
import { FeedContext, FeedReplyContext } from './Feed.context';
import FeedContentHeader from './FeedContentHeader';
import FeedContentFooter from './FeedContentFooter';
import FeedEditRegion from './FeedEditRegion';
import { StyledFeedReplyContainer } from './FeedReply';
registerIcon(arrowMicroDownIcon, caretLeftIcon);
export const StyledFeedPost = styled(Card)(({ theme }) => css `
    margin-block-start: calc(2 * ${theme.base.spacing});
  `);
StyledFeedPost.defaultProps = defaultThemeProp;
const StyledPostContent = styled.div(({ showLines, theme }) => {
    return css `
    padding-inline-start: calc(6 * ${theme.base.spacing});

    ${showLines &&
        css `
      margin-inline-start: calc(2.5 * ${theme.base.spacing});
      border-inline-start: solid 0.0625rem ${theme.base.palette['border-line']};
      padding-inline-start: calc(3.5 * ${theme.base.spacing});
    `}
  `;
});
StyledPostContent.defaultProps = defaultThemeProp;
export const StyledReplies = styled.div(({ theme }) => css `
    margin-inline-start: calc(-1.75 * ${theme.base.spacing});

    ${StyledFeedReplyContainer}, ${StyledReplyInputContainer} {
      padding-block-start: ${theme.base.spacing};
    }
  `);
StyledReplies.defaultProps = defaultThemeProp;
const FeedPost = (props) => {
    const { id, avatarSrc, fullname, username, postTimestamp, content, postType = 'public', recipients, recipientsCount, attachments, liked, icon, postContext, userStatus, likes, likeCount, interactionsEnabled, maxContentHeight = Infinity, onMouseEnter, onMouseLeave, onCommentClick, onLikeClick, onLikeCountInteraction, likesLoading, onLoadMoreLikes, onRecipientInteraction, recipientsLoading, onLoadMoreRecipients, onUserClick, onShowMoreClick, newReplyField, menuItems, onEditSubmit, edited = false, editTimestamp, replies = [], replyInput, replyInputShown, replyCount, repliesLoading, onShowLessReplies, onShowMoreReplies, ...restProps } = props;
    const { announce } = useContext(FeedContext);
    const variant = 'post';
    const t = useI18n();
    const [editMode, setEditMode] = useState(false);
    const [emptyEditText, setEmptyEditText] = useState(false);
    const [replyInputOpen, setReplyInputOpen] = useState(false);
    const [replyInputRef, setReplyInputRef] = useState(null);
    const prevReplies = usePrevious(replies);
    const suppressNextAnnouncement = useRef(false);
    useEffect(() => {
        if ((replyInputOpen || replyInputShown) && replyInputRef) {
            replyInputRef.current?.focus();
        }
    }, [replyInputOpen, replyInputShown, replyInputRef]);
    const replyCtxValue = useMemo(() => ({ onShowReplyInput: () => setReplyInputOpen(true) }), []);
    useEffect(() => {
        if (prevReplies) {
            const difference = prevReplies.length - replies.length;
            if (difference > 0 && !suppressNextAnnouncement.current) {
                const timeoutId = announce(t('feed_comment_removed'));
                return () => clearTimeout(timeoutId);
            }
            suppressNextAnnouncement.current = false;
        }
    }, [replies]);
    const hasReplies = !!replies?.length;
    return (_jsx(FeedReplyContext.Provider, { value: replyCtxValue, children: _jsx(StyledFeedPost, { ...restProps, onMouseEnter: () => {
                onMouseEnter?.({ id });
            }, onMouseLeave: () => {
                onMouseLeave?.({ id });
            }, children: _jsxs(CardContent, { children: [_jsx(FeedContentHeader, { ...{
                            variant,
                            id,
                            fullname,
                            username,
                            postTimestamp,
                            content,
                            avatarSrc,
                            icon,
                            userStatus,
                            postType,
                            postContext,
                            recipients,
                            recipientsCount,
                            menuItems,
                            edited,
                            editTimestamp,
                            recipientsLoading,
                            onEditSubmit,
                            onLoadMoreRecipients,
                            onRecipientInteraction,
                            onUserClick,
                            setEditMode
                        } }), _jsxs(StyledPostContent, { showLines: hasReplies || replyInputOpen, children: [_jsxs(Flex, { container: { direction: 'column', pad: [0, editMode ? 0 : 2, 0, 0] }, item: { grow: 1 }, children: [editMode ? (_jsx(FeedEditRegion, { ...{
                                            variant,
                                            id,
                                            content,
                                            setEditMode,
                                            onEditSubmit,
                                            emptyEditText,
                                            setEmptyEditText
                                        } })) : (_jsx(FeedContent, { maxContentHeight: maxContentHeight, children: content })), _jsx(FeedAttachments, { variant: variant, attachments: attachments, readOnly: true })] }), _jsx(FeedContentFooter, { ...{
                                    variant,
                                    id,
                                    username,
                                    liked,
                                    likes,
                                    likeCount,
                                    interactionsEnabled,
                                    likesLoading,
                                    replies,
                                    replyCount,
                                    repliesLoading,
                                    onCommentClick,
                                    onLikeClick,
                                    onLikeCountInteraction,
                                    onLoadMoreLikes,
                                    onShowMoreReplies,
                                    onShowLessReplies,
                                    replyInputOpen,
                                    setReplyInputOpen
                                } }), _jsxs(StyledReplies, { children: [hasReplies && replies, replyInputShown ||
                                        (replyInputOpen && (_jsx(FeedReplyInput, { onSetInputRef: ({ ref }) => {
                                                setReplyInputRef(ref);
                                            }, id: id, attachments: replyInput.attachments, onFilesAdded: replyInput.onFilesAdded, onSubmit: e => {
                                                setReplyInputOpen(false);
                                                replyInput.onSubmit(e);
                                            } })))] }), onShowLessReplies && !!replies.length && (_jsxs(Flex, { container: { justify: 'center', pad: [0, 0, 1], gap: 1 }, children: [_jsx(Button, { variant: 'link', onClick: () => {
                                            onShowLessReplies({ id });
                                            suppressNextAnnouncement.current = true;
                                        }, children: t('show_less') }), repliesLoading && _jsx(Progress, { placement: 'inline' })] }))] })] }) }) }));
};
export default FeedPost;
//# sourceMappingURL=FeedPost.js.map