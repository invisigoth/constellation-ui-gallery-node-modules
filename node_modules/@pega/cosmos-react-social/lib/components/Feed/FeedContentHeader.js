import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useContext, useEffect, useRef } from 'react';
import styled, { css } from 'styled-components';
import { Avatar, Button, DateTimeDisplay, defaultThemeProp, Flex, Icon, MenuButton, MetaList, StyledSecondary, SummaryItem, Text, Tooltip, useConfiguration, useElement, useI18n, useModalManager } from '@pega/cosmos-react-core';
import BareButton from '@pega/cosmos-react-core/lib/components/Button/BareButton';
import { parseToDate } from '@pega/cosmos-react-core/lib/components/DateTime/Input/utils';
import { formatDateTime } from '@pega/cosmos-react-core/lib/components/DateTime/utils';
import { formatListToLocaleString } from '@pega/cosmos-react-core/lib/utils';
import { FeedContext } from './Feed.context';
import FeedModalList from './FeedModalList';
import FeedButton from './FeedButton';
const StyledFeedContentHeader = styled.div(({ theme }) => {
    return css `
    margin-block-end: ${theme.base.spacing};
    column-gap: ${theme.base.spacing};

    ${StyledSecondary} {
      ${FeedButton} {
        /* Negative margin needed to align the icon with the author name on the line above. */
        margin-inline-start: calc(-0.75 * ${theme.base.spacing});
      }
    }
  `;
});
StyledFeedContentHeader.defaultProps = defaultThemeProp;
const FeedContentHeader = (props) => {
    const { variant, id, fullname, username, postTimestamp, content, avatarSrc, icon, userStatus, postType, postContext, recipients = [], recipientsCount = 0, menuItems, edited, editTimestamp, recipientsLoading, onEditSubmit, onLoadMoreRecipients, onRecipientInteraction, onUserClick, setEditMode } = props;
    const { userInfo: loggedInUser } = useContext(FeedContext);
    const t = useI18n();
    const { locale } = useConfiguration();
    const { create } = useModalManager();
    const recipientsModalRef = useRef();
    const [postTimestampEl, setPostTimestampEl] = useElement();
    const [editTimestampEl, setEditTimestampEl] = useElement();
    const timestamps = [
        _jsxs(_Fragment, { children: [_jsx(DateTimeDisplay, { ref: setPostTimestampEl, value: postTimestamp, variant: 'relative' }), postTimestamp && (_jsx(Tooltip, { target: postTimestampEl, children: formatDateTime(parseToDate(postTimestamp), {
                        t,
                        locale,
                        format: 'short',
                        variant: 'datetime',
                        timeZone: loggedInUser.timeZone
                    }) }))] })
    ];
    if (edited) {
        timestamps.push(_jsxs(_Fragment, { children: [_jsx(Text, { ref: setEditTimestampEl, variant: 'secondary', children: t('edited', [_jsx(DateTimeDisplay, { value: editTimestamp, variant: 'relative' })]) }), editTimestamp && (_jsx(Tooltip, { target: editTimestampEl, children: formatDateTime(parseToDate(editTimestamp), {
                        t,
                        locale,
                        format: 'short',
                        variant: 'datetime',
                        timeZone: loggedInUser.timeZone
                    }) }))] }));
    }
    const userVisual = (_jsx(Avatar, { name: fullname, size: variant === 'post' ? 'l' : 'm', imageSrc: avatarSrc, icon: icon, status: userStatus }));
    const recipientsList = recipients.map(x => x.primary);
    useEffect(() => {
        if (recipients.length) {
            recipientsModalRef.current?.update({
                count: recipientsCount,
                heading: t('feed_recipients'),
                listItems: recipients,
                onLoadMore: onLoadMoreRecipients,
                loading: recipientsLoading
            });
        }
    }, [recipientsCount, recipients, onLoadMoreRecipients, recipientsLoading]);
    return (_jsx(SummaryItem, { as: StyledFeedContentHeader, visual: onUserClick ? (_jsx(BareButton, { onClick: (event) => {
                onUserClick?.({ id, username }, event);
            }, children: userVisual })) : (userVisual), primary: _jsxs("div", { children: [onUserClick ? (_jsx(Button, { variant: 'text', onClick: (event) => {
                        onUserClick?.({ id, username }, event);
                    }, children: _jsx(Text, { variant: 'h3', children: fullname }) })) : (_jsx(Text, { variant: 'h3', children: fullname })), postContext && _jsxs(Text, { variant: 'primary', children: [" ", t('feed_context', [postContext])] })] }), secondary: _jsxs(Flex, { container: { gap: 0.5, alignItems: 'center' }, children: [postType === 'private' && (_jsx(Button, { variant: 'simple', as: FeedButton, icon: true, compact: true, onClick: recipients.length
                        ? () => {
                            if (recipientsCount > 2) {
                                recipientsModalRef.current = create(FeedModalList, {
                                    count: recipientsCount,
                                    heading: t('feed_recipients'),
                                    listItems: recipients,
                                    onLoadMore: onLoadMoreRecipients,
                                    loading: recipientsLoading
                                });
                            }
                        }
                        : onRecipientInteraction, onFocus: onRecipientInteraction, onMouseOver: onRecipientInteraction, "aria-label": `${t('feed_private_post')} ${t('feed_recipients')} ${formatListToLocaleString(recipientsList.slice(0, 2), t, locale, {
                        count: recipientsCount
                    })}`, label: `${t('feed_private_post')}:\n${formatListToLocaleString(recipientsList.slice(0, 2), t, locale, {
                        count: recipientsCount,
                        separator: '\n'
                    }) || t('feed_private_post')}`, children: _jsx(Icon, { name: 'lock-closed-solid' }) })), _jsx(MetaList, { items: timestamps })] }), actions: menuItems ? (_jsx(MenuButton, { text: t('feed_post_actions_menu'), menu: {
                items: onEditSubmit && typeof content === 'string' && username === loggedInUser.username
                    ? [
                        {
                            primary: t('edit'),
                            id: 'edit',
                            onClick: () => setEditMode(true)
                        },
                        ...menuItems
                    ]
                    : menuItems
            }, icon: 'more', iconOnly: true, variant: 'simple' })) : undefined }));
};
export default FeedContentHeader;
//# sourceMappingURL=FeedContentHeader.js.map