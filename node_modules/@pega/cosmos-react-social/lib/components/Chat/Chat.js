import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { Flex, Banner, defaultThemeProp } from '@pega/cosmos-react-core';
import { StyledBanner } from '@pega/cosmos-react-core/lib/components/Banner/Banner';
import ChatBody from './ChatBody';
import ChatComposer from './ChatComposer';
import ChatHeader from './ChatHeader';
import SuggestedReplyPicker from './SuggestedReplyPicker';
const StyledUtilityContainer = styled.div ``;
const StyledUtilityMerger = styled.div ``;
const StyledUtilityContent = styled.div ``;
const StyledChatContainer = styled.section(props => {
    const { theme: { base: { spacing, shadow: { high: shadowHigh }, palette: { 'primary-background': primaryBackground, 'secondary-background': secondaryBackground }, 'border-radius': borderRadius } } } = props;
    return css `
    height: 100%;
    background: ${primaryBackground};
    width: 100%;
    border-radius: ${borderRadius};
    ${StyledUtilityMerger} {
      min-height: 15rem;
      position: relative;
      height: 100%;
      overflow-y: hidden;
    }
    ${StyledUtilityContainer} {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 2;
      max-height: 60%;
      width: 100%;
      background-color: ${secondaryBackground};
      > ${StyledUtilityContent} {
        padding: ${spacing} 0;
        box-shadow: ${shadowHigh};
        height: auto;
        width: 100%;
        overflow-y: auto;
        background: linear-gradient(${secondaryBackground} 10%, rgba(255, 255, 255, 0)),
          linear-gradient(rgba(255, 255, 255, 0), ${secondaryBackground} 10%) 0 100%,
          radial-gradient(farthest-side at 50% 0, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)),
          radial-gradient(farthest-side at 50% 100%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)) 0 100%;
        background-repeat: no-repeat;
        background-size: 100% 1rem, 100% 1rem, 100% 0.25rem, 100% 0.25rem;
        background-attachment: local, local, scroll, scroll;
      }
    }
    ${StyledBanner} {
      padding: calc(2 * ${spacing});
      margin-bottom: 0;
      flex-shrink: 0;
    }
  `;
});
StyledChatContainer.defaultProps = defaultThemeProp;
const Chat = forwardRef(function Chat(props, ref) {
    const { header, body, composer, banner, suggestedReplyPicker, ...restProps } = props;
    return (_jsxs(Flex, { ref: ref, as: StyledChatContainer, container: {
            direction: 'column'
        }, ...restProps, children: [_jsx(ChatHeader, { ...header }), banner && _jsx(Banner, { variant: banner.variant, messages: banner.messages }), _jsx(ChatBody, { ...body }), suggestedReplyPicker && _jsx(SuggestedReplyPicker, { ...suggestedReplyPicker }), _jsx(ChatComposer, { ...composer })] }));
});
export default Chat;
//# sourceMappingURL=Chat.js.map