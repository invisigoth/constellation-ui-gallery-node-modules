import styled, { css } from 'styled-components';
import { readableColor, rgba, transparentize } from 'polished';
import { defaultThemeProp, tryCatch, Icon, StyledIcon, StyledText, calculateFontSize } from '@pega/cosmos-react-core';
import BareButton from '@pega/cosmos-react-core/lib/components/Button/BareButton';
export const StyledMessageBubbleContent = styled.div ``;
export const StyledMediaList = styled.ul ``;
export const StyledMediaListItem = styled.li ``;
export const StyledSummaryItem = styled.div ``;
export const StyledMediaThumbNail = styled.img ``;
export const StyledMediaLink = styled.a ``;
export const StyledMediaButton = styled(BareButton) ``;
export const StyledMessageMain = styled.div ``;
export const StyledMessageBubble = styled.div ``;
export const StyledMetaInfoContainer = styled.div ``;
export const StyledMetaInfo = styled.span ``;
export const StyledStatusInfo = styled.span ``;
export const StyledTypingIndicator = styled.div ``;
export const StyledMessageHeader = styled.header ``;
export const StyledMessageHeaderContent = styled.div ``;
export const StyledMessageHeaderMeta = styled.div ``;
export const StyledHeadsetIconBackground = styled.div ``;
export const StyledHeadset = styled.div(({ theme }) => {
    return css `
    position: relative;

    ${StyledHeadsetIconBackground} {
      position: relative;
      inset-block-start: calc(-5.25 * ${theme.base.spacing});
      inset-inline-start: calc(2 * ${theme.base.spacing});
      height: 1.375rem;
      width: 1.375rem;
      background: ${theme.base.palette['primary-background']};
      border-radius: calc(
        (${theme.base['border-radius']}) * (${theme.components.button['border-radius']})
      );

      ${StyledIcon} {
        position: absolute;
        width: 2.875rem;
        height: 0.875rem;
        inset-inline-start: calc(-1.5 * ${theme.base.spacing});
        inset-block-start: calc(0.5 * ${theme.base.spacing});
      }
    }
  `;
});
StyledHeadset.defaultProps = defaultThemeProp;
export const getMessageColors = (theme, direction, senderType, agentVariant = 0) => {
    const { slate, blue, purple, orange, green, black } = theme.base.colors;
    const agentMessageColors = [
        purple['extra-light'],
        orange['extra-light'],
        '#C5D1DD',
        green['extra-light'],
        '#BBEAEA'
    ];
    const outMessageColor = blue.medium;
    const customerMessageColor = '#E6EEFA';
    const botMessageColor = slate['extra-dark'];
    if (direction === 'in') {
        const messageColors = {
            header: orange.medium,
            content: ''
        };
        if (senderType === 'agent') {
            messageColors.content = agentMessageColors[agentVariant % agentMessageColors.length];
        }
        else if (senderType === 'bot') {
            messageColors.content = botMessageColor;
        }
        else if (senderType === 'customer') {
            messageColors.content = customerMessageColor;
        }
        return messageColors;
    }
    return {
        header: black,
        content: outMessageColor
    };
};
export const StyledMessageContainer = styled.li(({ direction, senderType, hasMessage, typing, status, agentVariant, theme, theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, 'border-radius': borderRadius, spacing, palette: { 'foreground-color': foregroundColor, 'secondary-background': secondaryBackground, urgent }, transparency: { 'transparent-2': foregroundAlpha } } } }) => {
    const { header, content } = getMessageColors(theme, direction, senderType, agentVariant);
    const metaForegroundColor = tryCatch(() => rgba(foregroundColor, foregroundAlpha));
    const statusForegroundColor = status === 'undeliverable' ? urgent : metaForegroundColor;
    const fontSizes = calculateFontSize(fontSize, fontScale);
    const contrastContentColor = readableColor(content);
    const contrastHeaderColor = readableColor(header);
    return css `
      ${direction === 'out'
        ? css `
            padding-inline-start: calc(4 * ${spacing});
          `
        : css `
            padding-inline-end: calc(4 * ${spacing});
          `}
      margin-block-end: ${typing ? spacing : '0'};

      :first-child {
        margin-block-start: ${spacing};
      }

      ${StyledMessageMain} {
        max-width: 90%;
      }
      ${StyledMessageBubble} {
        background: ${content};
        border-radius: calc(3 * ${borderRadius}) ${borderRadius} calc(3 * ${borderRadius})
          calc(3 * ${borderRadius});
        overflow: hidden;
        color: ${contrastContentColor};
        display: inline-block;
        width: auto;
        margin-block-end: calc(0.5 * ${spacing});

        label {
          color: inherit;
        }

        ${direction === 'in' &&
        css `
          border-radius: ${borderRadius} calc(3 * ${borderRadius}) calc(3 * ${borderRadius});
        `}

        > ${StyledMessageBubbleContent} {
          padding: ${spacing} calc(2 * ${spacing});
          word-break: break-word;
          white-space: pre-wrap;
          position: relative;
        }

        > ${StyledMediaList} {
          color: ${contrastContentColor};
          max-width: 100%;

          > ${StyledMediaListItem} {
            position: relative;
            ${StyledMediaThumbNail} {
              max-height: 12rem;
              width: 100%;
              object-fit: contain;
              background-color: ${secondaryBackground};
            }
            ${StyledSummaryItem} {
              padding: ${spacing} calc(3 * ${spacing});
              font-size: ${fontSizes.xxs};
              margin-block-start: calc(0.5 * ${spacing});
            }
            ${StyledSummaryItem}::before {
              content: '';
              padding: ${spacing} 0;
              border-top: 0.0625rem solid ${contrastContentColor};
              position: absolute;
              width: calc(100% - 2rem);
              left: 1rem;
              top: 0;
            }
            ${StyledMediaThumbNail} + ${StyledSummaryItem}::before {
              content: none;
            }
            svg {
              font-size: 1.6rem;
            }
            ${StyledText} {
              color: ${foregroundColor};
            }
          }

          ${!hasMessage &&
        css `
            > ${StyledMediaListItem}:first-child {
              > ${StyledSummaryItem}::before {
                border-top: none;
              }
            }
          `}
        }

        ${StyledMessageHeader} {
          padding: ${spacing} calc(2 * ${spacing});
          color: ${contrastHeaderColor};
          border-block-end: 0.0625rem solid ${transparentize(0.5, theme.base.colors.white)};
        }

        ${StyledMessageHeaderContent} {
          color: ${contrastHeaderColor};
          margin-inline-end: ${spacing};
        }
        ${StyledMessageHeaderMeta} {
          > a {
            color: ${contrastHeaderColor};
          }
        }

        ${StyledMediaLink}, ${StyledMediaButton} {
          color: ${contrastContentColor};
          font-size: inherit;
          text-decoration: none;
          font-weight: 700;
          overflow-x: hidden;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          display: inline-block;
          max-width: 100%;
          &:hover {
            color: ${contrastContentColor};
            text-decoration: underline;
          }
          &:visited {
            color: ${contrastContentColor};
          }
          &:focus {
            box-shadow: ${theme.base.shadow.focus};
          }
        }
      }

      ${StyledMetaInfoContainer} {
        width: 100%;
        padding: 0 ${spacing};
        ${StyledMetaInfo}, ${StyledStatusInfo} {
          margin-block-end: ${spacing};
          font-size: 0.7rem;
          color: ${metaForegroundColor};
        }
        ${StyledStatusInfo} {
          color: ${statusForegroundColor};
        }
      }
      ${StyledTypingIndicator} {
        width: 4.5rem;
        position: relative;
        height: 2rem;
      }
    `;
});
StyledMessageContainer.defaultProps = defaultThemeProp;
export const StyledBlinkingDot = styled.div(({ delay = 0, theme }) => {
    return css `
    @keyframes Blinking {
      0% {
        background: ${theme.base.colors.gray.medium};
      }
      100% {
        background: ${theme.base.colors.gray['extra-light']};
      }
    }
    animation: Blinking calc(4 * ${theme.base.animation.speed}) infinite;
    background: ${theme.base.colors.gray['extra-light']};
    border-radius: 50%;
    animation-delay: ${delay}s;
    height: 0.4rem;
    width: 0.4rem;
  `;
});
StyledBlinkingDot.defaultProps = defaultThemeProp;
export const StyledUndeliveredIcon = styled(Icon)(({ theme: { base: { palette: { urgent } } } }) => {
    return css `
      color: ${urgent};
    `;
});
StyledUndeliveredIcon.defaultProps = defaultThemeProp;
export const StyledFlagIcon = styled(Icon)(({ theme }) => {
    return css `
    position: relative;
    inset-block-start: calc(0.5 * ${theme.base.spacing});
  `;
});
StyledFlagIcon.defaultProps = defaultThemeProp;
//# sourceMappingURL=Message.styles.js.map