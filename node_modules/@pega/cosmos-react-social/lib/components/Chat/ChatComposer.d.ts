import { FunctionComponent, Ref, ReactNode, RefObject, KeyboardEvent } from 'react';
import { ForwardProps, FileUploadItemProps } from '@pega/cosmos-react-core';
export type SpecialKeysConfig = {
    /** Collection of specialKeys */
    keys: string[];
    /** onSpecialKey is fired when a special key is typed in Textarea */
    onSpecialKey: (e: KeyboardEvent<HTMLTextAreaElement>, key: string) => void;
};
export interface ChatComposerProps {
    /** Place holder */
    placeholder?: string;
    /** Default message to populate on load */
    defaultMessage?: string;
    /** Max character limit */
    maxLength?: number;
    /** Callback when send button is clicked */
    onSend: (message: string) => void;
    /** Enter / Return key sends message */
    enterKeySendsMessage?: boolean;
    /** Max number of attachments to be allowed in chat composer.
     * If zero is passed, add attachments icon will be hidden. same rule applies if prop is not passed.
     * If attachments added are >= maxAttachments, add attachments icon will be disabled.
     */
    maxAttachments?: number;
    /** show/hide emoji */
    showEmoji?: boolean;
    /** Attachments list */
    attachments?: FileUploadItemProps[];
    /** Callback when attachment icon is clicked */
    onAddAttachment?: () => void;
    /** Special Keys configuration */
    specialKeysConfig?: SpecialKeysConfig;
    /** Disables the composer area */
    disabled?: boolean;
    /** Children */
    children?: ReactNode;
    /** Ref to the Imperative handle */
    ref?: Ref<ChatComposerImperativeHandleProps>;
}
export declare const StyledAttachmentsListContainer: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
export interface ChatComposerImperativeHandleProps {
    /** Function to append a message */
    appendToMessage: (appendMessage: string, position?: 'cursor' | 'start' | 'end' | 'specialKey') => void;
    /** Actual ref to Chat composer component */
    chatComposerRef: RefObject<HTMLDivElement | undefined>;
    textAreaRef: RefObject<HTMLTextAreaElement | undefined>;
}
declare const ChatComposer: FunctionComponent<ChatComposerProps & ForwardProps>;
export default ChatComposer;
//# sourceMappingURL=ChatComposer.d.ts.map