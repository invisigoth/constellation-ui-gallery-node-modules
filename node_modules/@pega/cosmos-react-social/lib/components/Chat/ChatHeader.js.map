{"version":3,"file":"ChatHeader.js","sourceRoot":"","sources":["../../../src/components/Chat/ChatHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["import { forwardRef, FunctionComponent, Ref, PropsWithoutRef, MouseEvent } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport {\n  Text,\n  Flex,\n  Icon,\n  defaultThemeProp,\n  ForwardProps,\n  NoChildrenProp,\n  SentimentProps,\n  Sentiment,\n  FieldValueListItemProps,\n  Button,\n  useElement,\n  InfoDialog,\n  FieldValueList,\n  useI18n,\n  registerIcon,\n  MenuButton,\n  MenuItemProps\n} from '@pega/cosmos-react-core';\nimport * as userCheckIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/user-check.icon';\nimport * as userQuestionMarkIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/user-question-mark.icon';\n\nregisterIcon(userCheckIcon, userQuestionMarkIcon);\n\nexport interface ChatHeaderProps extends NoChildrenProp {\n  /** ref to the element */\n  ref?: Ref<HTMLElement>;\n  /** Title: Used to show channel || group name */\n  title: string;\n  /** Icon: Used to show the channel icons, pass the icon name from the cosmos library to render */\n  icon?: string;\n  /** Used to show customer name || handle */\n  customer: string;\n  /** Authentication status of the customer\n   * @default false\n   */\n  authenticated?: boolean;\n  /** Sentiment */\n  sentiment?: SentimentProps;\n  /** Contextual information */\n  context?: {\n    loading?: boolean;\n    onClick?: (e: MouseEvent<HTMLButtonElement>) => void;\n    items: FieldValueListItemProps[];\n  };\n  /** Used to show frequent user actions to be performed */\n  actions?: MenuItemProps[];\n}\n\nconst StyledChatHeader = styled.header(\n  ({\n    theme: {\n      base: {\n        spacing,\n        palette: { 'border-line': borderLine }\n      }\n    }\n  }) => {\n    return css`\n      padding: ${spacing};\n      border-block-end: 0.0625rem solid ${borderLine};\n    `;\n  }\n);\nStyledChatHeader.defaultProps = defaultThemeProp;\n\nconst StyledContextContainer = styled.div`\n  min-height: 2rem;\n`;\n\nconst StyledInfoDialog = styled(InfoDialog)`\n  min-width: 50ch;\n`;\n\nconst ChatHeader: FunctionComponent<ChatHeaderProps & ForwardProps> = forwardRef(\n  function ChatHeader(props: PropsWithoutRef<ChatHeaderProps>, ref: ChatHeaderProps['ref']) {\n    const {\n      title,\n      actions = [],\n      icon,\n      customer,\n      authenticated = false,\n      sentiment,\n      context,\n      ...restProps\n    } = props;\n\n    const t = useI18n();\n    const [target, setTarget] = useElement<HTMLButtonElement>(null);\n\n    return (\n      <Flex\n        {...restProps}\n        ref={ref}\n        as={StyledChatHeader}\n        container={{ alignItems: 'start' }}\n        item={{\n          shrink: 0\n        }}\n      >\n        <Flex\n          item={{\n            grow: 1\n          }}\n          container={{\n            gap: 0.5,\n            alignItems: 'start',\n            direction: 'column'\n          }}\n        >\n          <Flex container={{ gap: 1, alignItems: 'center' }}>\n            {icon && <Icon name={icon} />}\n            <Text variant='h2'>{title}</Text>\n          </Flex>\n          <Flex container={{ gap: 1, alignItems: 'center' }}>\n            <Icon\n              role='img'\n              name={authenticated ? 'user-check' : 'user-question-mark'}\n              aria-label={authenticated ? t('authenticated') : t('not_authenticated')}\n            />\n            <Text variant='secondary'>{customer}</Text>\n            {sentiment && <Sentiment {...sentiment} labelHidden />}\n          </Flex>\n        </Flex>\n\n        <Flex\n          item={{\n            grow: 1\n          }}\n          container={{\n            alignItems: 'center',\n            justify: 'end'\n          }}\n        >\n          {context && (\n            <Button\n              variant='simple'\n              onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                context.onClick?.(e);\n                setTarget(e.currentTarget);\n              }}\n            >\n              {t('context')}\n            </Button>\n          )}\n\n          <MenuButton\n            text={t('actions')}\n            iconOnly\n            icon='more'\n            variant='simple'\n            menu={{ items: actions }}\n          />\n        </Flex>\n        {target && context && (\n          <StyledInfoDialog\n            heading={t('chat_context')}\n            target={target}\n            onDismiss={() => setTarget(null)}\n            placement='bottom-end'\n            progress={context.loading}\n          >\n            <Flex as={StyledContextContainer} container>\n              <FieldValueList fields={context.items} />\n            </Flex>\n          </StyledInfoDialog>\n        )}\n      </Flex>\n    );\n  }\n);\n\nexport default ChatHeader;\n"]}