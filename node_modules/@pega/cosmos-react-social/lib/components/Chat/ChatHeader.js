import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { Text, Flex, Icon, defaultThemeProp, Sentiment, Button, useElement, InfoDialog, FieldValueList, useI18n, registerIcon, MenuButton } from '@pega/cosmos-react-core';
import * as userCheckIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/user-check.icon';
import * as userQuestionMarkIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/user-question-mark.icon';
registerIcon(userCheckIcon, userQuestionMarkIcon);
const StyledChatHeader = styled.header(({ theme: { base: { spacing, palette: { 'border-line': borderLine } } } }) => {
    return css `
      padding: ${spacing};
      border-block-end: 0.0625rem solid ${borderLine};
    `;
});
StyledChatHeader.defaultProps = defaultThemeProp;
const StyledContextContainer = styled.div `
  min-height: 2rem;
`;
const StyledInfoDialog = styled(InfoDialog) `
  min-width: 50ch;
`;
const ChatHeader = forwardRef(function ChatHeader(props, ref) {
    const { title, actions = [], icon, customer, authenticated = false, sentiment, context, ...restProps } = props;
    const t = useI18n();
    const [target, setTarget] = useElement(null);
    return (_jsxs(Flex, { ...restProps, ref: ref, as: StyledChatHeader, container: { alignItems: 'start' }, item: {
            shrink: 0
        }, children: [_jsxs(Flex, { item: {
                    grow: 1
                }, container: {
                    gap: 0.5,
                    alignItems: 'start',
                    direction: 'column'
                }, children: [_jsxs(Flex, { container: { gap: 1, alignItems: 'center' }, children: [icon && _jsx(Icon, { name: icon }), _jsx(Text, { variant: 'h2', children: title })] }), _jsxs(Flex, { container: { gap: 1, alignItems: 'center' }, children: [_jsx(Icon, { role: 'img', name: authenticated ? 'user-check' : 'user-question-mark', "aria-label": authenticated ? t('authenticated') : t('not_authenticated') }), _jsx(Text, { variant: 'secondary', children: customer }), sentiment && _jsx(Sentiment, { ...sentiment, labelHidden: true })] })] }), _jsxs(Flex, { item: {
                    grow: 1
                }, container: {
                    alignItems: 'center',
                    justify: 'end'
                }, children: [context && (_jsx(Button, { variant: 'simple', onClick: (e) => {
                            context.onClick?.(e);
                            setTarget(e.currentTarget);
                        }, children: t('context') })), _jsx(MenuButton, { text: t('actions'), iconOnly: true, icon: 'more', variant: 'simple', menu: { items: actions } })] }), target && context && (_jsx(StyledInfoDialog, { heading: t('chat_context'), target: target, onDismiss: () => setTarget(null), placement: 'bottom-end', progress: context.loading, children: _jsx(Flex, { as: StyledContextContainer, container: true, children: _jsx(FieldValueList, { fields: context.items }) }) }))] }));
});
export default ChatHeader;
//# sourceMappingURL=ChatHeader.js.map