import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { Flex, Icon, registerIcon, Button, Text, useI18n, defaultThemeProp, useLiveLog, ExpandCollapse, Alert, useDirection, EmptyState } from '@pega/cosmos-react-core';
import * as timesIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/times.icon';
import * as caretLeftIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/caret-left.icon';
import * as caretRightIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/caret-right.icon';
import { StyledAlert } from '@pega/cosmos-react-core/lib/components/Badges/Alert';
registerIcon(timesIcon, caretLeftIcon, caretRightIcon);
export const StyledSuggestedReplyHeader = styled.div ``;
export const StyledSuggestedReplyContent = styled.div ``;
export const StyledReply = styled.div ``;
export const StyledRepliesAction = styled.div ``;
export const StyledNotification = styled.div ``;
const maxNumOfLines = 5;
const minNumOfLines = 2;
export const StyledSuggestedReplyIcon = styled.svg(({ suggestedReplyCollapsed, theme }) => {
    const { rtl } = useDirection();
    const { base: { animation: { speed, timing: { ease } } } } = theme;
    return css `
      transition-property: transform;
      transition-duration: ${speed};
      transition-timing-function: ${ease};
      ${suggestedReplyCollapsed &&
        css `
        transform: rotateZ(${rtl ? '0deg' : '-90deg'});
      `}
    `;
});
StyledSuggestedReplyIcon.defaultProps = defaultThemeProp;
const StyledSuggestedReplyContainer = styled.div(props => {
    const { theme } = props;
    return css `
    border-top: 0.0625rem solid ${theme.base.palette['border-line']};
    background-color: ${theme.base.palette['primary-background']};

    > ${StyledSuggestedReplyHeader} {
      padding: ${theme.base.spacing};
      border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};
    }

    ${StyledAlert} {
      position: relative;
      inset-block-start: calc(-0.25 * ${theme.base.spacing});
      inset-inline-start: calc(-0.5 * ${theme.base.spacing});
    }

    ${StyledSuggestedReplyContent} {
      padding: calc(2 * ${theme.base.spacing});
      position: relative;

      > ${StyledReply} {
        overflow-y: auto;
        max-height: calc(2.5 * ${theme.base.spacing} * ${maxNumOfLines});
        min-height: calc(2.5 * ${theme.base.spacing} * ${minNumOfLines});
      }
    }
  `;
});
StyledSuggestedReplyContainer.defaultProps = defaultThemeProp;
const SuggestedReplyPicker = forwardRef(function SuggestedReplyPicker(props, ref) {
    const { replies = [], collapsed, onExpandCollapse, showNotification, onSelect, currentReplyId, onReplyChange, onSend, maxLength = 256, ...restProps } = props;
    const { announcePolite } = useLiveLog();
    const t = useI18n();
    const { rtl, ltr } = useDirection();
    // Allows suggested replies to cycle
    const onSuggestedReplyChange = (mode) => {
        const currentReplyIndex = replies.findIndex(reply => reply.id === currentReplyId);
        let newReplyIndex = mode === 'prev' ? currentReplyIndex - 1 : currentReplyIndex + 1;
        newReplyIndex = (newReplyIndex + replies.length) % replies.length;
        onReplyChange(replies[newReplyIndex].id);
    };
    // SR announcement when current reply changes
    useEffect(() => {
        if (!replies || replies.length === 0 || !currentReplyId) {
            return;
        }
        const currentReplyIndex = replies.findIndex(reply => reply.id === currentReplyId);
        announcePolite({
            message: `${t('suggested_replies_current_of_total', [
                currentReplyIndex + 1,
                replies.length
            ])},
           ${t('confidence_percentage', [replies[currentReplyIndex]?.confidence])},${replies[currentReplyIndex]?.message}`,
            type: 'acknowledgement'
        });
    }, [currentReplyId]);
    const onEditAnnouncement = () => {
        announcePolite({
            message: t('suggested_reply_copied_to_input_field'),
            type: 'acknowledgement'
        });
    };
    return (_jsxs(StyledSuggestedReplyContainer, { ref: ref, ...restProps, children: [_jsx(Flex, { as: StyledSuggestedReplyHeader, container: {
                    justify: 'between',
                    alignContent: 'center'
                }, children: _jsxs(Flex, { container: {
                        alignItems: 'center',
                        gap: 1
                    }, children: [ltr && (_jsx(Button, { variant: 'simple', label: collapsed ? t('expand') : t('collapse'), "aria-label": t(collapsed ? 'expand_suggested_replies' : 'collapse_suggested_replies'), icon: true, onClick: onExpandCollapse, children: _jsx(Icon, { name: 'caret-down', suggestedReplyCollapsed: collapsed, as: StyledSuggestedReplyIcon }) })), _jsxs(Flex, { container: { gap: 0.5 }, children: [_jsx(Text, { variant: 'h3', children: t('suggested_replies') }), collapsed && showNotification && _jsx(Alert, { variant: 'urgent' })] }), rtl && (_jsx(Button, { variant: 'simple', label: collapsed ? t('expand') : t('collapse'), "aria-label": t(collapsed ? 'expand_suggested_replies' : 'collapse_suggested_replies'), icon: true, onClick: onExpandCollapse, children: _jsx(Icon, { name: 'caret-down', suggestedReplyCollapsed: collapsed, as: StyledSuggestedReplyIcon }) }))] }) }), _jsx(ExpandCollapse, { dimension: 'height', collapsed: collapsed, nullWhenCollapsed: true, children: _jsxs(Flex, { container: {
                        direction: 'column',
                        gap: 1
                    }, as: StyledSuggestedReplyContent, children: [currentReplyId && replies.length ? (_jsx(Flex, { container: true, as: StyledReply, children: replies.find(reply => reply.id === currentReplyId)?.message })) : (_jsx(EmptyState, { message: t('no_suggestion') })), _jsxs(Flex, { container: {
                                justify: 'center'
                            }, as: StyledRepliesAction, children: [replies.length > 1 && (_jsx(Button, { icon: true, "aria-label": t('prev_suggested_reply'), variant: 'simple', disabled: currentReplyId === undefined || replies.length <= 1, onClick: () => {
                                        onSuggestedReplyChange('prev');
                                    }, children: _jsx(Icon, { name: 'caret-left' }) })), _jsx(Button, { disabled: currentReplyId === undefined || !replies || replies.length === 0, onClick: () => {
                                        const selectedReply = replies.find(reply => reply.id === currentReplyId);
                                        if (selectedReply) {
                                            onSelect(selectedReply);
                                            onExpandCollapse();
                                            onEditAnnouncement();
                                        }
                                    }, "aria-label": replies.length > 0 && currentReplyId
                                        ? t('edit_current_template', [
                                            replies.length > 0 && currentReplyId
                                                ? replies.findIndex(reply => reply.id === currentReplyId) + 1
                                                : 0,
                                            replies.length
                                        ])
                                        : undefined, children: t('edit') }), _jsx(Button, { disabled: currentReplyId === undefined ||
                                        !replies ||
                                        replies.length === 0 ||
                                        (!!maxLength && replies.length > maxLength), onClick: () => {
                                        const selectedReply = replies.find(reply => reply.id === currentReplyId);
                                        if (selectedReply) {
                                            onSend(selectedReply.message);
                                            onExpandCollapse();
                                        }
                                    }, "aria-label": replies.length > 0 && currentReplyId
                                        ? t('send_current_template', [
                                            replies.length > 0 && currentReplyId
                                                ? replies.findIndex(reply => reply.id === currentReplyId) + 1
                                                : 0,
                                            replies.length
                                        ])
                                        : undefined, children: t('send') }), replies.length > 1 && (_jsx(Button, { icon: true, "aria-label": t('next_suggested_reply'), variant: 'simple', onClick: () => {
                                        onSuggestedReplyChange('next');
                                    }, disabled: currentReplyId === undefined || replies.length <= 1, children: _jsx(Icon, { name: 'caret-right' }) }))] })] }) })] }));
});
export default SuggestedReplyPicker;
//# sourceMappingURL=SuggestedReplyPicker.js.map