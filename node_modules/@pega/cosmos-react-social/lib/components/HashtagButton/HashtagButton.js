import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, isValidElement, useContext } from 'react';
import styled from 'styled-components';
import { Tag } from '@pega/cosmos-react-core';
import { getXMLAttributes } from '@pega/cosmos-react-rte';
import { FeedContext } from '../Feed/Feed.context';
const StyledTag = styled(Tag) `
  cursor: pointer;
`;
const serializer = new XMLSerializer();
const HashtagButton = forwardRef(function HashtagButton({ children, tag: tagProp = '', ...restProps }, ref) {
    const { onTagClick } = useContext(FeedContext);
    let tag = '';
    if (!isValidElement(children)) {
        if (!children.tag)
            return _jsx("span", { children: children.rawText });
        tag = children.tag;
    }
    else {
        tag = tagProp;
    }
    return (_jsx(StyledTag, { ...restProps, ref: ref, onClick: () => onTagClick?.(tag), spellCheck: false, children: isValidElement(children) ? children : tag }));
});
export const HashtagButtonConfig = {
    type: 'tag',
    xmlElement: 'pega-tag',
    regexPattern: /(?:^|)<pega-tag (?:[^\n/]|\/(?!>))+\/>/gm,
    component: HashtagButton,
    inject: ({ tag }) => {
        if (!tag)
            return;
        const element = document.createElementNS(null, 'pega-tag');
        element.setAttribute('tag', tag);
        return serializer.serializeToString(element);
    },
    extract: (element) => {
        const attributes = getXMLAttributes(element);
        if (!attributes || !attributes.tag)
            return undefined;
        return { tag: attributes.tag };
    }
};
export default HashtagButton;
//# sourceMappingURL=HashtagButton.js.map