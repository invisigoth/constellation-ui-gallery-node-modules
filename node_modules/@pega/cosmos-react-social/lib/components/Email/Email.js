import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef, Fragment, useRef, useState, useMemo, useEffect, useImperativeHandle } from 'react';
import { Text, SummaryItem, Avatar, Flex, EmailDisplay, Button, Icon, Sentiment, useOuterEvent, Popover, useElement, CardContent, useI18n, FileDisplay, useBreakpoint, DateTimeDisplay, useConfiguration, MetaList, useScrollToggle, Status, Banner, useTheme, useEscape, HTML } from '@pega/cosmos-react-core';
import { RichTextViewer } from '@pega/cosmos-react-rte';
import ContextMenuPopover from './ContextMenuPopover';
import { StyledEmail, StyledEmailDisplay, StyledEmailHeader, StyledFromEmailDisplay, StyledEmailMoreInfoButton, StyledEmailMoreInfoPopover, StyledEmailPrimaryFieldValueList, StyledEmailBody, StyledEmailSecondaryFieldValueList, StyledSuggestedRepliesButton, StyledSuggestedRepliesMenuButton, StyledForwardedContentToggle, StyledEmailActions } from './Email.styles';
import highlightEntities from './utils/EntityHighlighter';
import './EmailEntity';
const EmailDisplayList = ({ emailUsers, showEmailAddress, showShortName }) => {
    return (_jsx(_Fragment, { children: emailUsers.map(({ emailAddress, fullName, shortName }, i) => (_jsxs(Fragment, { children: [i === 0 ? '' : '; ', _jsx(EmailDisplay, { value: emailAddress, displayText: `${showShortName ? shortName : fullName}${showEmailAddress ? ` <${emailAddress}>` : ''}`, variant: 'text', as: StyledEmailDisplay })] }, emailAddress))) }));
};
const OVERFLOW_TO_EMAIL_COUNT = 2;
const OVERFLOW_EMAIL_SUGGESTION_COUNT = 2;
const Email = forwardRef(function Email(props, ref) {
    const { id, from, to = [], cc = [], bcc = [], timeStamp, sentiment, subject, forwardedContent, attachments = [], suggestions = [], entityHighlightMapping = [], onReply, onForward, onReplyAll, onEditDraft, onDeleteDraft, onSuggestionClick, contextMenu, status, banner, body, ...restProps } = props;
    const t = useI18n();
    const theme = useTheme();
    const [emailMoreInfoBtnRef, setEmailMoreInfoBtnRef] = useElement(null);
    const [showEmailMoreInfo, setShowEmailMoreInfo] = useState(false);
    const [showForwardedContent, setShowForwardedContent] = useState(false);
    const [emailMoreInfoPopover, setEmailMoreInfoPopover] = useElement(null);
    const emailMoreInfoFields = [];
    // Only way to set this is through imperative handle
    const [contextMenuItems, setContextMenuItems] = useState([]);
    const [contextMenuLoading, setContextMenuLoading] = useState(false);
    const [contextMenuPopoverOpen, setContextMenuPopoverOpen] = useState(false);
    const { disableScroll, enableScroll } = useScrollToggle();
    const [contextMenuPopoverEl, setContextMenuPopoverEl] = useElement();
    useImperativeHandle(contextMenu?.handle, () => ({
        setItems: (ctxMenuItems) => {
            setContextMenuItems(ctxMenuItems || []);
        },
        setLoading(loading) {
            setContextMenuLoading(loading);
        },
        setOpen(visible) {
            setContextMenuPopoverOpen(visible);
        }
    }));
    const headerRef = useRef(null);
    const isSmallOrAbove = useBreakpoint('sm', {
        breakpointRef: headerRef,
        themeProp: 'content-width'
    });
    const { locale } = useConfiguration();
    const [currentTarget, setCurrentTarget] = useState();
    useOuterEvent('mousedown', [contextMenuPopoverEl], () => {
        if (contextMenuPopoverOpen)
            setContextMenuPopoverOpen(false);
    });
    // Handler for right click on email body
    const onContextMenu = (e) => {
        if (e.target instanceof HTMLElement && e.target.textContent?.trim()) {
            setCurrentTarget({
                targetNode: e.target,
                cursorPosition: {
                    x: e.pageX - window.scrollX,
                    y: e.pageY - window.scrollY
                }
            });
        }
        contextMenu?.onContextMenu(id, e);
    };
    const onItemClick = (selectedValue) => {
        setContextMenuPopoverOpen(false);
        contextMenu?.onItemClick(selectedValue);
    };
    if (from) {
        emailMoreInfoFields.push({
            id: 'from',
            name: t('from'),
            value: from.emailAddress
        });
    }
    if (to.length > 0) {
        emailMoreInfoFields.push({
            id: 'to',
            name: t('to'),
            value: _jsx(EmailDisplayList, { emailUsers: to, showEmailAddress: true })
        });
    }
    if (cc.length > 0) {
        emailMoreInfoFields.push({
            id: 'cc',
            name: 'CC',
            value: _jsx(EmailDisplayList, { emailUsers: cc, showEmailAddress: true })
        });
    }
    if (bcc.length > 0) {
        emailMoreInfoFields.push({
            id: 'BCC',
            name: 'BCC',
            value: _jsx(EmailDisplayList, { emailUsers: bcc, showEmailAddress: true })
        });
    }
    if (timeStamp) {
        emailMoreInfoFields.push({
            id: 'date',
            name: t('date'),
            value: (_jsxs(Text, { children: [`${new Intl.DateTimeFormat(locale, { weekday: 'short' }).format(new Date(timeStamp))}, `, _jsx(DateTimeDisplay, { variant: 'datetime', format: 'short', value: timeStamp })] }))
        });
    }
    useOuterEvent('mousedown', [emailMoreInfoPopover], () => {
        setShowEmailMoreInfo(false);
    });
    useEscape(() => {
        setShowEmailMoreInfo(false);
    });
    const secondaryFields = [];
    if (attachments.length > 0) {
        secondaryFields.push({
            id: 'attachments',
            name: '',
            value: (_jsx(Flex, { container: { gap: 1, wrap: 'wrap' }, children: attachments.map(attachmentProps => (_createElement(FileDisplay, { ...attachmentProps, key: attachmentProps.value }))) }))
        });
    }
    if (suggestions.length > 0) {
        secondaryFields.push({
            id: 'suggested_replies',
            name: '',
            value: (_jsxs(Flex, { container: { wrap: 'wrap' }, children: [suggestions
                        .slice(0, OVERFLOW_EMAIL_SUGGESTION_COUNT)
                        .map(({ id: suggestionId, title }) => (_jsx(StyledSuggestedRepliesButton, { variant: 'secondary', onClick: () => {
                            onSuggestionClick?.(id, suggestionId);
                        }, children: title }, suggestionId))), suggestions.length > OVERFLOW_EMAIL_SUGGESTION_COUNT && (_jsx(StyledSuggestedRepliesMenuButton, { text: t('other_responses'), variant: 'secondary', menu: {
                            items: suggestions
                                .slice(OVERFLOW_EMAIL_SUGGESTION_COUNT)
                                .map(({ id: suggestionId, title }) => {
                                return {
                                    primary: title,
                                    id: suggestionId,
                                    onClick: () => {
                                        onSuggestionClick?.(id, suggestionId);
                                    }
                                };
                            })
                        } }, 'other_responses'))] }))
        });
    }
    let renderedBody = body;
    renderedBody = useMemo(() => {
        // Apply entity highlighting only on string body
        if (typeof body === 'string') {
            let bodyString = body;
            if (subject) {
                bodyString = `<div style="font-weight: ${theme.base['font-weight']['semi-bold']}">${t('subject_label', [subject])}</div><br>${body}`;
            }
            if (entityHighlightMapping) {
                bodyString = highlightEntities(bodyString, entityHighlightMapping);
            }
            return (_jsxs(_Fragment, { children: [_jsx(HTML, { content: bodyString, customTags: ['pega-email-entity'], "aria-label": t('unique_entities', [entityHighlightMapping?.length ?? 0], {
                            count: entityHighlightMapping?.length ?? 0
                        }), role: 'group' }), contextMenu && currentTarget && (_jsx(ContextMenuPopover, { cursorPosition: currentTarget.cursorPosition, contextMenu: {
                            ...contextMenu,
                            items: contextMenuItems,
                            loading: contextMenuLoading,
                            onItemClick
                        }, targetNode: currentTarget.targetNode, show: contextMenuPopoverOpen, ref: setContextMenuPopoverEl }))] }));
        }
    }, [
        currentTarget,
        contextMenu,
        contextMenuPopoverOpen,
        contextMenuItems,
        contextMenuLoading,
        entityHighlightMapping
    ]);
    const emailMetaListItems = [
        _jsxs(Text, { variant: 'secondary', children: [`${t('to')}: `, _jsx(EmailDisplayList, { emailUsers: to.slice(0, OVERFLOW_TO_EMAIL_COUNT), showShortName: true }), to.length > OVERFLOW_TO_EMAIL_COUNT &&
                    `; +${t('more_count', [to.length - OVERFLOW_TO_EMAIL_COUNT])}`] }),
        _jsxs(Text, { variant: 'secondary', children: [`${new Intl.DateTimeFormat(locale, { weekday: 'short' }).format(new Date(timeStamp))}, `, _jsx(DateTimeDisplay, { variant: 'datetime', format: 'short', value: timeStamp })] })
    ];
    useEffect(() => {
        if (contextMenuPopoverOpen)
            disableScroll();
        else
            enableScroll();
    }, [contextMenuPopoverOpen]);
    const actions = useMemo(() => {
        const applicableActions = [];
        if (status !== 'draft') {
            if (onReply) {
                applicableActions.push(_jsx(Button, { variant: 'simple', icon: true, label: t('reply'), onClick: () => {
                        onReply?.(id);
                    }, children: _jsx(Icon, { name: 'reply' }) }));
            }
            if (onReplyAll) {
                applicableActions.push(_jsx(Button, { icon: true, variant: 'simple', label: t('reply_all'), onClick: () => {
                        onReplyAll?.(id);
                    }, children: _jsx(Icon, { name: 'reply-all' }) }));
            }
            if (onForward) {
                applicableActions.push(_jsx(Button, { variant: 'simple', icon: true, label: t('forward'), onClick: () => {
                        onForward?.(id);
                    }, children: _jsx(Icon, { name: 'forward' }) }));
            }
        }
        if (status === 'draft') {
            if (onEditDraft) {
                applicableActions.push(_jsx(Button, { variant: 'simple', icon: true, label: t('edit'), onClick: () => {
                        onEditDraft?.(id);
                    }, children: _jsx(Icon, { name: 'pencil' }) }));
            }
            if (onDeleteDraft) {
                applicableActions.push(_jsx(Button, { variant: 'simple', icon: true, label: t('delete'), onClick: () => {
                        onDeleteDraft?.(id);
                    }, children: _jsx(Icon, { name: 'trash' }) }));
            }
        }
        return applicableActions;
    }, [status, onEditDraft, onDeleteDraft, onReply, onReplyAll, onForward]);
    return (_jsxs(Flex, { as: StyledEmail, container: {
            direction: 'column',
            gap: 1
        }, ref: ref, ...restProps, children: [_jsx(SummaryItem, { as: StyledEmailHeader, visual: _jsx(Avatar, { ...from.avatarProps, name: from.fullName }), ref: headerRef, primary: _jsxs(Flex, { container: {
                        gap: 1,
                        alignItems: 'center'
                    }, children: [_jsx(StyledFromEmailDisplay, { value: from.emailAddress, displayText: from.fullName, variant: 'text' }), sentiment && _jsx(Sentiment, { ...sentiment, labelHidden: true }), status && isSmallOrAbove && (_jsx(Status, { variant: status === 'draft' ? 'pending' : 'urgent', children: status === 'draft' ? t('draft', [], { count: 1 }) : t(status) }))] }), secondary: _jsxs(Flex, { container: {
                        gap: 0,
                        alignItems: 'start',
                        direction: 'column'
                    }, children: [_jsxs(Flex, { container: {
                                gap: 0,
                                alignItems: 'start'
                            }, children: [_jsx(MetaList, { items: isSmallOrAbove ? emailMetaListItems : [emailMetaListItems[0]] }), _jsx(Button, { icon: true, variant: 'simple', as: StyledEmailMoreInfoButton, ref: setEmailMoreInfoBtnRef, onClick: () => {
                                        setShowEmailMoreInfo(true);
                                    }, label: t('show_more'), children: _jsx(Icon, { name: 'arrow-micro-down' }) }), _jsx(Popover, { as: StyledEmailMoreInfoPopover, show: showEmailMoreInfo, ref: setEmailMoreInfoPopover, target: emailMoreInfoBtnRef, placement: 'bottom', children: _jsx(CardContent, { children: _jsx(StyledEmailPrimaryFieldValueList, { fields: emailMoreInfoFields }) }) })] }), !isSmallOrAbove && timeStamp && emailMetaListItems[1], status && !isSmallOrAbove && (_jsx(Flex, { container: { pad: [0.5, 0, 0] }, children: _jsx(Status, { variant: status === 'draft' ? 'pending' : 'urgent', children: status === 'draft' ? t('draft', [], { count: 1 }) : t(status) }) }))] }), actions: _jsxs(Flex, { as: StyledEmailActions, container: {
                        pad: 1,
                        alignItems: 'center'
                    }, children: [...actions] }) }), banner && _jsx(Banner, { variant: 'urgent', ...banner }), _jsxs(Flex, { container: {
                    direction: 'column',
                    gap: 2,
                    pad: [0, 2]
                }, onContextMenu: contextMenu ? onContextMenu : undefined, children: [_jsx(StyledEmailBody, { children: renderedBody }), forwardedContent && forwardedContent.length > 0 && (_jsxs(_Fragment, { children: [_jsx(StyledForwardedContentToggle, { variant: 'simple', icon: true, onClick: () => {
                                    setShowForwardedContent(prev => !prev);
                                }, label: showForwardedContent
                                    ? t('collapse_forwarded_message')
                                    : t('expand_forwarded_message'), compact: true, children: _jsx(Icon, { name: 'more-alt' }) }), showForwardedContent && _jsx(RichTextViewer, { content: forwardedContent, type: 'html' })] }))] }), secondaryFields.length > 0 && (_jsx(Flex, { container: {
                    pad: [0, 2]
                }, children: _jsx(StyledEmailSecondaryFieldValueList, { fields: secondaryFields }) }))] }));
});
export default Email;
//# sourceMappingURL=Email.js.map