import styled, { css } from 'styled-components';
import { mix, readableColor } from 'polished';
import { Button, calculateFontSize, defaultThemeProp, EmailDisplay, FieldValueList, MenuButton, StyledFieldName, StyledFieldValue, StyledSecondary, StyledSummaryItemActions, StyledVisual, tryCatch, readableHue, nlpColors, StyledPopover, StyledButton, StyledEmptyState } from '@pega/cosmos-react-core';
import { StyledBanner } from '@pega/cosmos-react-core/lib/components/Banner/Banner';
import { StyledEmailSummaryItem, StyledMessageAndDate } from './EmailSummaryItem';
export const StyledEmailMoreInfoButton = styled.button `
  min-height: 0.5rem;
  min-width: 0.5rem;
  flex-shrink: 0;
`;
export const StyledEmailHeader = styled.div(({ theme }) => {
    return css `
    grid-column-gap: ${theme.base.spacing};
    padding: 0 0 calc(2 * ${theme.base.spacing}) calc(2 * ${theme.base.spacing});
    ${StyledVisual},${StyledSummaryItemActions} {
      align-self: flex-start;
    }
    ${StyledSecondary} {
      margin-top: calc(0.5 * ${theme.base.spacing});
    }
  `;
});
StyledEmailHeader.defaultProps = defaultThemeProp;
export const StyledSuggestedRepliesButton = styled(Button)(({ theme }) => {
    return css `
    & + & {
      margin-inline-start: 0;
    }
    margin-block-start: ${theme.base.spacing};
    :not(:last-child) {
      margin-inline-end: ${theme.base.spacing};
    }
  `;
});
StyledSuggestedRepliesButton.defaultProps = defaultThemeProp;
export const StyledSuggestedRepliesMenuButton = styled(MenuButton)(({ theme }) => {
    return css `
    &&& {
      margin-inline-start: 0;
    }
    margin-block-start: ${theme.base.spacing};
    :not(:last-child) {
      margin-inline-end: ${theme.base.spacing};
    }
  `;
});
StyledSuggestedRepliesMenuButton.defaultProps = defaultThemeProp;
export const StyledEmailBody = styled.div ``;
export const StyledFromEmailDisplay = styled(EmailDisplay)(({ theme }) => {
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    font-weight: ${theme.base['font-weight']['semi-bold']};
    font-size: ${fontSize.m};
  `;
});
StyledFromEmailDisplay.defaultProps = defaultThemeProp;
export const StyledEmailDisplay = styled.span `
  font-size: inherit;
`;
export const StyledEmailPrimaryFieldValueList = styled(FieldValueList) `
  grid-template-columns: auto 1fr;
`;
export const StyledEmailSecondaryFieldValueList = styled(FieldValueList)(({ theme }) => {
    return css `
    grid-template-columns: 1fr;
    gap: 0;
    padding: ${theme.base.spacing} 0;
    ${StyledFieldValue}:not(:last-child) {
      margin-bottom: calc(2 * ${theme.base.spacing});
    }
    ${StyledFieldName} {
      margin-bottom: calc(0.25 * ${theme.base.spacing});
    }
  `;
});
StyledEmailSecondaryFieldValueList.defaultProps = defaultThemeProp;
export const StyledEmailMoreInfoPopover = styled.div `
  max-width: 30rem;
`;
StyledEmailMoreInfoPopover.defaultProps = defaultThemeProp;
export const StyledSecondarySeparator = styled.div(({ theme }) => {
    return css `
    margin: 0 calc(${theme.base.spacing} / 2);
  `;
});
StyledSecondarySeparator.defaultProps = defaultThemeProp;
export const StyledEmail = styled.div(({ theme }) => {
    const { base: { spacing } } = theme;
    return css `
    ${StyledBanner} {
      padding: 0 calc(2 * ${spacing}) calc(2 * ${spacing});
    }
  `;
});
StyledEmail.defaultProps = defaultThemeProp;
export const StyledEmailEntity = styled.mark(({ entity, theme }) => {
    const variant = entity.variant;
    const backgroundColor = readableHue(nlpColors[variant % nlpColors.length], theme.base.palette['primary-background']);
    const textColor = tryCatch(() => readableColor(backgroundColor));
    return css `
    border-radius: calc(${theme.base['border-radius']} / 3);
    padding: 0 calc(0.5 * ${theme.base.spacing});
    background-color: ${backgroundColor};
    color: ${textColor};
    display: inline-block;
  `;
});
StyledEmailEntity.defaultProps = defaultThemeProp;
export const StyledEntityList = styled(FieldValueList)(({ theme }) => {
    const textColor = tryCatch(() => readableColor(theme.base.palette['primary-background']));
    return css `
    ${StyledFieldName} {
      color: ${textColor};
    }
    ${StyledEmailEntity} {
      padding: 0 calc(0.5 * ${theme.base.spacing});
    }
  `;
});
StyledEntityList.defaultProps = defaultThemeProp;
export const StyledForwardedContentToggle = styled(Button) `
  align-self: flex-start;
`;
export const StyledLoadMore = styled.div(({ theme }) => {
    return css `
    margin: ${theme.base.spacing} 0;
    min-height: 2rem;
    min-width: 2rem;
  `;
});
StyledLoadMore.defaultProps = defaultThemeProp;
export const StyledContextMenuFieldSelector = styled.div(({ theme, selected }) => {
    const background = selected
        ? theme.base.colors.green.medium
        : theme.base.palette['primary-background'];
    const borderColor = selected
        ? theme.base.colors.green['extra-light']
        : theme.base.palette['primary-background'];
    return css `
    background-color: ${background};
    border: 0.0625rem solid ${borderColor};
    border-radius: 100%;
    display: inline-block;
    height: 0.625rem;
    width: 0.625rem;
    background-clip: content-box;
    padding: 0.0625rem;
  `;
});
StyledContextMenuFieldSelector.defaultProps = defaultThemeProp;
export const StyledEmailShellHeader = styled.header ``;
export const StyledEmailConversationList = styled.ul ``;
export const StyledEmailShell = styled.div(props => {
    const { theme: { base }, singleConversation } = props;
    return css `
      min-width: 30rem;
      height: 100%;
      border-radius: ${base['border-radius']};
      > ${StyledEmailShellHeader} {
        padding-inline: calc(2 * ${base.spacing}) ${base.spacing};
        padding-block: ${base.spacing};
        background: ${base.palette['primary-background']};
        border-radius: ${base['border-radius']};

        ${singleConversation &&
        `
          border-radius: ${base['border-radius']} ${base['border-radius']} 0 0;
          border-bottom: 0.0625rem solid ${base.palette['border-line']};
      `}
      }
      > ${StyledEmailConversationList} {
        height: 100%;
        overflow-y: auto;
        list-style-type: none;
      }
    `;
});
StyledEmailShell.defaultProps = defaultThemeProp;
export const StyledContextMenu = styled.div(({ theme }) => {
    return css `
    header {
      background-color: ${theme.base.palette['secondary-background']};
    }
  `;
});
StyledContextMenu.defaultProps = defaultThemeProp;
export const StyledList = styled.div(() => {
    return css `
    position: sticky;
  `;
});
StyledList.defaultProps = defaultThemeProp;
export const StyledHeader = styled.header(() => {
    return css `
    position: sticky;
    top: var(--appshell-offset);
    height: 4rem;
    padding-inline-start: 0;
  `;
});
export const StyledEmailCaseViewHeader = styled.header(() => {
    return css `
    top: var(--appshell-offset);
    height: 4rem;
    padding-inline-start: 0;
  `;
});
export const StyledUtilitiesContainer = styled.div(({ showExpandedUtilities }) => {
    return css `
      ${showExpandedUtilities
        ? css `
            flex-shrink: 0;
            max-width: 23rem;
          `
        : css `
            position: sticky;
            top: calc(var(--appshell-offset));
            height: fit-content;
          `}
    `;
});
export const StyledGridContainer = styled.div(({ theme, showExpandedUtilities, hasHeader }) => {
    return css `
    min-height: calc(100vh - var(--appshell-offset, 0rem));
    background-color: ${theme.base.palette['app-background']};
    ${hasHeader &&
        css `
      top: calc(var(--appshell-offset) + var(--headerOffsetHeight));
    `}
    ${!showExpandedUtilities &&
        css `
      width: auto;
    `}

    ${StyledList} {
      ${hasHeader
        ? css `
            top: calc(var(--appshell-offset) + var(--headerOffsetHeight));
            height: calc(100vh - var(--appshell-offset) - var(--headerOffsetHeight));
          `
        : css `
            top: calc(var(--appshell-offset));
            height: calc(100vh - var(--appshell-offset));
          `}
    }
    ${StyledUtilitiesContainer} {
      ${hasHeader &&
        css `
        top: calc(var(--appshell-offset) + 4rem);
      `}
    }
  `;
});
StyledGridContainer.defaultProps = defaultThemeProp;
export const StyledCollapsedUtilitiesToggle = styled.button(({ theme }) => {
    return css `
    color: ${theme.base.palette['foreground-color']};
    align-self: center;
  `;
});
StyledCollapsedUtilitiesToggle.defaultProps = defaultThemeProp;
export const StyledExpandedUtilitiesToggle = styled.button(({ theme }) => {
    return css `
    color: ${theme.base.palette['foreground-color']};
    align-self: flex-end;
    margin-inline-end: 0.375rem;
  `;
});
StyledExpandedUtilitiesToggle.defaultProps = defaultThemeProp;
export const StyledDrawerUtilitiesToggle = styled.button(({ theme }) => {
    return css `
    color: ${theme.base.palette['foreground-color']};
    align-self: end;
    margin-block-start: 3rem;
  `;
});
StyledDrawerUtilitiesToggle.defaultProps = defaultThemeProp;
export const StyledExpandedUtilities = styled.div(({ showExpandedUtilities }) => {
    return css `
      width: inherit;
      ${!showExpandedUtilities &&
        css `
        display: none;
      `}
    `;
});
export const StyledEmailActions = styled.div(() => {
    return css `
    ${StyledButton} + ${StyledButton} {
      margin-inline-start: 0;
    }
    ${StyledButton} + ${StyledPopover} + ${StyledButton} {
      margin-inline-start: 0;
    }
  `;
});
export const StyledUtilities = styled.div(({ showExpandedUtilities, theme }) => {
    return css `
      ${showExpandedUtilities &&
        css `
        width: 25rem;
      `}
      margin-inline-end: calc(2 * ${theme.base.spacing});
    `;
});
StyledUtilities.defaultProps = defaultThemeProp;
export const StyledEmailCaseViewColumns = styled.div(({ hasHeader }) => {
    return css `
    ${StyledEmptyState} {
      flex-grow: 1;
    }
    ${StyledEmailShell} {
      min-width: 0;
    }
    ${StyledUtilitiesContainer} {
      ${hasHeader &&
        css `
        top: calc(var(--appshell-offset) + 4rem);
      `}
    }
  `;
});
export const StyledEmailCaseViewDrawer = styled.div(({ theme }) => {
    return css `
    min-width: 21.875rem;
    max-width: 31.25rem;
    width: calc((100vw - 31.25rem) / 10 + 21.875rem);
    background-color: ${theme.base.palette['primary-background']};
    height: calc(100vh - 3rem);
    z-index: ${theme.base['z-index'].drawer - 1};
    top: 3rem;
  `;
});
StyledEmailCaseViewDrawer.defaultProps = defaultThemeProp;
export const StyledEmailCaseViewContainer = styled.div(({ theme }) => {
    return css `
    padding-inline: calc(2 * ${theme.base.spacing});
  `;
});
StyledEmailCaseViewContainer.defaultProps = defaultThemeProp;
export const StyledEmailManagerContainer = styled.div(({ theme }) => {
    return css `
    padding-inline: calc(2 * ${theme.base.spacing});
    ${StyledEmailCaseViewContainer} {
      padding-inline: 0;
    }
  `;
});
StyledEmailManagerContainer.defaultProps = defaultThemeProp;
export const StyledEmailCountIcon = styled.div(({ theme }) => {
    return css `
    position: absolute;
    inset-inline-start: calc(2.5 * ${theme.base.spacing});
    inset-block-start: calc(-0.5 * ${theme.base.spacing});
    padding-inline: calc(0.5 * ${theme.base.spacing});
  `;
});
StyledEmailCountIcon.defaultProps = defaultThemeProp;
export const StyledEmailSummaryList = styled.ol(({ theme }) => {
    return css `
    height: 100%;
    overflow-y: auto;

    &:focus-visible {
      outline: none;
    }

    &:focus {
      ${StyledEmailSummaryItem}[data-current='true'] {
        box-shadow: ${theme.base.shadow['focus-inset']};
      }
    }
  `;
});
StyledEmailSummaryList.defaultProps = defaultThemeProp;
export const StyledEmailNotificationList = styled(StyledEmailSummaryList)(({ theme }) => {
    const hoverColor = tryCatch(() => mix(0.85, theme.base.palette['primary-background'], theme.base.palette.interactive));
    return css `
    ${StyledEmailSummaryItem} {
      background-color: ${theme.components['app-shell'].nav['background-color']};
      &:hover,
      &:focus-within {
        background-color: ${hoverColor};
      }
    }
    ${StyledMessageAndDate} {
      flex-wrap: wrap;
    }
  `;
});
StyledEmailNotificationList.defaultProps = defaultThemeProp;
//# sourceMappingURL=Email.styles.js.map