import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { Popover, Menu, Text, useI18n } from '@pega/cosmos-react-core';
import { StyledEmailMoreInfoPopover, StyledContextMenuFieldSelector, StyledContextMenu } from './Email.styles';
const ContextMenuPopover = forwardRef(function ContextMenuPopover({ cursorPosition, contextMenu, targetNode, show }, ref) {
    const t = useI18n();
    const selection = document.getSelection();
    const targetElement = targetNode instanceof Element ? targetNode : targetNode?.parentElement;
    if (targetElement && targetElement.tagName.toLowerCase() === 'mark') {
        selection?.removeAllRanges();
    }
    if (selection && !selection.toString() && targetNode) {
        const range = document.createRange();
        range.selectNodeContents(targetNode);
        selection?.removeAllRanges();
        selection.addRange(range);
    }
    const { onItemClick, items } = contextMenu;
    const onItemSelect = (contextMenuItemId, e) => {
        e.stopPropagation();
        const selectedcontextMenuItem = items.find(({ id }) => id === contextMenuItemId);
        if (selectedcontextMenuItem && selection) {
            onItemClick({
                fieldName: selectedcontextMenuItem.primary,
                fieldValue: selection.toString()
            });
        }
    };
    const itemsToRender = items.map(item => {
        return {
            ...item,
            visual: item.selected ? (_jsx(StyledContextMenuFieldSelector, { selected: true })) : (_jsx(StyledContextMenuFieldSelector, {}))
        };
    });
    return (_jsx(Popover, { as: StyledEmailMoreInfoPopover, target: {
            getBoundingClientRect: () => {
                const { x, y } = cursorPosition;
                return {
                    width: 0,
                    height: 0,
                    top: y,
                    right: x,
                    bottom: y,
                    left: x,
                    x,
                    y,
                    toJSON: () => { }
                };
            }
        }, show: show, placement: 'bottom', ref: ref, children: _jsx(StyledContextMenu, { children: _jsx(Menu, { ...contextMenu, header: _jsx(Text, { variant: 'h5', children: t('copy_to') }), items: itemsToRender, onItemClick: onItemSelect }) }) }));
});
export default ContextMenuPopover;
//# sourceMappingURL=ContextMenuPopover.js.map