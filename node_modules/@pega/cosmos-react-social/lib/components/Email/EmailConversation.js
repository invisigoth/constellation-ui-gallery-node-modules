import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useRef, useState, useMemo } from 'react';
import styled, { css } from 'styled-components';
import { mix, readableColor } from 'polished';
import * as caretDownIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/caret-down.icon';
import { ExpandCollapse, Flex, Icon, registerIcon, Text, useI18n, defaultThemeProp, useAfterInitialEffect, DateTimeDisplay, readableHue, useBreakpoint, useConfiguration, StyledIcon, tryCatch, useDirection, Status } from '@pega/cosmos-react-core';
import Email from './Email';
registerIcon(caretDownIcon);
const EmailParticipantTextCss = css `
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
`;
export const StyledEmailParticipantsText = styled(Text) `
  ${EmailParticipantTextCss}
`;
StyledEmailParticipantsText.defaultProps = defaultThemeProp;
export const StyledCompactTimeStampDisplay = styled(Text) `
  ${EmailParticipantTextCss}
  margin-top: calc(${props => props.theme.base.spacing} / 2);
`;
StyledCompactTimeStampDisplay.defaultProps = defaultThemeProp;
export const StyledConversationHeader = styled.header(({ theme: { base: { palette } }, collapsed }) => {
    return css `
      border-bottom: ${collapsed ? 0 : '0.0625rem'} solid ${palette['border-line']};
      position: sticky;
      top: 0;
      z-index: 1;
    `;
});
StyledConversationHeader.defaultProps = defaultThemeProp;
export const StyledUnReadCount = styled.div(({ theme: { base: { spacing, palette, 'font-weight': { 'semi-bold': fontWeightSemiBold } } } }) => {
    const readableBackground = readableHue(palette['brand-primary'], palette['primary-background']);
    const readableTextColor = readableColor(readableBackground);
    return css `
      align-self: flex-start;
      background-color: ${readableBackground};
      color: ${readableTextColor};
      padding: 0 ${spacing};
      font-weight: ${fontWeightSemiBold};
      width: fit-content;
    `;
});
StyledUnReadCount.defaultProps = defaultThemeProp;
export const StyledEmailConversation = styled.li(({ theme: { base: { spacing, palette, 'border-radius': baseBorderRadius } }, singleConversation, showHeader }) => {
    return css `
      margin-bottom: ${spacing};
      border-radius: ${singleConversation && showHeader
        ? `0 0 ${baseBorderRadius} ${baseBorderRadius}`
        : baseBorderRadius};
      overflow: hidden;
      background-color: ${palette['primary-background']};
      list-style-type: none;
    `;
});
StyledEmailConversation.defaultProps = defaultThemeProp;
export const StyledEmailInConversation = styled(Email)(({ unRead, theme: { base: { spacing, palette } } }) => {
    const readableBackground = readableHue(palette['brand-primary'], palette['primary-background']);
    return css `
      padding: calc(2 * ${spacing}) 0;
      position: relative;
      :not(:last-child) {
        border-bottom: 0.0625rem solid ${palette['border-line']};
      }
      ${unRead &&
        css `
        &::before {
          content: '';
          background-color: ${readableBackground};
          position: absolute;
          inset: 0;
          height: calc(100% + 0.0625rem);
          top: -0.0625rem;
          width: 0.125rem;
        }
      `}
    `;
});
StyledEmailInConversation.defaultProps = defaultThemeProp;
const StyledUnreadIndicator = styled.span(({ theme: { base: { palette } }, isVisible }) => {
    const readableBackground = readableHue(palette['brand-primary'], palette['primary-background']);
    const diameter = '0.375rem';
    return css `
      width: ${isVisible ? diameter : 0};
      margin: 0 ${isVisible ? 0 : '0.188rem'};
      height: ${diameter};
      display: inline-block;
      border-radius: 50%;
      background: ${readableBackground};
      position: relative;
      top: 0.375rem;
      align-self: flex-start;
    `;
});
StyledUnreadIndicator.defaultProps = defaultThemeProp;
const StyledConversationButton = styled.button(({ theme: { base: { spacing, palette } } }) => {
    const hoverColor = tryCatch(() => mix(0.85, palette['primary-background'], palette['brand-primary']));
    return css `
      border-width: 0;
      width: 100%;
      padding: ${spacing};
      background: ${palette['primary-background']};
      color: ${palette['foreground-color']};
      position: sticky;
      top: 0;
      z-index: 1;

      &[aria-expanded='true'] {
        border-bottom: 0.0625rem solid ${palette['border-line']};
      }

      &:focus {
        background: ${palette['secondary-background']};
        outline: none;
      }

      &:hover {
        background: ${hoverColor};
        outline: none;
      }

      & > ${StyledIcon} {
        align-self: flex-start;
      }
    `;
});
StyledConversationButton.defaultProps = defaultThemeProp;
const EmailConversation = forwardRef(function EmailConversation(props, ref) {
    const { id, emails, from, to, unReadEmailCount, timeStamp, isForwarded = false, isCollapsed = false, onCollapse, onExpand, undelivered, drafts, ...restProps } = props;
    const t = useI18n();
    const [collapsedState, setCollapsedState] = useState(isCollapsed);
    useAfterInitialEffect(() => {
        setCollapsedState(isCollapsed);
    }, [isCollapsed]);
    const onExpandCollapse = () => {
        setCollapsedState(!collapsedState);
    };
    const headerRef = useRef(null);
    const isSmallOrAbove = useBreakpoint('sm', {
        breakpointRef: headerRef,
        themeProp: 'content-width'
    });
    const { locale } = useConfiguration();
    const { rtl } = useDirection();
    const caretDirection = rtl ? 'caret-left' : 'caret-right';
    const generateRecipientList = useMemo(() => {
        const recipientElements = to.slice(0, 2).map((recipient, i) => {
            return `${recipient.shortName}${i < to.length - 1 ? ';' : ''} `;
        });
        if (to.length > 2) {
            return [...recipientElements, `+${to.length - 2} more`];
        }
        return recipientElements;
    }, [to]);
    return (_jsxs(StyledEmailConversation, { ...restProps, id: id, ref: ref, children: [_jsxs(Flex, { as: StyledConversationButton, id: `conversation-heading${id}`, "aria-controls": id, "aria-expanded": !collapsedState, container: { gap: 1, alignItems: 'center', pad: 1 }, onClick: onExpandCollapse, ref: headerRef, children: [_jsx(Icon, { name: collapsedState ? caretDirection : 'caret-down' }), _jsx(StyledUnreadIndicator, { isVisible: !!unReadEmailCount }), _jsxs(Flex, { container: {
                            wrap: 'nowrap',
                            alignItems: 'start',
                            direction: 'column'
                        }, item: {
                            grow: 1,
                            shrink: 1
                        }, children: [_jsxs(Flex, { container: { gap: 1 }, children: [_jsx(Text, { variant: 'primary', as: StyledEmailParticipantsText, children: `${isForwarded ? 'FW' : t('from')}: ${from.fullName}` }), (undelivered || drafts) && (_jsxs(_Fragment, { children: [undelivered && _jsx(Status, { variant: 'urgent', children: t('undelivered') }), drafts && (_jsx(Status, { variant: 'pending', children: t('draft', [], { count: Infinity }) }))] }))] }), _jsxs(Text, { variant: 'secondary', as: StyledEmailParticipantsText, children: [`${t('to')}: `, generateRecipientList] }), !isSmallOrAbove && (_jsxs(Text, { variant: 'secondary', as: StyledCompactTimeStampDisplay, children: [`${new Intl.DateTimeFormat(locale, { weekday: 'short' }).format(new Date(timeStamp))}, `, _jsx(DateTimeDisplay, { variant: 'datetime', format: 'short', value: timeStamp })] }))] }), _jsx(Flex, { container: {
                            gap: 1,
                            alignItems: 'center'
                        }, item: {
                            shrink: 0
                        }, children: isSmallOrAbove && (_jsxs(Text, { variant: 'secondary', as: StyledEmailParticipantsText, children: [`${new Intl.DateTimeFormat(locale, { weekday: 'short' }).format(new Date(timeStamp))}, `, _jsx(DateTimeDisplay, { variant: 'datetime', format: 'short', value: timeStamp })] })) })] }), _jsxs(ExpandCollapse, { as: Flex, container: { direction: 'column' }, collapsed: collapsedState, onBeforeCollapse: onCollapse, onBeforeExpand: onExpand, role: 'region', "aria-labelledby": `conversation-heading${id}`, id: `conversation-content${id}`, children: [!!unReadEmailCount && (_jsx(Text, { as: StyledUnReadCount, id: `unread-emailCount-${id}`, variant: 'secondary', children: t('new_emails_count', [unReadEmailCount], { count: unReadEmailCount }) })), emails &&
                        emails.map(email => {
                            return _jsx(StyledEmailInConversation, { ...email }, email.id);
                        })] })] }));
});
export default EmailConversation;
//# sourceMappingURL=EmailConversation.js.map