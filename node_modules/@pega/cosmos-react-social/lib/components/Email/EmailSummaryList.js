import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createRef, useMemo, useState, useEffect, forwardRef, useCallback } from 'react';
import styled, { css } from 'styled-components';
import { Button, Count, defaultThemeProp, Flex, Icon, registerIcon, MenuButton, useConsolidatedRef, useI18n, menuHelpers, Progress, useItemIntersection, usePrevious, VisuallyHiddenText, EmptyState, calculateFontSize, StyledText, useArrows, debounce } from '@pega/cosmos-react-core';
import * as filterIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/filter.icon';
import EmailSummaryItem from './EmailSummaryItem';
import { StyledEmailSummaryList, StyledLoadMore } from './Email.styles';
registerIcon(filterIcon);
const StyledEmailSummaryListContainer = styled(Flex)(({ theme }) => {
    return css `
    height: 100%;
    background-color: ${theme.base.palette['primary-background']};
  `;
});
StyledEmailSummaryListContainer.defaultProps = defaultThemeProp;
const StyledEmailSummaryListHeader = styled.div(({ theme }) => {
    return css `
    padding: calc(2 * ${theme.base.spacing}) calc(2 * ${theme.base.spacing}) ${theme.base.spacing};
  `;
});
StyledEmailSummaryListHeader.defaultProps = defaultThemeProp;
const StyledActionWrapper = styled(Flex)(({ theme }) => {
    return css `
    padding-block-start: ${theme.base.spacing};
  `;
});
StyledActionWrapper.defaultProps = defaultThemeProp;
const StyledFilterButton = styled(Button) `
  margin-inline-start: auto;
`;
const StyledWorklist = styled(MenuButton)(({ theme }) => {
    const { 'font-size': fontSize, 'font-scale': fontScale } = theme.base;
    const fontSizes = calculateFontSize(fontSize, fontScale);
    return css `
    ${StyledText} {
      font-weight: ${theme.base['font-weight']['semi-bold']};
      font-size: ${fontSizes.m};
    }
  `;
});
StyledWorklist.defaultProps = defaultThemeProp;
const EmailSummaryList = forwardRef(function EmailSummaryList({ loading = false, onLoadMore, categories, onCategoryClick, items, unreadEmailCount, filters, onFilterChange, onItemClick, emptyMessage, currentItemId, selectable = true, ...restProps }, ref) {
    const t = useI18n();
    const tablistRef = useConsolidatedRef(ref);
    const tabRefs = items.map(() => createRef());
    const prevEmail = usePrevious(items);
    const [announcement, setAnnouncement] = useState('');
    useArrows(tablistRef, {
        cycle: true,
        selector: ':scope > li',
        dir: 'up-down',
        updateTabIndex: false
    }, [items]);
    const buttonText = useMemo(() => {
        if (categories)
            return (menuHelpers.getSelected(categories)[0]?.primary ??
                menuHelpers.flatten(categories)[0].primary);
    }, [categories]);
    const handleLoadMore = useCallback(debounce(() => {
        if (!loading) {
            onLoadMore?.();
        }
    }, 200), [loading]);
    useItemIntersection(tablistRef, items.length - 1, handleLoadMore, ':scope > li');
    useEffect(() => {
        if (loading)
            setAnnouncement(t('loading_email'));
    }, [loading]);
    useEffect(() => {
        if (prevEmail) {
            const difference = items.length - prevEmail.length;
            if (difference)
                setAnnouncement(t('new_emails_count', [difference], { count: difference }));
        }
    }, [items]);
    useEffect(() => {
        if (tabRefs.length > 0 && currentItemId) {
            tabRefs[items.findIndex(item => item.id === currentItemId)]?.current?.focus();
        }
    }, [currentItemId]);
    return (_jsxs(StyledEmailSummaryListContainer, { container: { direction: 'column' }, ...restProps, children: [categories && (_jsx(StyledEmailSummaryListHeader, { children: _jsxs(StyledActionWrapper, { container: { justify: 'space-between', alignItems: 'center', gap: 0.5 }, children: [_jsx(Flex, { item: { shrink: 1 }, children: _jsx(StyledWorklist, { text: buttonText, variant: 'text', popover: { portal: true }, menu: {
                                    mode: 'single-select',
                                    items: categories,
                                    onItemClick: onCategoryClick
                                } }) }), typeof unreadEmailCount === 'number' && (_jsx(Count, { "aria-label": t('unread_email_count', [unreadEmailCount], {
                                count: unreadEmailCount
                            }), children: unreadEmailCount })), filters && (_jsx(StyledFilterButton, { variant: 'simple', label: t('email_filters'), icon: true, children: _jsx(Icon, { name: 'filter' }) }))] }) })), items.length > 0 ? (_jsxs(Flex, { role: selectable ? 'tablist' : undefined, container: { direction: 'column' }, as: StyledEmailSummaryList, ref: tablistRef, children: [_jsx(VisuallyHiddenText, { "aria-live": 'polite', children: announcement }), items.map((emailItem, i) => {
                        const { id, ...emailItemProps } = emailItem;
                        return (_jsx(EmailSummaryItem, { ref: tabRefs[i], id: id, ...emailItemProps, onSelect: (selectedItemId) => {
                                onItemClick(selectedItemId);
                            }, role: selectable ? 'tab' : undefined, active: selectable ? currentItemId === id : undefined }, id));
                    }), loading && (_jsx(Flex, { container: { justify: 'center' }, as: StyledLoadMore, children: _jsx(Progress, { placement: 'inline' }) }))] })) : (_jsx(EmptyState, { message: emptyMessage }))] }));
});
export default EmailSummaryList;
//# sourceMappingURL=EmailSummaryList.js.map