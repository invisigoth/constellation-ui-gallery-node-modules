import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useState, useMemo, useRef } from 'react';
import { Button, Drawer, Flex, Icon, useBreakpoint, useDirection, useI18n, Text } from '@pega/cosmos-react-core';
import UtilitiesSummary from '@pega/cosmos-react-work/lib/components/CaseView/UtilitiesSummary';
import { StyledCaseDrawerContent } from '@pega/cosmos-react-work';
import { StyledPageIcon } from '@pega/cosmos-react-core/lib/components/PageTemplates/PageTemplates';
import { StyledEmailCaseViewColumns, StyledExpandedUtilities, StyledUtilitiesContainer, StyledCollapsedUtilitiesToggle, StyledExpandedUtilitiesToggle, StyledDrawerUtilitiesToggle, StyledEmailCaseViewDrawer, StyledEmailCaseViewHeader, StyledEmailCaseViewContainer } from './Email.styles';
const EmailCaseView = ({ header, content, banners, utilities, utilitiesSummaryItems, defaultUtilitiesExpanded, ...restProps }) => {
    const direction = useDirection();
    const t = useI18n();
    const emailCaseRef = useRef(null);
    const [showExpandedUtilities, setShowExpandedUtilities] = useState(defaultUtilitiesExpanded || false);
    const isMediumOrAbove = useBreakpoint('md', { breakpointRef: emailCaseRef });
    const utilitiesIcon = showExpandedUtilities
        ? `move-${direction.end}-solid`
        : `move-${direction.start}-solid`;
    const onToggleUtilities = useCallback((e) => {
        if (e.type === 'keydown' && e.key !== 'Enter') {
            return;
        }
        setShowExpandedUtilities(prevState => !prevState);
    }, []);
    const expandedUtilities = useMemo(() => {
        if (!utilities) {
            return null;
        }
        const largeScreenUtility = (_jsxs(_Fragment, { children: [showExpandedUtilities && (_jsx(Button, { variant: 'simple', icon: true, onClick: onToggleUtilities, as: StyledExpandedUtilitiesToggle, label: t(showExpandedUtilities ? 'collapse_utilities_panel' : 'expand_utilities_panel'), children: _jsx(Icon, { name: utilitiesIcon }) })), _jsx(Flex, { as: StyledExpandedUtilities, container: { direction: 'column', gap: 2 }, showExpandedUtilities: showExpandedUtilities, children: utilities })] }));
        const smallScreenUtilities = (_jsx(Drawer, { as: StyledEmailCaseViewDrawer, open: showExpandedUtilities, position: 'fixed', placement: direction.end, shadow: true, nullWhenClosed: true, children: _jsxs(Flex, { as: StyledCaseDrawerContent, container: { direction: 'column', gap: 2 }, children: [_jsx(Flex, { container: { justify: 'end' }, children: _jsx(Button, { variant: 'simple', icon: true, onClick: onToggleUtilities, as: StyledDrawerUtilitiesToggle, label: t('collapse_utilities_panel'), children: _jsx(Icon, { name: `move-${direction.end}-solid` }) }) }), utilities] }) }));
        return isMediumOrAbove ? largeScreenUtility : smallScreenUtilities;
    }, [isMediumOrAbove, onToggleUtilities, showExpandedUtilities, utilities]);
    return (_jsxs(StyledEmailCaseViewContainer, { ...restProps, ref: emailCaseRef, children: [header && (_jsxs(Flex, { container: { alignItems: 'center', pad: [0, 0, 0, 2], gap: 1 }, as: StyledEmailCaseViewHeader, children: [header.icon && (_jsx(StyledPageIcon, { container: { alignItems: 'center', justify: 'center' }, children: _jsx(Icon, { name: header.icon }) })), _jsx(Text, { variant: 'h1', children: header.title })] })), _jsxs(Flex, { container: { gap: 2 }, as: StyledEmailCaseViewColumns, hasHeader: !!header, children: [_jsxs(Flex, { container: { gap: 1, direction: 'column' }, item: { grow: 1 }, children: [banners && _jsx("div", { children: banners }), content && _jsx("div", { children: content })] }), (utilities || utilitiesSummaryItems) && (_jsxs(Flex, { container: { direction: 'column', alignItems: 'end', gap: 2 }, as: StyledUtilitiesContainer, showExpandedUtilities: showExpandedUtilities, children: [expandedUtilities, !showExpandedUtilities && (_jsx(Button, { variant: 'simple', icon: true, onClick: onToggleUtilities, as: StyledCollapsedUtilitiesToggle, "aria-expanded": showExpandedUtilities ? 'true' : 'false', label: t(showExpandedUtilities ? 'collapse_utilities_panel' : 'expand_utilities_panel'), children: _jsx(Icon, { name: utilitiesIcon }) })), !showExpandedUtilities &&
                                utilitiesSummaryItems &&
                                utilitiesSummaryItems.length > 0 && (_jsx(UtilitiesSummary, { items: utilitiesSummaryItems }))] }))] })] }));
};
export default EmailCaseView;
//# sourceMappingURL=EmailCaseView.js.map