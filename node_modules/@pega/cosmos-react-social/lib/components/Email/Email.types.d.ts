import { ReactNode, Ref, MouseEvent, MouseEventHandler } from 'react';
import { UtilitiesSummaryProps } from '@pega/cosmos-react-work/lib/components/CaseView/UtilitiesSummary';
import { BaseProps, AvatarProps, SentimentProps, FileDisplayProps, FileUploadItemProps, OmitStrict, MenuProps, MenuItemProps, TooltipProps, NoChildrenProp, EmptyStateProps, ProgressProps, PageTemplateProps, PopoverProps, BannerProps } from '@pega/cosmos-react-core';
import { EditorProps, EditorState, RichTextEditorProps } from '@pega/cosmos-react-rte';
export interface EmailTemplate {
    /** Template title */
    title: string;
    /** Template id */
    id: string;
    /** categorized templates */
    templates?: Pick<EmailTemplate, 'title' | 'id'>[];
}
export interface EmailUser {
    /** Short name of the User */
    shortName: string;
    /** Full name of the User */
    fullName: string;
    /** Email of the User */
    emailAddress: string;
    /** Avatar props of the User */
    avatarProps?: Partial<AvatarProps>;
}
export interface EntityHighlightMapping {
    value: string;
    type: string;
    variant: number;
    names?: string[];
    icon?: string;
}
export interface EntityMatch extends EntityHighlightMapping, MatchRange {
    matchedText: string;
    children?: EntityMatch[];
}
export interface MatchRange {
    start: number;
    end: number;
}
export interface ContextMenuProps extends Pick<MenuProps, 'loading'> {
    /** Callback triggered when a menu item is clicked */
    onItemClick: (selectedValue: {
        fieldName: string;
        fieldValue: string;
    }) => void;
    /** Menu items */
    items: MenuItemProps[];
    /** Imperative handle */
    handle: Ref<ContextMenuHandleValue>;
}
export interface ContextMenuHandleValue {
    setItems: (contextMenuItems: ContextMenuProps['items']) => void;
    setOpen: (open: boolean) => void;
    setLoading: (loading: boolean) => void;
}
export interface EmailProps extends BaseProps, NoChildrenProp {
    /** Ref to the element */
    ref?: Ref<HTMLDivElement>;
    /** Unique ID for this email record */
    id: string;
    /** Timestamp of this email as ISO8601 string, timestamp or native Date object. */
    timeStamp: Date | number | string;
    /** From email */
    from: EmailUser;
    /** To email */
    to: EmailUser[];
    /** Carbon copy of email users list */
    cc?: EmailUser[];
    /** Blind carbon copy of email users list */
    bcc?: EmailUser[];
    /** Sentiment */
    sentiment?: SentimentProps;
    /** Subject of the email */
    subject?: string;
    /** Body */
    body?: string;
    /** Forwarded content */
    forwardedContent?: string;
    /**
     * Entity highlight mapping
     * This requires body to be passed as a string with html tags
     */
    entityHighlightMapping?: EntityHighlightMapping[];
    /** onReply callback */
    onReply?: (id: EmailProps['id']) => void;
    /** onForward Callback */
    onForward?: (id: EmailProps['id']) => void;
    /** onReply callback */
    onReplyAll?: (id: EmailProps['id']) => void;
    /** Edit draft callback */
    onEditDraft?: (id: EmailProps['id']) => void;
    /** Delete draft Callback */
    onDeleteDraft?: (id: EmailProps['id']) => void;
    /** Show either undelivered or draft status on email */
    status?: 'undelivered' | 'draft';
    /** List of suggestions */
    suggestions?: EmailTemplate[];
    /** Callback that triggers on click of tag */
    onSuggestionClick?: (id: EmailProps['id'], suggestionId: EmailTemplate['id']) => void;
    /** Flag that indicates if email is unread
     * @default false
     */
    unRead?: boolean;
    /** Attachments list */
    attachments?: FileDisplayProps[];
    /**
     * Context menu props. Context menu is disabled if it is not provided.
     * To set the context menu items, use the setContextMenuItems method provided on handle
     */
    contextMenu?: OmitStrict<ContextMenuProps, 'items' | 'loading'> & {
        /** Callback on right click of content */
        onContextMenu: (id: EmailProps['id'], e: MouseEvent) => void;
    };
    /** Show banner for undelivered email */
    banner?: Pick<BannerProps, 'messages'>;
}
export interface EmailConversationProps extends BaseProps {
    /** ref to the element */
    ref?: Ref<HTMLLIElement>;
    /** Unique ID for this email conversation record */
    id: string;
    /** List of mails */
    emails: EmailProps[];
    /** Sender(s) of this email conversation */
    from: EmailUser;
    /** Recipient(s) of this email conversation */
    to: EmailUser[];
    /** Count of unread emails */
    unReadEmailCount?: number;
    /** Timestamp of this conversation as ISO8601 string, timestamp or native Date object. */
    timeStamp: Date | string | number;
    /** Flag that indicates if email conversation is expanded */
    isCollapsed?: boolean;
    /** Flag to set if conversation is spun off from forwarded email */
    isForwarded?: boolean;
    /** Callback when email conversation is collapsed */
    onCollapse?: () => void;
    /** Callback when email conversation is expanded */
    onExpand?: () => void;
    /** Flag that indicates if email conversation contains drafted emails */
    drafts?: boolean;
    /** Flag that indicates if email conversation contains undelivered emails */
    undelivered?: boolean;
}
export type EmailResponseType = 'reply' | 'replyAll' | 'forward';
export type EmailComposerFieldType = 'to' | 'cc' | 'bcc' | 'subject' | 'bodyContent' | 'attachments' | 'emailAccount' | 'responseType' | 'selectedTemplateId';
export type EmailComposerValueType<T> = T extends 'to' | 'cc' | 'bcc' ? EmailUser['emailAddress'][] : T extends 'subject' | 'bodyContent' ? string : T extends 'selectedTemplateId' ? string : T extends 'attachments' ? FileUploadItemProps[] : T extends 'responseType' ? EmailResponseType : T extends 'emailAccount' ? string : never;
export interface EmailDirectRecipients {
    /** To address/addresses in case of reply response type on email. */
    reply: EmailUser['emailAddress'][];
    /** To address/addresses in case of replyAll response type on email. */
    replyAll: EmailUser['emailAddress'][];
    /** To address/addresses in case of forward response type on email. */
    forward?: EmailUser['emailAddress'][];
}
export interface EmailComposerHandleValue {
    replaceBodyContent: (content: string) => void;
    updateImage: EditorState['appendImage'];
    activate: () => void;
    setCursorLocationToStart: EditorState['setCursorLocationToStart'];
}
export interface EmailComposerProps extends Pick<EmailProps, 'suggestions' | 'onSuggestionClick'>, BaseProps, NoChildrenProp {
    /** Show loader until the background process completes */
    progress?: boolean | Pick<ProgressProps, 'message'>;
    /** Object containing full list of email participants. */
    participants: EmailUser[];
    /** Object containing full list of sender email accounts */
    senderAccounts?: EmailUser[];
    /** Data for all fields of the composer */
    data: {
        /** Object to hold selected email account and field error */
        emailAccount?: {
            value: EmailUser['emailAddress'];
            error?: string;
        };
        /** Object to hold to address/addresses and field error */
        to?: {
            value: EmailUser['emailAddress'][];
            error?: string;
        };
        /** Object to hold Cc address/addresses and field error */
        cc?: {
            value: EmailUser['emailAddress'][];
            error?: string;
        };
        /** Object to hold Bcc address/addresses  and field error */
        bcc?: {
            value: EmailUser['emailAddress'][];
            error?: string;
        };
        /** Object to hold the subject value and error */
        subject: {
            value: string;
            error?: string;
        };
        /** Object containing the default body content and error */
        bodyContent: {
            defaultValue: string;
            error?: string;
        };
        /** Selected template id */
        selectedTemplateId?: EmailTemplate['id'];
        /** List of attachments */
        attachments?: FileUploadItemProps[];
        /** Email response types */
        responseType?: EmailResponseType;
    };
    /** Callback when user clicks on the send button */
    onSend: () => void;
    /** Callback when user clicks on the save button */
    onSave?: () => void;
    /** Callback when image is added */
    onImageAdded?: RichTextEditorProps['onImageAdded'];
    /** Region to show more actions in footer */
    footerMoreActions?: ReactNode;
    /** Templates for drafting email */
    templates?: EmailTemplate[];
    /** Callback when user clicks on cancel */
    onCancel: () => void;
    /**
     * Callback to handle external entry validation for to, cc and bcc fields while adding a new email to the list
     * If returned true considers the entry to be a valid entry
     */
    externalValidator?: (value: string) => boolean;
    /** Ref to the element */
    ref?: Ref<HTMLDivElement>;
    /** Imperative handle for composer */
    handle?: Ref<EmailComposerHandleValue>;
    /** Change handler to all fields */
    onChange: <T extends EmailComposerFieldType>(field: T, value: EmailComposerValueType<T>) => void;
    /** Callback when composer body editor is initialized */
    onEditorInit?: EditorProps['onInit'];
}
export interface EmailShellProps extends BaseProps {
    /** ref to the element */
    ref?: Ref<HTMLDivElement>;
    /** Region for header */
    headerProps?: {
        /** Region for actions */
        actions?: ReactNode;
        /** Subject of the email conversations list */
        subject?: string;
    };
    /** Email conversations */
    conversations?: EmailConversationProps[];
    /** Shows only one conversation at a time */
    autoCollapse?: boolean;
}
export interface EmailSummaryItemProps extends BaseProps {
    /** Id of each summary item */
    id: string;
    /** List of from participant names of the conversations */
    activeParticipants: EmailUser[];
    /** Email body of last email in the email */
    message: string;
    /** Timestamp of the latest email */
    timeStamp: Date | string | number;
    /** Top topic of an email */
    topic?: string;
    /** Sentiment */
    sentiment?: SentimentProps;
    /** Urgency of an email */
    urgency?: number;
    /** Total number of unread emails in the email */
    unreadEmailCount?: number;
    /** Is the email currently active */
    active?: boolean;
    /** On click of email item */
    onSelect: (id: EmailSummaryItemProps['id']) => void;
    /** Flag that indicates if email summary item contains drafted emails */
    drafts?: EmailConversationProps['drafts'];
    /** Flag that indicates if email summary item contains undelivered emails */
    undelivered?: EmailConversationProps['undelivered'];
    /** ref to the element */
    ref?: Ref<HTMLLIElement>;
}
export interface Filter {
    /** Sets DOM id for the control and associates label element via 'for' attribute. */
    id: string;
    /** Pass a string or a fragment with an Icon and string for the filter label. */
    label: ReactNode;
    /**
     * Disables the filter.
     * @default false
     */
    disabled?: boolean;
    /**
     * Sets on prop via onFilterChange.
     * @default false
     */
    on?: boolean;
}
export interface EmailSummaryListProps extends BaseProps {
    /** List of email categories */
    categories?: MenuProps['items'];
    /** Handles category change */
    onCategoryClick?: MenuItemProps['onClick'];
    /** List of EmailItems items */
    items: OmitStrict<EmailSummaryItemProps, 'onSelect' | 'active'>[];
    /** Total number of unread email count */
    unreadEmailCount?: number;
    /** A set of filters to apply to the email inbox. */
    filters?: Filter[];
    /** A callback that runs when a filter is clicked. */
    onFilterChange?: (filterId: Filter['id'], on: boolean) => void;
    /** onClick of list item */
    onItemClick: (id: EmailSummaryItemProps['id']) => void;
    /** Indicates if the data is being currently loading */
    loading?: boolean;
    /** Callback to fetch more rows */
    onLoadMore?: () => void;
    /** Empty message when there are no email summary items */
    emptyMessage?: EmptyStateProps['message'];
    /** Id of the EmailSummaryItem */
    currentItemId?: string;
    /** Use summary list as selectable list */
    selectable?: boolean;
    /** ref to the element */
    ref?: Ref<HTMLOListElement>;
}
export interface EmailEntityProps extends BaseProps {
    entity: OmitStrict<EntityHighlightMapping, 'names'> & {
        description?: TooltipProps['children'];
    };
    ref?: Ref<HTMLElement>;
}
export interface TargetProps {
    cursorPosition: {
        x: number;
        y: number;
    };
    targetNode: Node | null;
}
export interface ContextMenuPopoverProps extends BaseProps, TargetProps {
    contextMenu: ContextMenuProps;
    show: PopoverProps['show'];
    ref?: PopoverProps['ref'];
}
export interface EntityListProps extends BaseProps {
    content: {
        name: string;
        value?: {
            id: string;
            entity: OmitStrict<EntityHighlightMapping, 'names'>;
        }[];
    }[];
    header?: {
        icon: string;
        text: string;
    };
    /**
     * Context menu props. Context menu is disabled if it is not provided.
     * To set the context menu items, use the setContextMenuItems method provided on handle
     */
    contextMenu?: OmitStrict<ContextMenuProps, 'items' | 'loading'> & {
        onContextMenu: (e: MouseEvent) => void;
        popoverRef?: ContextMenuPopoverProps['ref'];
    };
    ref?: Ref<HTMLDivElement>;
}
export interface EmailManagerProps extends BaseProps {
    /** Header of the component */
    header?: {
        title: PageTemplateProps['title'];
        icon?: PageTemplateProps['icon'];
    };
    /** A region to hold an EmailSummaryList component */
    list?: ReactNode;
    /** Email case details */
    emailCaseDetails?: ReactNode;
}
export interface EmailCaseViewProps extends BaseProps {
    /** Header of the the component */
    header?: EmailManagerProps['header'];
    /** A region to hold an Emails component */
    content: ReactNode;
    /** A region above the center column to display banners. */
    banners?: ReactNode;
    /** A region that is used to hold Utility components. */
    utilities?: ReactNode;
    /** The utilities summary array will be used to render the minimized utilities card. */
    utilitiesSummaryItems?: UtilitiesSummaryProps['items'];
    /** Expand/Collapse utilities */
    defaultUtilitiesExpanded?: boolean;
}
export interface EmailNotificationPanelProps extends BaseProps {
    count: number;
    label: string;
    onClick: MouseEventHandler;
}
//# sourceMappingURL=Email.types.d.ts.map