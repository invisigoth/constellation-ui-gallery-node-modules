import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useMemo } from 'react';
import styled, { css } from 'styled-components';
import { mix } from 'polished';
import { defaultThemeProp, Text, Flex, Count, Sentiment, MetaList, DateTimeDisplay, Status, tryCatch, useI18n } from '@pega/cosmos-react-core';
import { StyledMetaList } from '@pega/cosmos-react-core/lib/components/MetaList/MetaList';
const StyledMessage = styled(Flex)(({ unreadEmailCount, theme }) => {
    return css `
    width: ${theme.base['content-width'].md};
    text-align: start;
    text-overflow: ellipsis;
    overflow: hidden;
    margin-inline-end: ${theme.base.spacing};
    margin-block-end: ${theme.base.spacing};
    ${unreadEmailCount !== undefined &&
        unreadEmailCount > 0 &&
        css `
      color: ${theme.base.palette.interactive};
    `}
  `;
});
export const StyledMessageAndDate = styled.div `
  white-space: nowrap;
`;
const StyledParticipants = styled(Flex)(({ unreadEmailCount, theme }) => {
    return css `
    ${unreadEmailCount !== undefined &&
        unreadEmailCount > 0 &&
        css `
      position: relative;
      &::before {
        content: '';
        position: absolute;
        inset-inline: calc(-1.5 * ${theme.base.spacing});
        inset-block-start: calc(0.8 * ${theme.base.spacing});
        width: 0.5rem;
        height: 0.5rem;
        border-radius: 50%;
        background-color: ${theme.base.palette.interactive};
      }
    `}
  `;
});
const StyledStatuses = styled.div ``;
export const StyledEmailSummaryItem = styled.li(({ theme }) => {
    const hoverColor = tryCatch(() => mix(0.85, theme.base.palette['primary-background'], theme.base.palette.interactive));
    return css `
      width: 100%;
      color: ${theme.base.palette['foreground-color']};
      background-color: ${theme.base.palette['primary-background']};
      padding: ${theme.base.spacing} calc(2 * ${theme.base.spacing});
      outline: none;
      cursor: pointer;
      ${StyledMetaList}, ${StyledMessageAndDate}, ${StyledStatuses} {
        margin-block-start: ${theme.base.spacing};
      }
      & + & {
        margin-inline-start: 0;
      }

      &[aria-selected='true'],
      &[data-current='true'] {
        background-color: ${theme.base.palette['secondary-background']};
      }

      &:hover,
      &:focus-within {
        background-color: ${hoverColor};
      }
      &:not(:last-child) {
        border-block-end: 0.0625rem solid ${theme.base.palette['border-line']};
      }
    `;
});
StyledEmailSummaryItem.defaultProps = defaultThemeProp;
StyledParticipants.defaultProps = defaultThemeProp;
StyledMessage.defaultProps = defaultThemeProp;
const EmailSummaryItem = forwardRef(function EmailSummaryItem({ id, activeParticipants, sentiment, message, timeStamp, topic, urgency, active = false, onSelect, unreadEmailCount, drafts, undelivered, ...restProps }, ref) {
    const t = useI18n();
    const items = useMemo(() => {
        const itemList = [];
        if (typeof topic === 'string' && topic.length > 0) {
            itemList.push(_jsx(Status, { variant: 'info', children: topic }, 'info'));
        }
        if (sentiment) {
            itemList.push(_jsx(Sentiment, { variant: sentiment.variant, labelHidden: true }));
        }
        if (typeof urgency === 'number') {
            itemList.push(_jsx(Text, { variant: 'secondary', children: `${t('priority')} ${urgency}` }));
        }
        return itemList;
    }, [sentiment, topic, urgency]);
    const emailParticipants = useMemo(() => {
        let participants = '';
        if (activeParticipants.length > 0) {
            participants =
                activeParticipants.length === 1
                    ? activeParticipants[0].fullName
                    : activeParticipants.map(participant => `${participant.shortName}`).join(', ');
        }
        return participants;
    }, [activeParticipants]);
    const itemStatus = `${unreadEmailCount ? `${t('unread')}, ` : ''}${undelivered ? `${t('undelivered')}, ` : ''}${drafts ? `${t('drafts')}, ` : ''}`;
    return (_jsxs(StyledEmailSummaryItem, { ref: ref, ...restProps, id: id, onClick: () => onSelect(id), onKeyDown: (e) => {
            if (e.key === 'Enter') {
                onSelect(id);
            }
        }, "aria-selected": active, "aria-label": `${itemStatus}${emailParticipants}, ${message} ${timeStamp} ${topic} ${sentiment?.variant} ${t('priority')} ${urgency}`, tabIndex: active ? 0 : -1, children: [_jsxs(StyledParticipants, { unreadEmailCount: unreadEmailCount, container: { justify: 'between', alignItems: 'center' }, children: [_jsx(Text, { variant: 'h4', children: emailParticipants }), typeof unreadEmailCount === 'number' && unreadEmailCount > 0 && (_jsx(Count, { children: unreadEmailCount }))] }), _jsxs(Flex, { container: {
                    justify: 'between'
                }, as: StyledMessageAndDate, children: [_jsx(StyledMessage, { unreadEmailCount: unreadEmailCount, children: message }), _jsx(DateTimeDisplay, { value: timeStamp, variant: 'date', format: 'short' })] }), _jsx(MetaList, { items: items }), (undelivered || drafts) && (_jsxs(Flex, { container: {
                    justify: 'start',
                    gap: 1
                }, as: StyledStatuses, children: [undelivered && _jsx(Status, { variant: 'urgent', children: t('undelivered') }), drafts && _jsx(Status, { variant: 'pending', children: t('draft', [], { count: Infinity }) })] }))] }));
});
export default EmailSummaryItem;
//# sourceMappingURL=EmailSummaryItem.js.map