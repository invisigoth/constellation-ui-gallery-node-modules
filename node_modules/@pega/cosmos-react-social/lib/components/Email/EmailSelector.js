import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo, useState } from 'react';
import { ComboBox, createStringMatcher, menuHelpers, useI18n, useAfterInitialEffect } from '@pega/cosmos-react-core';
const EmailSelector = ({ participants, selectedItems, label, mode, required, onSelectedItemChange, externalValidator, status, info, compose }) => {
    const [filterValue, setFilterValue] = useState('');
    const [emailParticipants, setEmailParticipants] = useState(participants);
    const t = useI18n();
    useAfterInitialEffect(() => {
        setEmailParticipants(participants);
    }, [participants]);
    const filterRegex = createStringMatcher(filterValue, 'contains');
    const emailsToRender = useMemo(() => {
        const filteredItems = (filterValue
            ? emailParticipants.filter(({ emailAddress, fullName, shortName }) => {
                return (filterRegex.test(emailAddress) ||
                    filterRegex.test(fullName) ||
                    filterRegex.test(shortName));
            })
            : emailParticipants).map(({ emailAddress, fullName }) => {
            return {
                id: emailAddress,
                primary: fullName,
                secondary: [emailAddress],
                selected: selectedItems.includes(emailAddress)
            };
        });
        const isValid = externalValidator?.(filterValue);
        return ((filterValue && externalValidator && isValid) || (filterValue && !externalValidator)) &&
            !compose
            ? [
                {
                    id: filterValue,
                    primary: `${t('use')}: ${filterValue}`,
                    selected: selectedItems.includes(filterValue)
                },
                ...filteredItems
            ]
            : filteredItems;
    }, [emailParticipants, selectedItems, filterRegex]);
    const toggleSelectedItems = (id) => {
        let newSelectedItems = mode === 'single-select' ? [] : [...selectedItems];
        if (selectedItems.includes(id)) {
            // Unselect an already selected item
            newSelectedItems = newSelectedItems.filter(value => value !== id);
        }
        else {
            setFilterValue('');
            const filteredItem = menuHelpers.getItem(emailsToRender, id);
            if (!filteredItem?.secondary) {
                // New value addition to the list
                if (!externalValidator) {
                    setEmailParticipants([
                        ...emailParticipants,
                        {
                            shortName: '',
                            fullName: '',
                            emailAddress: filterValue
                        }
                    ]);
                    newSelectedItems = [...newSelectedItems, id];
                }
                else {
                    const isValid = externalValidator?.(filterValue);
                    if (isValid) {
                        setEmailParticipants([
                            ...emailParticipants,
                            {
                                shortName: '',
                                fullName: '',
                                emailAddress: filterValue
                            }
                        ]);
                        newSelectedItems = [...newSelectedItems, id];
                    }
                }
            }
            else {
                // Existing value to be selected
                newSelectedItems = [...newSelectedItems, id];
            }
        }
        onSelectedItemChange(newSelectedItems, label);
    };
    const getSelectedItems = () => {
        if (mode === 'single-select') {
            return { id: selectedItems[0], text: selectedItems[0] };
        }
        return selectedItems.map(value => ({ id: value, text: value }));
    };
    const clearSelection = () => {
        onSelectedItemChange([], label);
    };
    const comboBoxProps = {
        value: filterValue,
        onChange: (e) => {
            if (!e.target.value)
                clearSelection();
            setFilterValue(e.target.value);
        },
        onBlur: () => {
            setFilterValue('');
        },
        menu: {
            items: emailsToRender,
            accent: filterRegex,
            onItemClick: toggleSelectedItems
        },
        selected: {
            items: getSelectedItems(),
            onRemove: toggleSelectedItems
        },
        label,
        mode,
        required,
        status,
        info
    };
    return _jsx(ComboBox, { ...comboBoxProps });
};
export default EmailSelector;
//# sourceMappingURL=EmailSelector.js.map