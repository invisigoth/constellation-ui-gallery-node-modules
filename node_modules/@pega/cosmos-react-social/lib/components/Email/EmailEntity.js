import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useRef } from 'react';
import { render, unmountComponentAtNode } from 'react-dom';
import { Tooltip, useConsolidatedRef, useElement, useI18n, useConfiguration, formatListToLocaleString, Icon } from '@pega/cosmos-react-core';
import { StyledEmailEntity } from './Email.styles';
const EmailEntity = forwardRef(function EmailEntity({ entity, ...restProps }, ref) {
    const [el, setEl] = useElement();
    const elementRef = useConsolidatedRef(setEl, ref);
    const t = useI18n();
    const { locale } = useConfiguration();
    const tooltipRef = useRef(null);
    return (_jsxs(StyledEmailEntity, { ...restProps, entity: entity, ref: elementRef, "aria-label": Array.isArray(entity.description)
            ? formatListToLocaleString(entity.description, t, locale)
            : entity.description, onContextMenu: () => {
            if (tooltipRef.current)
                tooltipRef.current.hidden = true;
        }, contentEditable: false, children: [entity.value, entity.icon && _jsx(Icon, { name: entity.icon }), entity.description && entity.description.length > 0 && (_jsx(Tooltip, { target: el, ref: tooltipRef, hideDelay: 'short', children: Array.isArray(entity.description)
                    ? formatListToLocaleString(entity.description, t, locale, {
                        separator: '\n'
                    })
                    : entity.description }))] }));
});
export class EmailEntityWeb extends HTMLElement {
    removeElements() {
        while (this.firstChild) {
            this.removeChild(this.firstChild);
        }
    }
    connectedCallback() {
        const inner = this.innerHTML;
        this.removeElements();
        const variant = Number(this.getAttribute('data-variant'));
        const descAttribute = this.getAttribute('data-description');
        const description = descAttribute !== null ? JSON.parse(descAttribute) : undefined;
        const type = this.getAttribute('data-type') || '';
        render(_jsx(EmailEntity, { entity: {
                value: inner,
                type,
                variant,
                description
            } }), this);
    }
    disconnectedCallback() {
        unmountComponentAtNode(this);
    }
}
if (!customElements.get('pega-email-entity')) {
    customElements.define('pega-email-entity', EmailEntityWeb);
}
export default EmailEntity;
//# sourceMappingURL=EmailEntity.js.map