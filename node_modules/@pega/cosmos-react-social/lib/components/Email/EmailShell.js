import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState } from 'react';
import { Flex, Icon, registerIcon, Text, useI18n } from '@pega/cosmos-react-core';
import * as mailIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/mail.icon';
import EmailConversation, { StyledEmailConversation, StyledEmailInConversation, StyledUnReadCount } from './EmailConversation';
import { StyledEmailConversationList, StyledEmailShell, StyledEmailShellHeader } from './Email.styles';
registerIcon(mailIcon);
const EmailShell = forwardRef(function EmailShell(props, ref) {
    const { conversations, headerProps, autoCollapse = false, ...restProps } = props;
    const t = useI18n();
    const [activeIndex, setActiveIndex] = useState(0);
    const singleConversation = conversations?.length === 1;
    const renderConversations = () => {
        if (!conversations)
            return;
        if (singleConversation) {
            const conversation = conversations[0];
            return (_jsxs(StyledEmailConversation, { singleConversation: singleConversation, showHeader: !!headerProps, children: [!!conversation.unReadEmailCount && (_jsx(Text, { as: StyledUnReadCount, variant: 'secondary', children: t('new_emails_count', [conversation.unReadEmailCount], {
                            count: conversation.unReadEmailCount
                        }) })), conversation.emails?.map(email => {
                        return _jsx(StyledEmailInConversation, { ...email }, email.id);
                    })] }));
        }
        // Multiple conversations
        return autoCollapse
            ? conversations?.map((conversation, index) => {
                const { onExpand, isCollapsed, ...rest } = conversation;
                const collapsed = index !== activeIndex;
                return (_jsx(EmailConversation, { onExpand: () => {
                        setActiveIndex(index);
                        if (onExpand)
                            onExpand();
                    }, isCollapsed: collapsed, ...rest }, conversation.id));
            })
            : conversations?.map(conversation => {
                return _jsx(EmailConversation, { ...conversation }, conversation.id);
            });
    };
    return (_jsxs(Flex, { ...restProps, as: StyledEmailShell, container: { direction: 'column', gap: singleConversation ? undefined : 1 }, ref: ref, singleConversation: singleConversation, children: [headerProps && (_jsxs(Flex, { container: {
                    alignItems: 'center',
                    justify: 'between',
                    pad: 1
                }, as: StyledEmailShellHeader, children: [_jsxs(Flex, { container: { gap: 1, alignItems: 'center' }, children: [_jsx(Icon, { name: 'mail' }), _jsx(Text, { variant: 'h3', children: headerProps?.subject ? `${t('subject')}: ${headerProps?.subject} ` : t('email') })] }), headerProps?.actions] })), _jsx(StyledEmailConversationList, { "aria-multiselectable": !autoCollapse, children: renderConversations() })] }));
});
export default EmailShell;
//# sourceMappingURL=EmailShell.js.map