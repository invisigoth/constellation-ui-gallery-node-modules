{"version":3,"file":"Email.types.js","sourceRoot":"","sources":["../../../src/components/Email/Email.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ReactNode, Ref, MouseEvent, MouseEventHandler } from 'react';\n\nimport { UtilitiesSummaryProps } from '@pega/cosmos-react-work/lib/components/CaseView/UtilitiesSummary';\nimport {\n  BaseProps,\n  AvatarProps,\n  SentimentProps,\n  FileDisplayProps,\n  FileUploadItemProps,\n  OmitStrict,\n  MenuProps,\n  MenuItemProps,\n  TooltipProps,\n  NoChildrenProp,\n  EmptyStateProps,\n  ProgressProps,\n  PageTemplateProps,\n  PopoverProps,\n  BannerProps\n} from '@pega/cosmos-react-core';\nimport { EditorProps, EditorState, RichTextEditorProps } from '@pega/cosmos-react-rte';\n\nexport interface EmailTemplate {\n  /** Template title */\n  title: string;\n  /** Template id */\n  id: string;\n  /** categorized templates */\n  templates?: Pick<EmailTemplate, 'title' | 'id'>[];\n}\n\nexport interface EmailUser {\n  /** Short name of the User */\n  shortName: string;\n  /** Full name of the User */\n  fullName: string;\n  /** Email of the User */\n  emailAddress: string;\n  /** Avatar props of the User */\n  avatarProps?: Partial<AvatarProps>;\n}\n\nexport interface EntityHighlightMapping {\n  value: string;\n  type: string;\n  variant: number;\n  names?: string[];\n  icon?: string;\n}\n\nexport interface EntityMatch extends EntityHighlightMapping, MatchRange {\n  matchedText: string;\n  children?: EntityMatch[];\n}\n\nexport interface MatchRange {\n  start: number;\n  end: number;\n}\n\nexport interface ContextMenuProps extends Pick<MenuProps, 'loading'> {\n  /** Callback triggered when a menu item is clicked */\n  onItemClick: (selectedValue: { fieldName: string; fieldValue: string }) => void;\n  /** Menu items */\n  items: MenuItemProps[];\n  /** Imperative handle */\n  handle: Ref<ContextMenuHandleValue>;\n}\n\nexport interface ContextMenuHandleValue {\n  setItems: (contextMenuItems: ContextMenuProps['items']) => void;\n  setOpen: (open: boolean) => void;\n  setLoading: (loading: boolean) => void;\n}\n\nexport interface EmailProps extends BaseProps, NoChildrenProp {\n  /** Ref to the element */\n  ref?: Ref<HTMLDivElement>;\n  /** Unique ID for this email record */\n  id: string;\n  /** Timestamp of this email as ISO8601 string, timestamp or native Date object. */\n  timeStamp: Date | number | string;\n  /** From email */\n  from: EmailUser;\n  /** To email */\n  to: EmailUser[];\n  /** Carbon copy of email users list */\n  cc?: EmailUser[];\n  /** Blind carbon copy of email users list */\n  bcc?: EmailUser[];\n  /** Sentiment */\n  sentiment?: SentimentProps;\n  /** Subject of the email */\n  subject?: string;\n  /** Body */\n  body?: string;\n  /** Forwarded content */\n  forwardedContent?: string;\n  /**\n   * Entity highlight mapping\n   * This requires body to be passed as a string with html tags\n   */\n  entityHighlightMapping?: EntityHighlightMapping[];\n  /** onReply callback */\n  onReply?: (id: EmailProps['id']) => void;\n  /** onForward Callback */\n  onForward?: (id: EmailProps['id']) => void;\n  /** onReply callback */\n  onReplyAll?: (id: EmailProps['id']) => void;\n  /** Edit draft callback */\n  onEditDraft?: (id: EmailProps['id']) => void;\n  /** Delete draft Callback */\n  onDeleteDraft?: (id: EmailProps['id']) => void;\n  /** Show either undelivered or draft status on email */\n  status?: 'undelivered' | 'draft';\n  /** List of suggestions */\n  suggestions?: EmailTemplate[];\n  /** Callback that triggers on click of tag */\n  onSuggestionClick?: (id: EmailProps['id'], suggestionId: EmailTemplate['id']) => void;\n  /** Flag that indicates if email is unread\n   * @default false\n   */\n  unRead?: boolean;\n  /** Attachments list */\n  attachments?: FileDisplayProps[];\n  /**\n   * Context menu props. Context menu is disabled if it is not provided.\n   * To set the context menu items, use the setContextMenuItems method provided on handle\n   */\n  contextMenu?: OmitStrict<ContextMenuProps, 'items' | 'loading'> & {\n    /** Callback on right click of content */\n    onContextMenu: (id: EmailProps['id'], e: MouseEvent) => void;\n  };\n  /** Show banner for undelivered email */\n  banner?: Pick<BannerProps, 'messages'>;\n}\n\nexport interface EmailConversationProps extends BaseProps {\n  /** ref to the element */\n  ref?: Ref<HTMLLIElement>;\n  /** Unique ID for this email conversation record */\n  id: string;\n  /** List of mails */\n  emails: EmailProps[];\n  /** Sender(s) of this email conversation */\n  from: EmailUser;\n  /** Recipient(s) of this email conversation */\n  to: EmailUser[];\n  /** Count of unread emails */\n  unReadEmailCount?: number;\n  /** Timestamp of this conversation as ISO8601 string, timestamp or native Date object. */\n  timeStamp: Date | string | number;\n  /** Flag that indicates if email conversation is expanded */\n  isCollapsed?: boolean;\n  /** Flag to set if conversation is spun off from forwarded email */\n  isForwarded?: boolean;\n  /** Callback when email conversation is collapsed */\n  onCollapse?: () => void;\n  /** Callback when email conversation is expanded */\n  onExpand?: () => void;\n  /** Flag that indicates if email conversation contains drafted emails */\n  drafts?: boolean;\n  /** Flag that indicates if email conversation contains undelivered emails */\n  undelivered?: boolean;\n}\n\nexport type EmailResponseType = 'reply' | 'replyAll' | 'forward';\n\nexport type EmailComposerFieldType =\n  | 'to'\n  | 'cc'\n  | 'bcc'\n  | 'subject'\n  | 'bodyContent'\n  | 'attachments'\n  | 'emailAccount'\n  | 'responseType'\n  | 'selectedTemplateId';\n\nexport type EmailComposerValueType<T> = T extends 'to' | 'cc' | 'bcc'\n  ? EmailUser['emailAddress'][]\n  : T extends 'subject' | 'bodyContent'\n  ? string\n  : T extends 'selectedTemplateId'\n  ? string\n  : T extends 'attachments'\n  ? FileUploadItemProps[]\n  : T extends 'responseType'\n  ? EmailResponseType\n  : T extends 'emailAccount'\n  ? string\n  : never;\n\nexport interface EmailDirectRecipients {\n  /** To address/addresses in case of reply response type on email. */\n  reply: EmailUser['emailAddress'][];\n  /** To address/addresses in case of replyAll response type on email. */\n  replyAll: EmailUser['emailAddress'][];\n  /** To address/addresses in case of forward response type on email. */\n  forward?: EmailUser['emailAddress'][];\n}\n\nexport interface EmailComposerHandleValue {\n  replaceBodyContent: (content: string) => void;\n  updateImage: EditorState['appendImage'];\n  activate: () => void;\n  setCursorLocationToStart: EditorState['setCursorLocationToStart'];\n}\n\nexport interface EmailComposerProps\n  extends Pick<EmailProps, 'suggestions' | 'onSuggestionClick'>,\n    BaseProps,\n    NoChildrenProp {\n  /** Show loader until the background process completes */\n  progress?: boolean | Pick<ProgressProps, 'message'>;\n  /** Object containing full list of email participants. */\n  participants: EmailUser[];\n  /** Object containing full list of sender email accounts */\n  senderAccounts?: EmailUser[];\n  /** Data for all fields of the composer */\n  data: {\n    /** Object to hold selected email account and field error */\n    emailAccount?: {\n      value: EmailUser['emailAddress'];\n      error?: string;\n    };\n    /** Object to hold to address/addresses and field error */\n    to?: {\n      value: EmailUser['emailAddress'][];\n      error?: string;\n    };\n    /** Object to hold Cc address/addresses and field error */\n    cc?: {\n      value: EmailUser['emailAddress'][];\n      error?: string;\n    };\n    /** Object to hold Bcc address/addresses  and field error */\n    bcc?: {\n      value: EmailUser['emailAddress'][];\n      error?: string;\n    };\n    /** Object to hold the subject value and error */\n    subject: {\n      value: string;\n      error?: string;\n    };\n    /** Object containing the default body content and error */\n    bodyContent: {\n      defaultValue: string;\n      error?: string;\n    };\n    /** Selected template id */\n    selectedTemplateId?: EmailTemplate['id'];\n    /** List of attachments */\n    attachments?: FileUploadItemProps[];\n    /** Email response types */\n    responseType?: EmailResponseType;\n  };\n  /** Callback when user clicks on the send button */\n  onSend: () => void;\n  /** Callback when user clicks on the save button */\n  onSave?: () => void;\n  /** Callback when image is added */\n  onImageAdded?: RichTextEditorProps['onImageAdded'];\n  /** Region to show more actions in footer */\n  footerMoreActions?: ReactNode;\n  /** Templates for drafting email */\n  templates?: EmailTemplate[];\n  /** Callback when user clicks on cancel */\n  onCancel: () => void;\n  /**\n   * Callback to handle external entry validation for to, cc and bcc fields while adding a new email to the list\n   * If returned true considers the entry to be a valid entry\n   */\n  externalValidator?: (value: string) => boolean;\n  /** Ref to the element */\n  ref?: Ref<HTMLDivElement>;\n  /** Imperative handle for composer */\n  handle?: Ref<EmailComposerHandleValue>;\n  /** Change handler to all fields */\n  onChange: <T extends EmailComposerFieldType>(field: T, value: EmailComposerValueType<T>) => void;\n  /** Callback when composer body editor is initialized */\n  onEditorInit?: EditorProps['onInit'];\n}\n\nexport interface EmailShellProps extends BaseProps {\n  /** ref to the element */\n  ref?: Ref<HTMLDivElement>;\n  /** Region for header */\n  headerProps?: {\n    /** Region for actions */\n    actions?: ReactNode;\n    /** Subject of the email conversations list */\n    subject?: string;\n  };\n  /** Email conversations */\n  conversations?: EmailConversationProps[];\n  /** Shows only one conversation at a time */\n  autoCollapse?: boolean;\n}\n\nexport interface EmailSummaryItemProps extends BaseProps {\n  /** Id of each summary item */\n  id: string;\n  /** List of from participant names of the conversations */\n  activeParticipants: EmailUser[];\n  /** Email body of last email in the email */\n  message: string;\n  /** Timestamp of the latest email */\n  timeStamp: Date | string | number;\n  /** Top topic of an email */\n  topic?: string;\n  /** Sentiment */\n  sentiment?: SentimentProps;\n  /** Urgency of an email */\n  urgency?: number;\n  /** Total number of unread emails in the email */\n  unreadEmailCount?: number;\n  /** Is the email currently active */\n  active?: boolean;\n  /** On click of email item */\n  onSelect: (id: EmailSummaryItemProps['id']) => void;\n  /** Flag that indicates if email summary item contains drafted emails */\n  drafts?: EmailConversationProps['drafts'];\n  /** Flag that indicates if email summary item contains undelivered emails */\n  undelivered?: EmailConversationProps['undelivered'];\n  /** ref to the element */\n  ref?: Ref<HTMLLIElement>;\n}\n\nexport interface Filter {\n  /** Sets DOM id for the control and associates label element via 'for' attribute. */\n  id: string;\n  /** Pass a string or a fragment with an Icon and string for the filter label. */\n  label: ReactNode;\n  /**\n   * Disables the filter.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Sets on prop via onFilterChange.\n   * @default false\n   */\n  on?: boolean;\n}\n\nexport interface EmailSummaryListProps extends BaseProps {\n  /** List of email categories */\n  categories?: MenuProps['items'];\n  /** Handles category change */\n  onCategoryClick?: MenuItemProps['onClick'];\n  /** List of EmailItems items */\n  items: OmitStrict<EmailSummaryItemProps, 'onSelect' | 'active'>[];\n  /** Total number of unread email count */\n  unreadEmailCount?: number;\n  /** A set of filters to apply to the email inbox. */\n  filters?: Filter[];\n  /** A callback that runs when a filter is clicked. */\n  onFilterChange?: (filterId: Filter['id'], on: boolean) => void;\n  /** onClick of list item */\n  onItemClick: (id: EmailSummaryItemProps['id']) => void;\n  /** Indicates if the data is being currently loading */\n  loading?: boolean;\n  /** Callback to fetch more rows */\n  onLoadMore?: () => void;\n  /** Empty message when there are no email summary items */\n  emptyMessage?: EmptyStateProps['message'];\n  /** Id of the EmailSummaryItem */\n  currentItemId?: string;\n  /** Use summary list as selectable list */\n  selectable?: boolean;\n  /** ref to the element */\n  ref?: Ref<HTMLOListElement>;\n}\n\nexport interface EmailEntityProps extends BaseProps {\n  entity: OmitStrict<EntityHighlightMapping, 'names'> & { description?: TooltipProps['children'] };\n  ref?: Ref<HTMLElement>;\n}\n\nexport interface TargetProps {\n  cursorPosition: { x: number; y: number };\n  targetNode: Node | null;\n}\n\nexport interface ContextMenuPopoverProps extends BaseProps, TargetProps {\n  contextMenu: ContextMenuProps;\n  show: PopoverProps['show'];\n  ref?: PopoverProps['ref'];\n}\n\nexport interface EntityListProps extends BaseProps {\n  content: {\n    name: string;\n    value?: {\n      id: string;\n      entity: OmitStrict<EntityHighlightMapping, 'names'>;\n    }[];\n  }[];\n\n  header?: {\n    icon: string;\n    text: string;\n  };\n  /**\n   * Context menu props. Context menu is disabled if it is not provided.\n   * To set the context menu items, use the setContextMenuItems method provided on handle\n   */\n  contextMenu?: OmitStrict<ContextMenuProps, 'items' | 'loading'> & {\n    onContextMenu: (e: MouseEvent) => void;\n    popoverRef?: ContextMenuPopoverProps['ref'];\n  };\n  ref?: Ref<HTMLDivElement>;\n}\n\nexport interface EmailManagerProps extends BaseProps {\n  /** Header of the component */\n  header?: {\n    title: PageTemplateProps['title'];\n    icon?: PageTemplateProps['icon'];\n  };\n  /** A region to hold an EmailSummaryList component */\n  list?: ReactNode;\n  /** Email case details */\n  emailCaseDetails?: ReactNode;\n}\n\nexport interface EmailCaseViewProps extends BaseProps {\n  /** Header of the the component */\n  header?: EmailManagerProps['header'];\n  /** A region to hold an Emails component */\n  content: ReactNode;\n  /** A region above the center column to display banners. */\n  banners?: ReactNode;\n  /** A region that is used to hold Utility components. */\n  utilities?: ReactNode;\n  /** The utilities summary array will be used to render the minimized utilities card. */\n  utilitiesSummaryItems?: UtilitiesSummaryProps['items'];\n  /** Expand/Collapse utilities */\n  defaultUtilitiesExpanded?: boolean;\n}\n\nexport interface EmailNotificationPanelProps extends BaseProps {\n  count: number;\n  label: string;\n  onClick: MouseEventHandler;\n}\n"]}