'use strict';

const {
  rules: {
    'no-restricted-syntax': [nrsEnable, ...nrsConfig]
  }
} = require('eslint-config-airbnb-base/rules/style');

module.exports = {
  env: {
    es2022: true,
    browser: true,
    node: false
  },
  parserOptions: {
    ecmaVersion: 2022
  },
  settings: {
    'import/resolver': {
      node: {
        extensions: ['.js', '.mjs', '.cjs', '.jsx', '.ts', '.mts', '.cts', '.tsx']
      }
    }
  },
  rules: {
    'arrow-body-style': 'off',
    'consistent-return': 'off',
    eqeqeq: ['error', 'always'],
    'max-classes-per-file': 'off',
    'no-console': 'error',
    'no-alert': 'error',
    'no-param-reassign': 'off',
    'no-restricted-properties': [
      'error',
      {
        object: 'React',
        message: 'Please use named imports instead.'
      }
    ],
    'no-restricted-syntax': [
      nrsEnable,
      ...nrsConfig.filter(config =>
        typeof config === 'string'
          ? config !== 'ForOfStatement'
          : config.selector !== 'ForOfStatement'
      ),
      {
        selector: 'JSXSpreadAttribute :matches(JSXElement, JSXFragment)',
        message:
          'JSX within spread attributes is not currently transformed correctly in TypeScript.'
      }
    ],
    'no-restricted-exports': [
      'error',
      { restrictedNamedExports: ['then'], restrictDefaultExports: { named: true } }
    ],
    'no-return-await': 'off',
    'prefer-arrow-callback': 'off',
    'prefer-destructuring': 'off',

    '@typescript-eslint/return-await': 'off',

    'import/extensions': [
      'error',
      'always',
      {
        js: 'never',
        jsx: 'never',
        ts: 'never',
        tsx: 'never'
      }
    ],
    'import/no-unresolved': [
      'error',
      {
        commonjs: true,
        caseSensitive: true
      }
    ],
    'import/order': [
      'error',
      {
        'newlines-between': 'always',
        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index']
      }
    ],

    'react/jsx-filename-extension': [
      'error',
      {
        extensions: ['.jsx', '.tsx'],
        allow: 'as-needed'
      }
    ],

    'sonarjs/cognitive-complexity': 'off',
    'sonarjs/no-duplicate-string': 'off',
    'sonarjs/no-identical-functions': 'off',
    'sonarjs/no-nested-template-literals': 'off'
  }
};
