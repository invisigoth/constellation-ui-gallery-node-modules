/**
 * Class to hold utility functions called when fetching data
 */
export default class FetchUtils {
    /**
     * Calls fetch with supplied parameters.
     * Will retry upon receiving a 503 status code.
     *
     * @param {string} url - The URL to request.
     * @param {object} opts - The fetch options.
     * @param {number} [maxRetries=0] - Number of maximum retries.
     * @param {number} [retryNumber=0] - Number of current retry.
     * @returns {Promise<object>} - A call to fetch.
     */
    static _fetchWithRetries(url: string, opts: any, maxRetries?: number, retryNumber?: number): Promise<any>;
    /**
     * An extension of the native fetch function ability to timeout, retries, caching inProgress requests,
     * and common response pre-processing.
     *
     * @param {string} url - The URL for the request.
     * @param {object} [opts={}] - The fetch options.
     * @param {boolean} [skipRequestCache= false] - If the request should skip looking in the request cache.
     * @returns {Promise<object>} A promise for the pre-processed response.
     */
    static fetch(url: string, opts?: {}, skipRequestCache?: boolean): any;
}
