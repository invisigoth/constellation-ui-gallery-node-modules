/**
 * @description
 * Provides APIs to create,update and lookup the localization store which is a map of field values.
 */
declare class LocaleUtils {
    GENERIC_BUNDLE_KEY: string;
    MESSAGE_BUNDLE_KEY: string;
    BASE_CLASS: string;
    DATA_PAGE_LOCALECONTEXT: string;
    constructor();
    /**
     * Sets the localeJson for a Rule
     *
     * @example <caption>PCore.getLocaleUtils().setLocaleForRule({ "fields" : {"First Name" : "Primeiro nome","Last Name"  : "Último nome"}}, "WORK-HOME!VIEW!PERSONALINFO");</caption>
     * After the API call above the localization Store will have an entry for the "WORK-HOME!VIEW!PERSONALINFO"
     * {
     *      "WORK-HOME!VIEW!PERSONALINFO" : {
     *          "fields" : {
     *                "First Name" : "Primeiro nome",
     *                "Last Name"  : "Último nome"
     *          }
     *      },
     *      .
     *      .
     *      .
     * }
     * @param   {object} localeJson     locale JSON for the rule.
     * @param   {string} localeRuleKey  A key in the localization store for which we want to set the localeJSON
     * @returns {void}
     * @function
     */
    setLocaleForRule: (localeJson: any, localeRuleKey: any) => void;
    /**
     * Gets localeJson for a rule
     *
     * @example <caption>PCore.getLocaleUtils().getLocaleForRule("WORK-HOME!VIEW!PERSONALINFO");</caption>
     * If the localization store looks like below
     * {
     *      "WORK-HOME!VIEW!PERSONALINFO" : {
     *          "fields" : {
     *                "First Name" : "Primeiro nome",
     *                "Last Name"  : "Último nome"
     *          }
     *      }
     * }
     * The call to the API returns the below JSON
     * {
     *   "fields" : {
     *      "First Name" : "Primeiro nome",
     *      "Last Name"  : "Último nome"
     *   }
     * }
     * @param   {string} [localeRuleKey="@BASECLASS!GENERIC!PYGENERICFIELDS"]  (optional) A key in the localization store for which we want to get the localeJson.
     * @returns {object | undefined}    The fields object from localization store or undefined if passed key doesn't exists in localization store.
     * @function
     */
    getLocaleForRule: (localeRuleKey?: string) => any;
    /**
     * Resets the localization store to an empty object
     *
     * @example <caption>PCore.getLocaleUtils().resetLocaleStore();</caption>
     * After this call, localization store is reset to an empty object {}.
     * @returns {void}
     * @function
     */
    resetLocaleStore: () => void;
    /**
     * Returns the localised value of string from the localization store.
     *
     * @example <caption>PCore.getLocaleUtils().getLocaleValue("First Name", "", "WORK-HOME!VIEW!PERSONALINFO");</caption>
     * For a store which looks like the one below
     * {
     *      "WORK-HOME!VIEW!PERSONALINFO" : {
     *          "fields" : {
     *                "First Name" : "Primeiro nome",
     *                "Last Name"  : "Último nome"
     *          }
     *      }
     * }
     * The API call returns "Primeiro nome".
     * @param   {string} localeKey string to be localised
     * @param   {string} [localePath="fields"] (optional) Locale category in the localeJson. Default is always fields.
     * @param   {string} [localeRuleKey="@BASECLASS!GENERIC!PYGENERICFIELDS"] (optional) Key in the Localization store.
     * @returns {string} the localised value as a string
     * @function
     */
    getLocaleValue(localeKey: any, localePath: any, localeRuleKey?: string): any;
    /**
     * Returns the localised value of string from the localization store.
     *
     * @param {string} localeRuleKey key in the localized store
     * @param {string} classID classID of the paragraph rule
     * @param {string} paragraphName name of the paragraph rule
     * @returns {string} the localised value as a string
     * @function
     * @private
     */
    getParagraphLocaleValue(localeRuleKey: any, classID: any, paragraphName: any): any;
    /**
     * Returns an array of localeJson objects for the respective locale references passed to the API.
     * Checks if the locale references are present in client localization store. If not present, makes a call to constellation service and gets the localeJson objects.
     *
     * @example <caption>LocalUtils.getLocaleJsons(["WORK-HOME!PAGE!PERSONALINFO", "WORK-HOME!CASE!FINANCIALSTATUS"])</caption>
     * @param   {Array} localeRefs Array of locale references rule names.
     * @returns {Array} Array of localeJson objects
     * @function
     * @private
     */
    static getLocaleJsons(localeRefs: any): Promise<any[]>;
    /**
     * Loads all the locale resources from the locale references if the user locale is different from
     * the base locale.
     *
     * @example <caption> PCore.getLocaleUtils().loadLocaleResources(["WORK-HOME!PAGE!PERSONALINFO", "WORK-HOME!CASE!FINANCIALSTATUS"]);   </caption>
     * @param {Array} localeRefs list of all the locale references to be loaded
     * @returns {void}
     */
    loadLocaleResources(localeRefs: any): Promise<void>;
    /**
     * This API sets the timezone in the LocaleUtils.
     *
     * @example <caption>PCore.getLocaleUtils().setTimezone("Asia/Calcutta")</caption>
     * //This call sets the time zone to Asia/Calcutta
     * @param   {string} timezone TimeZone
     * @returns {void}
     */
    setTimezone(timezone: any): void;
    /**
     * This API returns the timezone in use if it is set, else returns the system/browser timezone.
     * @example <caption>PCore.getLocaleUtils().getTimeZoneInUse()</caption>
     * which should return "Asia/Calcutta" if "Asia/Calcutta" is set at requestor page.
     *
     * @returns {string} the timezone
     * @function
     */
    getTimeZoneInUse(): any;
}
declare const localeUtils: LocaleUtils;
export { localeUtils, LocaleUtils };
