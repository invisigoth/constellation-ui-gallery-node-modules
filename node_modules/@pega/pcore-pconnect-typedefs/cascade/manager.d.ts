import { CascadeSubscribersObj } from './types';
/**
 * @description
 * Exposes APIs to handle Datapage parameters for callback subscriptions.
 */
declare class CascadeManager {
    readonly name: string;
    cascadeSubscribers: CascadeSubscribersObj;
    cascadeResetSubscribers: CascadeSubscribersObj;
    listChangeSubscribers: Function[];
    constructor();
    /**
     * Registers all the dependencies for the target field when the source field changes.
     * @description Registers all the dependencies of the target field to perform cascade resetting.
     * Cascade resetting is the process of resetting the value of the target field when the value of the source field changes.
     *
     * @example <caption>In this example, the API registers the dependencies of the backlogId target field.</caption>
     * Example usage - CascadeManager.registerResetDependencies('app/primary_1', 'caseInfo.content','.backlogId', ['.productId','release'], 'Text', 'singleRecord')
     *
     * @param {string} contextName The name of the context containing the fields to be registered.
     * @param {string} pageReference The reference to the page that contains the field to be registered.
     * @param {string} target The field whose dependencies needs to be registered.
     * @param {Array} dependentProperties Array of fields on which target field is dependent.
     * @param {string} fieldType The type of the target field which needs to be registered. eg. Text
     * @param {string} mode The selection mode of the target field, the value of mode can singleRecord or multiRecord.
     * @public
     * @function
     */
    registerResetDependencies(contextName: string, pageReference: string, target: string, dependentProperties: [any], fieldType: string, mode?: string): void;
    /**
     * De-Registers all the dependencies for the target field when the source field changes.
     * @description De-registers all the registered dependencies of the target field that have undergone cascade resetting.
     * Cascade resetting is the process of resetting the value of the target field when the value of the source field changes.
     *
     * @example <caption>In this example, the API de-registers the registered dependencies of the backlogId target field..</caption>
     * Example usage - CascadeManager.deregisterResetDependencies('app/primary_1', 'caseInfo.content','.backlogId', ['.productId','release'], 'Text')
     *
     * @param {string} contextName The name of the context containing the fields to be de-registered.
     * @param {string} pageReference The reference to the page that contains the field to be de-registered.
     * @param {string} target The field whose dependencies needs to be de-registered.
     * @param {Array} dependentProperties Array of fields on which target field is dependent.
     * @param {string} fieldType The type of the target field which needs to be de-registered. eg. Text
     * @public
     * @function
     */
    deregisterResetDependencies(contextName: string, pageReference: string, target: string, dependentProperties: string[], fieldType: string): void;
    /**
     * get all the dependencies associated with the property
     * @param {string} contextName name of the context
     * @param {string} propertyName name of dependent property inside the context
     * @returns {Array} dependent properties array which needs to be resetted.
     * @example <caption>Example for getResetDependencies() depicting how to get resetting dependencies for change in productId.</caption>
     * Example usage - CascadeManager.getResetDependencies('app/primary_1', 'caseInfo.content.productId')
     * @private
     */
    getResetDependencies(contextName: string, propertyName: string): any[] | import("./types").CascadeSubscription;
    /**
     * purge dependency map on given contextName
     * @param {string} contextName name of the context
     * @example <caption>Example for purgeResetDependencies() depicting how to purge dependencies on a context.</caption>
     * Example usage - CascadeManager.purgeResetDependencies('app/primary_1')
     * @private
     */
    purgeResetDependencies(contextName: string): void;
    /**
     * Registers the fields to the CascadeManager Class.
     * @description Register the fields to the CascadeManager Class.
     *
     * @example <caption>Example for registerFields() depicting how to register the firstName and lastName
     * fields to trigger callback.</caption>
     * Example usage - CascadeManager.registerFields('app/primary_1', 'caseInfo.content', ['firstName','lastName'], () => { console.log("field changed")}, '001-002-003')
     *
     * @param {string} context The name of the context containing the fields to be registered.
     * @param {string} pageReference The reference to the page that contains the field to be registered.
     * @param {Array} fields Array of fields to be registered.
     * @param {Function} callback function to be called when the registered field is updated.
     * @param {string} subscriptionId uniqueId for registering the fields. The same subscriptionId should be provided for de-registering th fields.
     *
     * @function
     * @public
     */
    registerFields(context: string, pageReference: string, fields: any[], callback: Function, subscriptionId: string): void;
    /**
     * Registers the fields of type PageList to the CascadeManager Class.
     * @description Registers the field of type PageList to the CascadeManager Class.
     *
     * @example <caption>Example for registerListField() depicting how to register the phoneNumber
     * field to trigger callback. </caption>
     * Example usage - CascadeManager.registerListField('app/primary_1', 'caseInfo.content', phoneNumber, () => { console.log("field changed")}, '002-002-004')
     *
     * @param {string} context The name of the context containing the field to be registered.
     * @param {string} pageReference The reference to the page that contains the field to be registered.
     * @param {string} listField field to be registered.
     * @param {Function} callback function to be called when the registered field is updated.
     * @param {string} subscriptionId uniqueId for registering the field. The same subscriptionId should be provided for de-registering th field.
     *
     * @function
     * @public
     */
    registerListField(context: string, pageReference: string, listField: any, callback: Function, subscriptionId: string): void;
    /**
     * De-Registers the field of type PageList from the CascadeManager Class.
     * @description De-Registers the field of type PageList from the CascadeManager Class.
     *
     * @example <caption>Example for unRegisterListField() depicting how to de-register
     * field.</caption>
     * Example usage - CascadeManager.unRegisterListField('app/primary_1', 'caseInfo.content', phoneNumber, '002-002-004')
     *
     * @param {string} context The name of the context containing the field to be de-registered.
     * @param {string} pageReference The reference to the page that contains the field to be de-registered.
     * @param {string} listField field to be de-registered.
     * @param {string} subscriptionId uniqueId for de-registering the field.
     *
     * @function
     * @public
     */
    unRegisterListField(context: string, pageReference: string, listField: string, subscriptionId: string): void;
    static _getFieldsForList(context: string, pageReference: string, listField: string): any;
    /**
     * De-registers the fields from the CascadeManager Class.
     * @description De-register fields from the CascadeManager Class.
     *
     * @example <caption>Example for unRegisterFields() depicting how to unregister the firstName and lastName fields.</caption>
     * Example usage - CascadeManager.unRegisterFields('app/primary_1', 'caseInfo.content', ['firstName','lastName'], '001-002-003')
     *
     * @param {string} context The name of the context containing the fields to be de-registered.
     * @param {string} pageReference The reference to the page that contains the field to be de-registered.
     * @param {Array} fields Array of fields to be de-registered.
     * @param {string} subscriptionId uniqueId for de-registering the fields.
     *
     * @function
     * @public
     */
    unRegisterFields(context: string, pageReference: string, fields: any[], subscriptionId: string): void;
    /**
     * Invokes subscribers registered to the fields.
     * @description invokes subscribers registered to the fields.
     *
     * @example <caption>Example for triggerCascade() depicting how to triggerCascade for subscribers </caption>
     * Example usage - CascadeManager.triggerCascade('app/Primary', 'pgRef0', 'value 0')
     *
     * @param {string} context name of the context
     * @param {string} propertyReference reference path
     * @param {string} propertyValue property value
     *
     * @private
     */
    triggerCascade(context: string, propertyReference: string, propertyValue: string, changeSet?: any): void;
    purgeCascadeFields(context: string): void;
    /**
     * {
     *  caseInfo: {
     *    content: {
     *      ..fields
     *   }
     * }
     * }
     * @param {object} serverData dxApi reponse
     * @param {string} context app context
     * @param {string} path reference path for the key
     * @private
     */
    handleServerChanges(serverData: any, context: string, path?: string): void;
    _handleCascadeObject(serverFields: any, context: string, pathPrefix: string, changeSet: any): void;
    /**
    @private
    */
    _handlePageReference(pageReference: string, target: any, fieldType: string): string;
    /**
     * registers the provided function on every redux update which came from server.
     * @param {*} callback a callback function which needs to be called when the redux changes
     * @private
     */
    registerForListChanges(callback?: () => void): void;
    /**
     * invokes subscribers registered to the field
     * @param {*} context name of the context in which the filed present eg. 'app/primary_1/workarea_1'
     * @param {*} propertyReference complete path of the property eg. 'caseInfo.content.pageList(0).page.anotherPageList(1).name
     * @param {*} value value of filed updated in the redux which came from server
     * @private
     */
    _triggerListChanges(context: string, propertyReference: string, value: string): void;
    /**
     * This will unRegister all the existing subscribers
     * @private
     */
    unRegisterForListChanges(): void;
}
declare const _default: CascadeManager;
export default _default;
