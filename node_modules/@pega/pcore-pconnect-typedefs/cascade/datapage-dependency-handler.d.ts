/**
 * Exposes API to create and maintain the property and their dependent properties
 * which configure datapage along with the respected context.
 * @example
 * {
 *  "app/primary_1" : {
 *      "Country": [
 *          {
 *             "propertyName": "States",
 *             "contextName": "app/primary_1",
 *             "pageReference": "caseInfo.content"
 *         }
 *      ]
 *  }
 * }
 */
declare class DatapageDependencyMap {
    private _dataSourceMap;
    constructor();
    /**
     * Checks whether the given context present in property map and returns true if present else false.
     * @param {string} contextName name of the context
     * @returns {boolean} returns true if context present in property map else false
     * @example
     * contextName: "app/primary_1"
     */
    hasContextName(contextName: string): boolean;
    /**
     * Add's the value to the respected context. If we don't pass the value or pass empty value
     * assign empty object to the respected context
     * @param {string} contextName name of the context
     * @param {object} value respected context mapping object
     */
    addContextName(contextName: string, value: any): void;
    /**
     * give the corresponding object for the context provided if it present otherwise return null
     * @param {string} contextName name of the context
     * @returns {object|null} returns the respected context object if context is present
     */
    getContextObjectByName(contextName: string): any;
    /**
     * Delete the corresponding object for the context if present
     * @param {string} contextName name of the context
     */
    deleteContextName(contextName: string): void;
    /**
     * Add or Update the property value to the corresponsing context provided if context already present
     * otherwise add the context, property and it's value.
     * @param {string} contextName name of the context
     * @param {string} propertyName name of dependent property inside the context
     * @param {Array|object} value respected context mapping object
     */
    addOrUpdatePropertyInContext(contextName: string, propertyName: string, value: any): void;
    /**
     * Delete the property present inside the context
     * @param {string} contextName name of the context
     * @param {string} propertyName name of dependent property inside the context
     */
    deletePropertyInContext(contextName: string, propertyName: string): void;
    /**
     * get the property from the corresponding context if it presents otherwise return null
     * @param {string} contextName name of the context
     * @param {string} propertyName name of dependent property inside the context
     */
    getPropertyFromContext(contextName: string, propertyName: string): any;
    /**
     * get all the dependencies associated with the property
     * @param {string} context name of the context
     * @param {string} propertyName name of dependent property inside the context
     * @returns {Array} dependent properties array
     */
    getDependencies(context: string, propertyName: string): unknown[];
}
declare const _default: DatapageDependencyMap;
export default _default;
