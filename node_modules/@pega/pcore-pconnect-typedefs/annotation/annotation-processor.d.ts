import { C11nEnv } from '../interpreter/c11n-env';
declare class AnnotationProcessor {
    static handleAnnotation(anno: string, c11nEnv: C11nEnv): any;
    static trimAnnotation(anno: string): string;
    static handleComponentMapping(props: any, config: any, c11nEnv: C11nEnv): void;
    /**
     * This returns the literal property name
     * @param {string} value prpertyname with annotation
     * @example
     * if we pass '@P .pyName' it will return pyName
     */
    static getPropertyName(value: string): string;
    /**
     * This returns the leaf property name of an embedded property
     * @param {string} value propertyname with annotation
     * @example
     * if we pass '@P .Expenses.Home' it will return 'Home'
     */
    static getLeafPropertyName(value: string): string;
    /**
     * This will check whether the passed value is property if yes return true else false
     * @param {string} value prpertyname with annotation
     * @example
     * returns true if value '@P .pyName' else return false
     */
    static isProperty(value: string): boolean;
}
export default AnnotationProcessor;
