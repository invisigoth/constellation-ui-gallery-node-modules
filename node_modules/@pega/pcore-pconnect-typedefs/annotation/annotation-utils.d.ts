/**
 * @description
 * The AnnotationUtilsclass contains utility APIs that handle the annotation for a property
 */
declare class AnnotationUtils {
    /**
     * This API obtains the name of an annotated property
     * @param {string} value an Anannotated property
     * @returns {string} returns the name of the annotated property as a string
     * @public
     * @example <caption>In this example, the API returns the literal property name</caption>
     * PCore.getAnnotationUtils().getPropertyName(value)
     * PCore.getAnnotationUtils().getPropertyName('@P .pyName') return ".pyName"
     */
    static getPropertyName(value: string): string;
    /**
     * This API determines if a specified value is a property
     * @param {string} value An annotated property
     * @returns {boolean} true if the specified value is a property else return false
     * @public
     * @example <caption>In this example, the API checks whether the passed value is Property</caption>
     * PCore.getAnnotationUtils().isProperty(value)
     * PCore.getAnnotationUtils().isProperty('@P .pyName') return true
     */
    static isProperty(value: string): boolean;
    /**
     * This API returns the leaf property name of an embedded property
     * @param {string} value an Annotated property
     * @returns {string} Return the leaf property of the annotated property
     * @private
     * @example <caption>In this example, the API returns the leaf property</caption>
     * PCore.getAnnotationUtils().getLeafPropertyName(value);
     * const leftProperty = PCore.getAnnotationUtils().getLeafPropertyName('@P .Expenses.Home');
     */
    static getLeafPropertyName(value: string): string;
    /**
     * This API returns whether the property is internal property or not
     * @param {string} propertyName an Annotated property
     * @returns {boolean} Return the boolean value
     * @private
     * @example <caption>In this example, the API returns the boolean value whether the property is internal or not</caption>
     * PCore.getAnnotationUtils().isPropertyInternal(value);
     * const isInternal = PCore.getAnnotationUtils().isPropertyInternal('Home');
     */
    static isPropertyInternal(propertyName: string): boolean;
}
export default AnnotationUtils;
