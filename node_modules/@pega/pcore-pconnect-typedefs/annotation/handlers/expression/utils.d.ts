import { C11nEnv } from '../../../interpreter/c11n-env';
import Expression from './expression';
/**
 * [createExpression]
 * Description : Returns an instance of the Expression for the flat string.
 * @param   {string}        expression       Flat expression string.
 * @returns {Expression}    Expression instance
 * @param {object} localData data
 */
declare const createExpression: (expression: any, localData: any) => Expression;
/**
 * [buildAst]
 * Description : Returns an AST for the expression string.
 * @param   {Expression}    expression      Instance of the Expression created for the flat expression string.
 * @returns {object}        AST
 */
declare const buildAST: (expression: any) => any;
/**
 * [evaluateExpression]
 * Description : Evalue the AST generated for the expression and returns the evaluation result
 * @param   {Expression}    expression      Instance of the Expression created for the flat expression string.
 * @param   {object}        store           Redux store
 * @returns {boolean}                       Evaluation Result
 */
declare const evaluateExpression: (expression: any, store: any) => any;
/**
 * This API evaluates the expression either on the given localData or data in the store
 * Note: The localeData will always take the priority over the data in the store
 * @param {string} filterExpression expression that has to be evaluated on the data
 * @param {*} data localData
 * @param {*} c11nEnv c11nEnv object of the current component
 * @returns {boolean} result of the evaluated expression
 */
declare const evaluateExpressionOnLocalData: (filterExpression: string, data: any, c11nEnv?: C11nEnv) => any;
export { createExpression, buildAST, evaluateExpression, evaluateExpressionOnLocalData };
