/**
 * [Expression]
 * Description : Creates an instance for the flat expression string on which different actions
 * can be peformed which are part of the evaluation process.
 * @class
 */
declare class Expression {
    private readonly _grammar;
    private readonly _expression;
    private _ast;
    private _context;
    private readonly _localDataObject;
    /**
     * Description : Expression instance of a flat expression string.
     * @class
     * @param   {string} expression Expression string.
     * @param {object} localData data
     */
    constructor(expression: any, localData: any);
    /**
     * [buildAST]
     * Description : Builds the Abstract Syntax Tree for an expression.
     * @returns {Expression}    Returns the updated instance with the AST.
     */
    buildAST(): this;
    /**
     * [evaluate]
     * Description : Evaluates the AST of the expression and retunrs the result.
     * @param   {object}        context     c11n object
     * @returns {boolean}       Evaluation result
     */
    evaluate(context: string): any;
    /**
     * [evaluateAST]
     * Description : Evaluates the AST of the expression and retunrs the result.
     * @param   {object}        ast         Abstract syntax tree
     * @returns {boolean}       Evaluation result
     */
    evaluateAST(ast: any): any;
}
export default Expression;
