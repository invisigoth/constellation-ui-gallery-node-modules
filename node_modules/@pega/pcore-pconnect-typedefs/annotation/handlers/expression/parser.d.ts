/**
 * [Parser]
 * Description : Parses the tokens and builds the AST
 * @class
 */
declare class Parser {
    private readonly _grammar;
    private _state;
    private _tree;
    private _exprStr;
    private readonly _endState;
    private _subParser;
    private _position;
    /**
     * Description : Parser
     * @class
     * @param   {object}        grammar     Supported grammar.
     * @param   {string}        subexpr     SubExpression for paranthesis type expressions.
     * @param   {object}        endState    States where the sub expression can end.
     */
    constructor(grammar: any, subexpr?: any, endState?: any);
    /**
     * [_setParent]
     * Description : Sets the parent for a node.
     * @static
     * @param {object}          node        Node for which parent has to be set.
     * @param {object}          parent      Parent node
     */
    static _setParent(node: any, parent: any): void;
    /**
     * [_addToken]
     * Description : Processes each token and sets the corresponding state and adds the token to the tree.
     * @private
     * @param   {object}        token       Token object
     */
    _addToken(token: any): any;
    /**
     * [addTokens]
     * Description : Adds all the tokens to the tree.
     * @param {Array}           tokens      List of all tokens of the expression string
     */
    addTokens(tokens: any): void;
    /**
     * [buildAst]
     * Description : Resturns the AST.
     * @returns {object}        Returns the tree
     */
    buildAst(): any;
    /**
     * [_startSubExpression]
     * Description : Starts a sub expression and creates its corresponding parser.
     * @private
     * @param {string}          exprStr        Subexpression
     */
    _startSubExpression(exprStr: any): void;
    /**
     * [_endSubExpression]
     * Description : Ends the sub expression and sets it parser to null.
     * @private
     */
    _endSubExpression(): void;
    /**
     * [setPositionInAST]
     * Description : Sets the current position at a specific node in the tree.
     * @param {object}          node        node where the position has to be set in the tree.
     */
    setPositionInAST(node: any): void;
}
export default Parser;
