/**
 * [Lexer]
 * Description : Provides APIs to tokenize and generate the AST for an expression.
 * @class
 */
declare class Lexer {
    private readonly _grammar;
    private _splitRegex;
    /**
     * Description : Lexer
     * @class
     * @param   {object}        grammar     Supported grammar.
     */
    constructor(grammar: any);
    /**
     * [_isNegative]
     * @static
     * Description : Determines if a token has valid a negative sign.
     * @param   {Array}         tokens      List of tokens
     * @returns {boolean}       true if the negative is valid else false.
     */
    static _isNegative(tokens: any): boolean;
    /**
     * [_isWhitespace]
     * @static
     * Description : Checks if the string has all white space characters.
     * @param   {string}        str         Token string
     * @returns {boolean}       true if all characters are whitespace else false
     */
    static _isWhitespace(str: string): boolean;
    /**
     * [_createWordboundary]
     * @static
     * Description : Add the word boundaries to the identifiers.
     * @param   {string}        str         Token string
     * @returns {string}        str         Token after escaping the escape characters.
     */
    static _createWordboundary(str: string): string;
    /**
     * [_unquote]
     * @static
     * Description : Unquotes the string.
     * @param   {string}         str        Token string
     * @returns {string}         Unquoted string
     */
    static _unquote(str: string): string;
    /**
     * [_getSplitRegex]
     * Description : Returns the regular expression to split the expression string into elements, which can
     * later be converted to token objects.
     * @private
     * @returns {RegExp}            Regular expression to split the expression string.
     *
     */
    _getSplitRegex(): any;
    /**
     * [_splitExpression]
     * Description : Splits the flat expression string into elements.
     * @private
     * @param   {string}            str     Expression string.
     * @returns {Array}             Elements array
     */
    _splitExpression(str: string): string[];
    /**
     * [_createToken]
     * Description : Creates a token object for an element split from the expression string.
     * @private
     * @param   {string}         element    Token String
     * @returns {object}         token      Token object
     *                               - tokenType
     *                               - value
     *                               - element
     */
    _createToken(element: any): {
        tokenType: string;
        value: any;
        element: any;
    };
    /**
     * [_getTokens]
     * Description : For each element split from the expression, creates a token object.
     * @private
     * @param   {Array}             elements        Elements split from the expression string.
     * @returns {Array}             tokens
     */
    _getTokens(elements: any): any[];
    /**
     * [tokenize]
     * Description : Public API on the Lexer class to tokenize an expression.
     * @param   {string}            exprStr         Expression string.
     * @returns {Array}             tokens
     */
    tokenize(exprStr: string): any[];
}
export default Lexer;
