import { C11nEnv } from '../interpreter/c11n-env';
/**
 * @description Use the APIs in the FeedUtils class to handle the feeds of a case.
 */
declare class FeedUtils {
    mentionsTagsCancelTokenSource: any;
    mentions: any;
    constructor();
    /**
     * Obtains the feeds for a given context.
     * @function
     * @static
     * @example <caption>In this example, the API obtains the feed of a case whose ID is pyDashboardFeed.</caption>
     * PCore.getFeedUtils().getFeeds('DATA-PORTAL', 'pyDashboardFeed','class','[{id: 'All', label: 'All', on: false, disabled: false}]',[],'app/primary_1',true)
     * .then(feedResponse => {
     *    // feedResponse array
     * }).catch(err => {
     *   // errors
     * });
     *
     * @param     {string}    pulseContext                     The name of the application context or case context for which the feed must be fetched.
     * @param     {string}    feedID                           The ID of the feed that must be fetched.
     * @param     {string}    feedClass                        The class associated with the feed to be fetched.
     * @param     {object[]}  feedFilters                      The list of conditions through which the feed to be fetched is filtered.
     * @param     {object[]}  fetchFeedsCancelTokenSource      The list of API requests for fetching the feed.
     * @param     {object}    c11nEnv                          The name of the context where the API is being called.
     * @param     {boolean}   isLoadMore                       The flag that determines if the next set of feeds should be loaded.
     * @returns   {Promise<object>}                            A Promise that resolves to an object.
     */
    getFeeds: (pulseContext: string, feedID: string, feedClass: string, feedFilters: [any], fetchFeedsCancelTokenSource: [any], c11nEnv: C11nEnv, isLoadMore: boolean) => any;
    /**
     * Posts a message to the given context.
     * @function
     * @static
     * @example <caption>In this example, the API adds the post along with attachment to the given context.</caption>
     * PCore.getFeedUtils().postMessage('DATA-PORTAL','test message', [{"type":"File","category":"File","fileName":"attachment.png","ID":"459c"}], false, 'app/primary_1')
     * .then(() => {
     *   // success
     * }).catch(err => {
     *    // Error handling
     * });
     * @example <caption>In this example, the API adds the reply to the post along with attachment to the provided context.</caption>
     * PCore.getFeedUtils().postMessage('PEGASOCIAL M-214007','test reply message', [{"type":"File","category":"File","fileName":"attachment.png","ID":"459c"}], true, 'app/primary_1')
     * .then(() => {
     *   // success
     * }).catch(err => {
     *    // Error handling
     * });
     * @param   {string}      pulseContext    The name of the application context or case context for which the message must be posted.
     * @param   {string}      message         The message that needs to be posted.
     * @param   {Array}       attachmentIDs   The metadata of the attachments that need to be posted along with the message.
     * @param   {boolean}     isReply         The flag that determines if you want to post a message or a reply to a message.The default value is false. Set isReply to true if you want to post a reply to a message. Set isReply to false if you want to post a message.
     * @param   {object}      c11nEnv         The name of the context where the API is being called.
     * @returns {Promise<object>}             A Promise that resolves to an object.
     */
    postMessage: (pulseContext: string, message: string, attachmentIDs: any[], isReply: boolean, c11nEnv: C11nEnv) => any;
    /**
     * Modifies a message associated with the given context.
     * @function
     * @static
     * @example <caption>In this example, the API edits the post whose messageID is W-103</caption>
     * PCore.getFeedUtils().editMessage({'W-103','W-103','test message','app/primary_1', false})
     * .then(() => {
     *   // success
     * }).catch(err => {
     *    // Error handling
     * });
     * @example <caption>In this example, the API edits the reply to the post whose messageID is W-104 and the parentMessageID is W-103</caption>
     * PCore.getFeedUtils().editMessage({'W-104','W-103','test reply message','app/primary_1', true})
     * .then(() => {
     *   // success
     * }).catch(err => {
     *    // Error handling
     * });
     * @param {object}    param                 The object that contains the required data to edit a message.
     * @param {string}    param.messageID       The unique identifier of the message that needs to be edited.
     * @param {string}    param.parentMessageID The unique identifier of the parent message that needs to be edited.
     * @param {string}    param.message         The new message that replaces the existing message.
     * @param {object}    param.c11nEnv         The name of the context where the API is being called.
     * @param {boolean}   param.isReply         The flag that determines if you want to post a message or a reply to a message. The default value is false. Set isReply to true if you want to edit a reply for a message. Set isReply to false if you want to edit a message.
     * @returns {Promise<object>}               A Promise that resolves to an object.
     */
    editMessage: ({ messageID, parentMessageID, message, c11nEnv, isReply }: any) => any;
    /**
     * @private
     * @param {object}  messageData   The object that contains the newly added/edited message details.
     * @param {boolean} isReply       The flag that determines if you want to post/edit a message or a reply to a message.
     * @param {object}  c11nEnv       The name of the context where the API is being called.
     * @param {boolean} hasAttachment The flag that determines if you have an attachment for a message.
     * @returns {object} MessageObject The messageObject
     */
    buildMessageObject: (messageData: any, isReply: boolean, c11nEnv: C11nEnv, hasAttachment?: boolean) => any;
    /**
     * @private
     * @param {Array} array This param carries the list of mention objects
     * @returns   The list of mention objects excluding the user mentions and duplicates
     */
    getCaseMentions: (array: any) => unknown[];
    /**
     * Likes or unlikes a message.
     * @function
     * @static
     * @example <caption>In this example, the API likes the message whose ID is W-103.</caption>
     * PCore.getFeedUtils().likeMessage({pulseContext:'DATA-PORTAL', likedBy: false, messageID:'W-103', isReply:false, c11nEnv:'app/primary_1'})
     * .then(() => {
     *    // success
     * }).catch(err => {
     *   // errors
     * });
     * @example <caption>In this example, the API dislikes the message whose ID is W-103. </caption>
     * PCore.getFeedUtils().likeMessage({pulseContext:'DATA-PORTAL', likedBy: true, messageID:'W-103', isReply:false, c11nEnv:'app/primary_1'})
     * .then(() => {
     *    // success
     * }).catch(err => {
     *   // errors
     * });
     * @example <caption>In this example, the API likes the reply whose ID is R-103.</caption>
     * PCore.getFeedUtils().likeMessage({pulseContext:'DATA-PORTAL', likedBy: false, messageID:'R-103', isReply:true, c11nEnv:'app/primary_1'})
     * .then(() => {
     *    // success
     * }).catch(err => {
     *   // errors
     * });
     * @example <caption>In this example, the API dislikes the reply whose ID is R-103.</caption>
     * PCore.getFeedUtils().likeMessage({pulseContext:'DATA-PORTAL', likedBy: true, messageID:'R-103', isReply:true, c11nEnv:'app/primary_1'})
     * .then(() => {
     *    // success
     * }).catch(err => {
     *   // errors
     * });
     * @param {object}    param               The object that contains all the required data to like or unlike a specific message.
     * @param {string}    param.pulseContext  The name of the application context or case context for which the feed must be fetched.
     * @param {boolean}   param.likedBy       The value that determines whether to like or unlike the message.
     * @param {string}    param.messageID     The ID of the message that needs to be liked or unliked.
     * @param {boolean}   param.isReply       The flag that determines whether the number of likes must be obtained for a message or a reply to a message.
     * @param {object}    param.c11nEnv       The name of the context where the API is being called.
     */
    likeMessage: ({ pulseContext, likedBy: unLiked, messageID, isReply, c11nEnv }: any) => void;
    /**
     * Deletes a message from a given context.
     * @function
     * @static
     * @example <caption>In this example, the API removes the reply whose ID is R-101 from a message whose ID is W-102.</caption>
     * PCore.getFeedUtils().deleteMessage('W-102', true, 'R-101', 'app/primary_1')
     * .then(() => {
     *    // success
     * }).catch(err => {
     *   // errors
     * });
     * @example <caption>In this example, the API removes the message whose ID is W-103 </caption>
     * PCore.getFeedUtils().deleteMessage('W-103', false, '', 'app/primary_1')
     * .then(() => {
     *    // success
     * }).catch(err => {
     *   // errors
     * });
     * @param {string}  messageID  The ID of the message that needs to be deleted.
     * @param {boolean} isReply    The flag that determines if you want to delete a message or a reply to a message.
     * @param {string}  replyID    The ID of the reply that needs to be deleted.
     * @param {object}  c11nEnv    The name of the context where the API is being called.
     */
    deleteMessage: (messageID: string, isReply: boolean, replyID: string, c11nEnv: C11nEnv) => void;
    /**
     * Obtains the list of users who liked the message.
     * @function
     * @static
     * @example <caption>In this example, the API obtains the list of users who liked the message with messageID:W-102</caption>
     * PCore.getFeedUtils().getLikedUsers(W-102, 'app/primary_1')
     * .then(response => {
     *    // response array
     * }).catch(err => {
     *   // errors
     * });
     *
     * @param     {string}      messageID         The ID of the message for which that liked users must be fetched.
     * @param     {object}      c11nEnv           The name of the context where the API is being called.
     * @returns   {Promise<object>}               A Promise that resolves to an object.
     */
    getLikedUsers: (messageID: string, c11nEnv: C11nEnv) => any;
    /**
     * Obtains the list of options for the selected object that can be mentioned in a Pulse post.
     * @function
     * @static
     * @example <caption>In this example, the API obtains the list of users that can be mentioned in a Pulse post.</caption>
     * PCore.getFeedUtils().getMentionSuggestions({searchFor:"case",mentionsType = 'Cases',listSize:5}, 'app/primary_1')
     * .then(mentionsResponse => {
     *    // mentionsResponse array
     * }).catch(err => {
     *   // errors
     * });
     * @param     {object}          mentionProps  The object that contains the search parameters for obtaining the list of options for the selected type of object.
     * @param     {object}          c11nEnv       The name of the context where the API is being called.
     * @returns   {Promise<object>}               A Promise that resolves to an object.
     */
    getMentionSuggestions: (mentionProps: any, c11nEnv: C11nEnv) => any;
    /**
     * Obtains the list of available types of objects that can be mentioned in a Pulse post.
     * @function
     * @static
     * @example <caption>In this example, the API obtains the list of available types of objects that can be mentioned in a Pulse post.</caption>
     * PCore.getFeedUtils().getMentionTypes()
     * .then(response => {
     *    // response array
     * }).catch(err => {
     *   // errors
     * });
     * @param     {object}          c11nEnv      The name of the context where the API is being called.
     * @returns   {Promise<object>}              A Promise that resolves to an object.
     */
    getMentionTypes: (c11nEnv: C11nEnv) => any;
    /**
     * Obtains the options suggested for selecting a tag for a given context.
     * @function
     * @static
     * @example <caption>In this example, the API obtains the tags for given context.</caption>
     * PCore.getFeedUtils().getTagSuggestions({searchFor:"test",listSize:5}, 'app/primary_1')
     * .then(tagsResponse => {
     *    // tagsResponse array
     * }).catch(err => {
     *   // errors
     * });
     * @param    {object}         tagProps      The object that contains the search parameters for obtaining the list of tags.
     * @param    {object}         c11nEnv       The name of the context where the API is being called.
     * @returns  {Promise<object>}              A Promise that resolves to an object.
     */
    getTagSuggestions: (tagProps: any, c11nEnv: C11nEnv) => any;
}
declare const _default: FeedUtils;
export default _default;
