/**
 * Provides APIs to set and get runtimeParams which will be used by nebula components
 * @class RuntimeParamsAPI
 */
declare class RuntimeParamsAPI {
    runtimeParams: any;
    runtimeParamsMap: any;
    constructor();
    /**
     * sets runtimeParams
     * @param {object} runtimeParams
     * @example <caption>PCore.getRuntimeParamsAPI().setRuntimeParams({})</caption>
     */
    setRuntimeParams(runtimeParams: any): void;
    /**
     * returns runtimeParams object
     * @example <caption>PCore.getRuntimeParamsAPI().getRuntimeParams()</caption>
     *
     * @returns {object}
     */
    getRuntimeParams(): any;
    /**
     * This API is used to set a value for the given property at the global level
     * @example <caption>
     * PCore.getRuntimeParamsAPI().setRuntimeParam('context', 'app');
     * </caption>
     * @param {string} key property key
     * @param {*} value property value
     */
    setRuntimeParam(key: string, value: string): void;
    /**
     * This API is used to get a specific for the given property at global level
     * @example <caption>
     * PCore.getRuntimeParamsAPI().setRuntimeParam('context', 'app');
     * const runtimeContext = RuntimeParamsAPI.getRuntimeParam('context');
     * </caption>
     * @param {*} key property key
     * @returns {*} property value
     */
    getRuntimeParam(key: string): any;
}
declare const _default: RuntimeParamsAPI;
export default _default;
