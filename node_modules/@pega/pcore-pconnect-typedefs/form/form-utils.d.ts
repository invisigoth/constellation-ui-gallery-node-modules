/**
 * @description
 * The FormUtilsclass contains utility APIs that handle form related scenarios
 */
declare class FormUtils {
    /**
     * This API returns the changed data of a given container's context
     * @param {string} context - The name of the context whose changed data information must be obtained
     * @returns {object} the changes state information
     * @public
     * @example <caption> getChanges API will return all the information about the data that has changed for that context</caption>
     * PCore.getFormUtils().getChanges("app/primary_1/workarea_1");
     * //output
     * {
     *  caseInfo: {
     *    content: {
     *        "name": "Optimus",
     *    }
     *   }
     * }
     */
    static getChanges(context: any): {};
    /**
     * This API returns whether a Redux State is modified or not for the given context.
     * @param {string} context - The name of the context.
     * @returns {boolean} returns true if redux state is modified for the given context else return false.
     * @public
     * @example <caption> isStateModified API will return true if the redux state that has changed for the given context otherwise it return false.</caption>
     * PCore.getFormUtils().isStateModified("app/primary_1/workarea_1");
     * //output
     * true
     */
    static isStateModified(context: any): boolean;
    /**
     * This API verifies whether form is valid or not based on the validation values for form fields
     * @param {string} context context of form fields to be validated
     * @returns {boolean} boolean
     * @public
     * @example <caption>In this example check whether form is valid or not</caption>
     * const isFormValid = PCore.getFormUtils().isFormValid("app/primary_1/workarea_1");
     */
    static isFormValid(context: any): boolean;
    /**
     * This API clears the changed properties object of the context.
     * @param {string} context The name of the context whose changed data information must be cleared
     * @returns {void}
     * @public
     * @example <caption>In this example clers the changed properties</caption>
     * PCore.getFormUtils().clearChangedProperties("app/primary_1/workarea_1");
     * Note : This API clears the changed properties object. Changed properties object  is used to know the form dirty status and during form submission, but
     * it will not clear the Redux state and form fields. After this API call if we try to get the changes using getChanges API we will get empty object.
     */
    static clearChangedProperties(context: any): void;
    /**
     * This API is to get the list of editable fields information from a context
     * @param {string} context context of editable form fields
     * @returns {Array} editable fields information in an array
     * @public
     * @example <caption>In this example bring all the editable fields from given context</caption>
     * const editableFields = PCore.getFormUtils().getEditableFields("app/primary_1/workarea_1");
     * [{
      "name": "caseInfo.content.City",
      "label": "city",
      "type": "textinput"
      }]
     */
    static getEditableFields(context: any): any[];
    /**
     * This API registers the custom validator function to the validators object which holds all the validator functions.
     * @param {string} type type of the validation like email etc.,
     * @param {Function} validatorFn validator function which contains the code logic to perform validation.
     *
     * @example <caption>Example for PCore.getFormUtils().setCustomValidator(type, fn)</caption>
     * PCore.getFormUtils().setCustomValidator('isAlpha', () => { // implementation code goes here..  // })
     * 'This example will register the isAlpha validator function in validators object with key as "isAlpha" and value as second parameter passed to this function'
     */
    static setCustomValidator(type: any, validatorFn: any): void;
    /**
     * This API is to check whether the provided property is editable or not for the given context.
     * @param {string} context context of editable form fields eg.. app/primary_1/workarea_1
     * @param {string} propertyReference complete reference path of the property eg.. caseInfo.content.PageList[0].Name
     * @returns {boolean} returns true if the provided property is Editable else returns false
     * @example <caption>Example for PCore.getFormUtils().isPropertyEditable('app/primary_1/workarea_1', 'caseInfo.content.PageList[0].Name')</caption>
     * The above example depicts whether the property 'Name' with reference 'caseInfo.content.PageList[0].Name' is editable or not.
     * @private
     */
    static isPropertyEditable(context: any, propertyReference: any): boolean;
}
export default FormUtils;
