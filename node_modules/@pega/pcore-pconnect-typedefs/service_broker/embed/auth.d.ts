declare class PegaAuth {
    config: any;
    ssKeyConfig: any;
    constructor(config: any, useSessionStorage?: boolean);
    static init(config: any, useSessionStorage?: boolean): PegaAuth;
    updateConfig(config: any, useSessionStorage?: boolean): void;
    reloadConfig(useSessionStorage?: boolean): void;
    buildAuthorizeUrl(state?: any): Promise<any>;
    getTokenAndFinish: (code: any) => void;
    authMessageHandler: (event: any) => void;
    getRedirectUriOrigin: () => any;
    getToken(authCode: string, useSessionStorage: any): any;
    sha256Hash(str: any): Promise<ArrayBuffer>;
    encode64(buff: any): string;
    base64UrlSafeEncode(buf: any): string;
    getCodeChallenge(code_verifier: any): Promise<string | void>;
}
export default PegaAuth;
