/**
 * Provides APIs for adding headers to requests invoked from Pega service broker infra.
 * These APIs can be used for different purposes such as adding Headers, unregistering them and getting all the registered headers.
 * @module HeaderProcessor
 */
declare class _HeaderProcessor {
    private externalHeaders;
    private defaultHeaders;
    private SPECIAL_CHARS;
    constructor();
    /**
     * This api is used to register external headers to the service broker fetch calls
     * @param {string} name name of the header that needs to be registered
     * @param {string} value value corresponding to the header name provided
     * @returns {boolean} returns false if a default header already exists by name else true in case of successfull registration
     * @example <caption>Example for registerHeader api</caption>
     * PCore.getRestClient().getHeaderProcessor().registerHeader(key, value)
     */
    registerHeader(name: string, value?: string): boolean;
    /**
     * This api is used to de-register external headers
     * @param {string} name header name to be de-registered
     * @example <caption>Example for unRegisterHeader api</caption>
     * PCore.getRestClient().getHeaderProcessor().unRegisterHeader(key)
     */
    unRegisterHeader(name: string): void;
    /**
     * This spi is used to return all the registered headers in form of a Json object
     * @returns {JSON} an object containing all the headers and its value as a Json object
     * @example <caption>Example for getRegisteredHeaders api</caption>
     * PCore.getRestClient().getHeaderProcessor().getRegisteredHeaders()
     */
    getRegisteredHeaders(): {
        [name: string]: string;
    };
    setDefaultHeaders(headersObj: any): void;
    getDefaultHeaders(): {
        [name: string]: string;
    };
    /**
     * add debug headers to fetch API calls
     * @param {object} debugInfo - Contains debugId
     * @returns {object} headers
     */
    addDebugHeaders(debugInfo?: any): {
        [x: string]: any;
    };
    getCoreHeadersFromContext(context: string): any;
    processCoreHeaders(headers: any, payload: any, context: string): void;
    injectCoreAdditionalHeaders(headers: any, payload: any, context: string, options: any): void;
}
declare const HeaderProcessor: _HeaderProcessor;
export default HeaderProcessor;
