import { C11nEnv } from '../interpreter/c11n-env';
import { ComponentMetadataConfig } from '../interpreter/types';
/**
 * @description
 * Provides the basic APIs to handle validation in the Constellation infrastructure
 */
declare class Validator {
    private validators;
    constructor();
    /**
     * Registers the validator function to the validators object which holds all the validator functions.
     * @param {string} name name of the validation like email etc.,
     * @param {Function} validatorFn validator function which contains the code logic to perform validation.
     *
     * @example <caption>Example for register()</caption>
     * Validator.register('isAlpha', () => { // implementation code goes here..  // })
     * 'This example will register the isAlpha validator function in validators object with key as "isAlpha" and value as second parameter passed to this function'
     */
    register(name: string, validatorFn: Function): void;
    /**
     * Returns the validator associated with validation type.
     * @param {string} name name of the validation.
     * @returns {Function} returns the validator
     *
     * @example <caption>Example for getValidator()</caption>
     * Validator.getValidator('urgencyvalue');
     * 'example usage returns the urgencyvalue validator function'.
     */
    getValidator(name: string): Function;
    /**
     * Performs required validation and returns the validation message
     * @param {string} name validation type
     * @param {string} prop name
     * @param {string} pageReference name
     * @param {string} value value to be validated
     * @param {string} context context name
     * @param {*} c11nEnv Constellation env object.
     *
     * @example <caption>Example for validateRequired()</caption>
     * Validator.validateRequired('radiobuttons', 'gender', 'male', 'app/primary_3', '[...] c11nEnv object');
     * `above example shows the usage of required validation on radiobuttons control with gender property under app/primary_3 context`.
     */
    validateRequired(name: string, prop: string, pageReference: string, value: string, context: string, c11nEnv: C11nEnv): any;
    /**
     * This Function helps to perform validation based on the validator name passed in first argument and
     * returns validation message.
     * @param {*} name validation type e.g. email, integer etc.
     * @param {string} prop name of the property binded to the component.
     * @param {string} pageReference - page reference of the property
     * @param {string} value value to be validated
     * @param {string} context context name
     * @param {*} c11nEnv Constellation env object of the component.
     *
     * @example <caption>Example for validateType()</caption>
     * Validator.validateType('email', 'businessEmail', 'abc@xyz.com', 'app/primary_4', '[...] c11nEnv object');
     * `above example shows the usage of email type validation on businessEmail property under app/primary_4 context`.
     */
    validateType(name: string, prop: string, pageReference: string, value: string, context: string, c11nEnv: C11nEnv): any;
    /**
     * Validates the field and returns the message if
     * validation fails
     * @param {*} name validation type
     * @param {string} prop name
     * @param {string} value value to be validated
     * @param {*} c11nEnv Constellation env object.
     *
     * @example <caption>Example for validate()</caption>
     * Validator.validate('integer', 'numberOfEmployees', 'abc@xyz.com', '[...] c11nEnv object');
     * `above example shows the usage of integer type validation on numberOfEmployees property.
     * Here the value passed is a string contains alphabet characters not an integer,
     * hence the validate api sets the "Invalid Number" error message in redux store`.
     */
    validate(name: string, prop: string, value: string, c11nEnv: C11nEnv): {
        message: any;
    };
    static messageDispatcher(prop: string, pageReference: string, context: string, message: string, fieldLabel: string): void;
    /**
     * Checks the metadata for any validator is
     * configured or not.
     * @param {object} metadata component metadata
     * @returns {boolean} returns the boolean.
     *
     * @example <caption>Example for isValidatorExist()</caption>
     * Validator.isValidatorExist({ "validatetype":  "required", 'other': 'properties...' });
     * 'we check for the validatetype property from metadata object. if validatetype key presents then consider as validator configured.'
     *
     */
    isValidatorExist(metadata: ComponentMetadataConfig): boolean;
}
declare const _default: Validator;
export default _default;
