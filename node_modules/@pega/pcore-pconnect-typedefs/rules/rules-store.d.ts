import { PropertyModel } from './types';
/**
 * Provides APIs to merge source rules to the store, and update viewStore and navigationStore, and to resolves views, fields
 * and dataPages
 * These APIs can be used for different purposes e.g. get propertyModel, update viewStore..
 * @module RulesStore
 * @private
 */
/**
 * [mergeStore]
 * Description : merges the store with the source rules based on the classID. If a rule with the same name and classID
 * exists it will be merged, else created.
 * @function mergeStore
 * @param {*} rules   source rules
 * @param {*} store   Existing store
 * @static
 * @returns {void}
 *
 * @example <caption>Example for mergeStore.</caption>
 * PCore.getMetadataUtils().mergeStore({ apartment: { classID: "c-1" }}, {})
 * example for merging the apartment field rule into the store
 */
export declare const mergeStore: (rules?: {
    [key: string]: any;
}, store?: {
    [key: string]: any;
}) => void;
/**
 * returns copy of property model from store or null
 * @function getPropertyMetadata
 * @param {string} propertyName property name like 'FirstName'
 * @param {string} currentClassID class id to which property belongs to
 * @static
 * @returns {object | Array | null} returns copy of property model from store or null
 *
 * @example <caption>Example for getPropertyMetadata.</caption>
 * PCore.getMetadataUtils().getPropertyMetadata('apartment', 'c-1')
 * example to get metadata of the field apartment under class c-1
 */
export declare const getPropertyMetadata: (propertyName: string, currentClassID: string) => PropertyModel | null;
/**
 * returns copy of embedded property's leafNode model from store or null
 * @function getEmbeddedPropertyMetadata
 * @param {string} propertyName property name like 'Customer.Address.City'
 * @param {string} currentClassID class id to which first level property belongs to
 * @param {array} categoryPath category to which the current field belongs.
 * @static
 * @returns {object | null} returns copy of embedded property's leafNode model from store or null
 *
 * @example <caption>Example for getEmbeddedPropertyMetadata.</caption>
 *
 * {Customer: [{ classID: 'c-1', pageClass: 'c-2', label:'Customer' }],
 *  Address: [{ classID: 'c-2', pageClass: 'c-3', label:'Address' }],
 *  City: [{ classID: 'c-3', label:'City' }]}
 *
 * PCore.getMetadataUtils().getEmbeddedPropertyMetadata('Customer.Address.City', 'c-1')=> returns { classID: 'c-3', category: 'Customer.Address' };
 * example to get metadata of the leafProperty 'City' which needs to be resolved from the top level class 'c-1'
 */
export declare const getEmbeddedPropertyMetadata: (propertyName: string, currentClassID: string, embeddedType?: string, categoryPath?: any[]) => object | null;
/**
 * This API updates the view store
 * @function updateViewStore
 * @param {object} views the object of the views
 * @static
 * @returns {void}
 *
 * @example <caption>Example for updateViewStore.</caption>
 * PCore.getMetadataUtils().updateViewStore({
 *  "view1": { a: 'a' }
 *});
 * example for updating view store with View1
 */
export declare const updateViewStore: (views: any) => void;
/**
 * This API updates the navigation
 * @function updateNavigationStore
 * @param {object} navigations the object of navigation rules
 * @static
 * @returns {void}
 *
 * @example <caption>Example for updateNavigationStore.</caption>
 * PCore.getMetadataUtils().updateNavigationStore({
 *      Navigation1: {
 *          nav: "nav"
 *      }
 *});
 * example for updating navigation store with Navigation1
 */
export declare const updateNavigationStore: (navigations: any) => void;
/**
 * Update store with given resources
 * @function updateStores
 * @param {object} resources uiMetadata - meta data information
 * @static
 * @returns {void}
 *
 * @example <caption>Example for updateStores.</caption>
 * PCore.getMetadataUtils().updateStores({
 *   resources: {
 *     personalizations: {
 *        "test1234": {}
 *  }
 *  }
 *});
 * example for updating store with personalizations
 */
export declare const updateStores: (resources: any) => void;
/**
 * Will provide view object
 *
 * @function resolveView
 * @param {string} name - view name
 * @static
 * @returns {object} returns view rule
 *
 * @example <caption>Example for resolveView.</caption>
 * PCore.getMetadataUtils().resolveView("View1");
 * example for getting "View1" view rule object
 */
export declare const resolveView: (name: any) => any;
/**
 * Will provide navigation object
 *
 * @function resolveNavigation
 * @param {string} name - navigation name
 * @static
 * @returns {object} returns navigation rule
 *
 * @example <caption>Example for resolveNavigation.</caption>
 * PCore.getMetadataUtils().resolveNavigation("Navigation1");
 * example for getting "Navigation1" navigation rule object
 */
export declare const resolveNavigation: (name: any) => any;
/**
 * This API returns dataPage rule if present in dataPageModelStore
 *
 * @function getDataPageMetadata
 * @param {string} dataPageName name of the dataPage
 * @static
 * @returns {object | null } returns dataPage if present or return null
 *
 * @example <caption>Example for getDataPageMetadata.</caption>
 * PCore.getMetadataUtils().getDataPageMetadata("dataPage");
 * example for getting "dataPage" under "datapages" in resources
 */
export declare const getDataPageMetadata: (dataPageName: string) => any;
/**
 * This API returns personalizationId rule if present in personalizationStore
 *
 * @function getPersonalizationMetadata
 * @param {string} personalizationId personalization id
 * @static
 * @returns {object | null} returns personalizationId if present or return null
 *
 * @example <caption>Example for getPersonalizationMetadata.</caption>
 * PCore.getMetadataUtils().getPersonalizationMetadata("PersonalizationSample");
 * example for getting "PersonalizationSample" under "personalizations" in resources
 */
export declare const getPersonalizationMetadata: (personalizationId: string) => any;
/**
 * This API returns insightId rule if present in insightStore
 *
 * @function getInsight
 * @param {string} insightId insight id
 * @static
 * @returns {object | null} returns insight object if present or return null
 *
 * @example <caption>Example for getInsight.</caption>
 * PCore.getMetadataUtils().getInsight("InsightId");
 * example for getting "InsightId" under "insights" in resources
 */
export declare const getInsight: (insightId: string) => any;
/**
 * This API returns fields of given class name
 *
 * @function getFieldsByClassName
 * @param {string} className name of the class
 * @static
 * @returns {object} returns object of the fields for the given class name
 *
 * @example <caption>Example for getFieldsByClassName.</caption>
 * PCore.getMetadataUtils().getFieldsByClassName("O02LDN-CosmoReact-Work-Test ");
 * example for getting fields of the "O02LDN-CosmoReact-Work-Test" class
 */
export declare const getFieldsByClassName: (className: string) => {
    [key: string]: any;
};
export declare const getFieldParameters: (propertyName: string, classID: string) => any;
export declare const getParagraph: (paragraphName: string, classID: string) => any;
export declare const getSavableDataPage: (dataClass: string) => any;
export declare const getDataPageKeys: (dataPageName: string) => {
    [key: string]: any;
};
export declare const getLookUpDataPage: (dataClass: string) => any;
export declare const getLookUpDataPageInfo: (dataClass: string) => any;
