import SuggestionsContext from './suggestions-utils';
/**
 * helper functions for Redux State
 */
declare class StateUtils {
    /**
     * this function helps to resolve the property value from the shared state (Redux store).
     * @param {string} key property whose data value is returned
     * @returns { any } property value from the shared state (Redux store) if shared object present else return null.
     * @public
     * @static
     * @example <caption>Example for getSharedState </caption>
     * const callInfo = PCore.getStateUtils().getSharedState('sharedObject');
     * callInfo variable contains the value retrieved from shared state of redux store.
     *  @example <caption>Example for sharedObject </caption>
     * {
        number: '+(603) 345 456'
        status: 'Online'
     * }
     */
    static getSharedState(key: any): any;
    /**
     * this function helps to assign the value to property name (or key) in state (Redux store).
     * @param {string} key property name whose data value need to set
     * @param { any } value property value which needs to get assigned to the passed key in Redux Store.
     * @returns {void}
     * @public
     * @static
     * @example <caption>Example for setSharedState </caption>
     * PCore.getStateUtils().setSharedState('sharedObject', {
        number: '+(603) 345 456'
        status: 'Online'
     * });
     * // here examples shows setting the `lorem ipsum` value in firstName property
     */
    static setSharedState(key: any, value: any): void;
    /**
     * This API Updates the value of a property in the Store with the specified context and page reference.
     * @param {string} context The context of the property that must be updated
     * @param {string} key The ID of the property whose value must be updated
     * @param { any } value The value that must be assigned to the property
     * @param {object} options - The object containing the properties to enhance the functionality of this API
     * @param {string} options.pageReference - The reference to the page that contains the property that must be updated
     * @param {boolean} options.isArrayDeepMerge - The flag that decides if the values within an array must be deep merged or replaced in the Store
     * @returns {void}
     * @public
     * @static
     * @example <caption>Example for updateState</caption>
     * PCore.getStateUtils().updateState(context, key, value, options);
     * PCore.getStateUtils().updateState("app/modal_1", "City", "Hyderbad", { pageReference: "caseInfo.content" });
     * PCore.getStateUtils().updateState("app/modal_1", "CountryList", [], { pageReference: "caseInfo.content", isArrayDeepMerge: false });
     */
    static updateState(context: any, key: any, value: any, options?: {}): void;
    /**
     * Obtains an entry point to the SuggestionsContext object that contains APIs to perform actions on the Suggestions Context.
     * @public
     * @param {string} context The name of the context based on which the Suggestions Context is created.
     * @returns {object} - SuggestionsContext object {@link SuggestionsContext}
     * @example <caption>Example for getSuggestionsContext</caption>
     * In this example, the API returns the SuggestionsContext object for the app/primary_1/workarea_1 context.
     * PCore.getStateUtils().getSuggestionsContext('app/primary_1/workarea_1')
     */
    static getSuggestionsContext(context: any): SuggestionsContext;
}
export default StateUtils;
