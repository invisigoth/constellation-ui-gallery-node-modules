export declare const mergeData: (actionPayload: any, options?: {}) => {
    type: string;
    payload: any;
};
export declare const showHarness: (actionPayload: any) => {
    type: string;
    payload: any;
};
export declare const loadView: (actionPayload: any) => {
    type: string;
    payload: any;
};
export declare const showPage: (actionPayload: any) => {
    type: string;
    payload: any;
};
export declare const addWork: (actionPayload: any) => {
    type: string;
    payload: any;
};
export { createWorkAction as createWork } from '../../../case/create-work/action-creator';
export declare const openWorkByHandle: (actionPayload: any) => {
    type: string;
    payload: any;
};
export declare const initContainers: (payload: any) => {
    type: string;
    payload: any;
};
export declare const resetContainers: (payload: any) => {
    type: string;
    payload: any;
};
export declare const addContainerItem: (payload: any) => {
    type: string;
    payload: any;
};
export declare const addTransientItem: (payload: any) => {
    type: string;
    payload: any;
};
export declare const updateTransientData: (payload: any) => {
    type: string;
    payload: any;
};
export declare const clearTransientData: (payload: any) => {
    type: string;
    payload: any;
};
export declare const purgeTransientData: (payload: any) => {
    type: string;
    payload: any;
};
export declare const updateContainerItem: (payload: any) => {
    type: string;
    payload: any;
};
export declare const upMergeAndRemoveContainerItem: (payload: any) => {
    type: string;
    payload: any;
};
export declare const activateContainerItem: (payload: any) => {
    type: string;
    payload: any;
};
export declare const addMessages: (payload: any) => {
    type: string;
    payload: any;
};
export declare const removeContainerItem: (payload: any) => {
    type: string;
    payload: any;
};
export declare const removeAllTransientItems: (payload: any) => {
    type: string;
    payload: any;
};
export declare const removeTransientItem: (payload: any) => {
    type: string;
    payload: any;
};
export declare const replaceContainerItem: (payload: any) => {
    type: string;
    payload: any;
};
export declare const finishAssignment: (actionPayload: any) => {
    type: string;
    payload: any;
};
export declare const openAssignment: (actionPayload: any) => {
    type: string;
    payload: any;
};
export declare const showHistory: (actionPayload: any) => {
    type: string;
    payload: any;
};
/**
 * returns the next action object
 *
 * @param {*} nextAction next action creator function.
 * @param {*} restArguments rest arguments
 * @returns {*} next action object.
 */
export declare const postProcess: (nextAction: any, ...restArguments: any[]) => any;
/**
 * returns the error action object
 *
 * @param {string} msg message for the error.
 * @param {*} err actual error object
 * @param {*} context object.
 * @param {Array} formFields actual formFields.
 * @returns {*} returns the action object.
 */
export declare const error: (msg: any, err: any, context?: string, formFields?: any, actionMgrID?: string) => {
    type: string;
    payload: {
        msg: any;
        err: any;
        context: string;
        formFields: any;
        actionMgrID: string;
    };
};
/**
 * returns the add shared data action object
 * @param {*} payload payload to attach in action
 * @returns {object} returns the action object
 */
export declare const addSharedData: (payload: any) => {
    type: string;
    payload: any;
};
/**
 * returns the remove shared data action object
 * @param {*} payload payload to attach in action
 * @returns {object} returns the action object
 */
export declare const removeSharedData: (payload: any) => {
    type: string;
    payload: any;
};
/**
 * returns the list action object
 * @param {*} payload payload to attach in action
 * @returns {object} returns the action object
 */
export declare const listAction: (payload: any) => {
    type: string;
    payload: any;
};
/**
 * returns the remove shared data action object
 * @param {*} payload payload to attach in action
 * @returns {object} returns the action object
 */
export declare const showCasePreview: (payload: any) => {
    type: string;
    payload: any;
};
export declare const setSharedProperty: (payload: any) => {
    type: string;
    payload: any;
};
/**
 * returns the set state property action object
 * @param {*} payload payload to attach in action
 * @returns {object} returns the action object
 */
export declare const setStateProperty: (payload: any) => {
    type: string;
    payload: any;
};
