export declare const FORM_DIRTY_MESSAGE = "You will lose unsaved changes. Do you want to continue?";
export declare const MAX_DOCUMENT_LIMIT_REACHED = "You have reached maximum limit of pending changes. Please commit/cancel one or more changes to continue.";
/**
 * Builds form submit object. Object will be
 * in json format.
 * @param {*} context Context whose changes will be returned
 * @param {boolean} includeHiddenFields check to whether add hiddenFields or not to the state
 */
export declare const getChanges: (context: string, includeHiddenFields: boolean, includeReadOnlyFields?: any) => {};
export declare const mergeListChanges: (context: string, resultObj?: {}) => void;
export declare const isComplexObjectMerged: (context: string) => any;
export declare const updateChangeList: ({ value, context, reference }: any) => void;
/**
 * Returns true if the form in the passed context is dirty.
 * @param {*} context Context whose dirtyness will be checked.
 */
export declare const isContextDirty: (context: string) => boolean;
/**
 * Resets the changedProperties map.
 * @param {*} context thread name
 */
export declare const resetChangedProperties: (context: string) => void;
declare const _default: {
    propertyChangeMiddleware: (store: any) => (next: any) => (action: any) => void;
    getChanges: (context: string, includeHiddenFields: boolean, includeReadOnlyFields?: any) => {};
    recordChange: (action: any) => void;
    isDirty: () => boolean;
    isPropertyDirty: (context: string, property: string) => boolean;
    isContextDirty: (context: string) => boolean;
    resetChangedProperties: (context: string) => void;
    deleteRecordedChange: (payload: any) => void;
    isComplexObjectMerged: (context: string) => any;
};
export default _default;
