/**
 * @description
 * The Datapage Class contains utility APIs to retrieve data from data pages.
 */
declare class DataPageUtils {
    isCacheDisabled: boolean;
    constructor();
    /**
     * API to get data page results from cache
     * @param {string} dataPageName data page name
     * @param {object} parameters parameters associated to it.
     * parameters: {
     *  "paramName": "paramValue"
     * }
     * @param {object} paging object containing information about the paging
     * paging: {
     *  "pageNumber": 2,
     *  "pageSize": 60
     * }
     * @param {object} query object containing information about the list of columns, filters
     * @private
     */
    getData(dataPageName: any, parameters: {}, paging: any, query: any): any;
    _generateHash(dataPageName: any, parameters: any, query: any): any;
    /**
     * API to get list type of data page results
     * @param {string} dataPageName name of the list type of data page whose results to be fetched
     * @param {string} context context name
     * @param {object} parameters optional, object containing parameters associated to the datapage.
     * @param {object} paging optional, object containing information about the paging
     * @param {object} query optional, object containing information about the list of columns, filters
     * @param {object} options Optional, Javascript object containing optional preferences for fetching data page results
     * @param {boolean} [options.invalidateCache] -  the flag that indicates whether the cache needs to invalidated for the current parameter set passed<br>
     * @param {boolean} [options.purgeDataPageCache] - the flag that indicates whether the cache needs to invalidated for all the parameter sets of the datapage passed<br>
     * {
     *  invalidateCache: true,
     *  purgeDataPageCache: true
     * }
     * @returns {object} response object with list type datapage results
     * @example  <caption>In the example below, the API retrieves the first 10 records of D_EmployeeList</caption>
     * const dataViewName = "D_EmployeeList";
     * const parameters = {
     * "dept": "Engineering"
     * };
     * const paging = {
     *  "pageNumber":1,
     *  "pageSize":10
     * };<br>
     * const query = {
     *  "distinctResultsOnly": true,
     *  "select": [
     *   {
     *     "field": "Name"
     *    },
     *   {
     *    "field": "Role"
     *   },
     *   {
     *    "field": "Gender"
     *   }
     *  ]
     * };
     * const context = "app/primary_1";
     * PCore.getDataPageUtils().getDataAsync(dataViewName, context, paramneters, paging, query);
     * .then(response => {
     *  // The response of this API is as shown below:
     *  {
     *      data: [
     *        {
     *          "Name" : "Mark D",
     *          "Role" : "Software Engineer",
     *          "Gender" "Male"
     *        },
     *        {
     *          "Name" : "Lara",
     *          "Role" : "Electrician",
     *          "Gender" "Female"
     *        }
     *      ]
     *      fetchDateTime: "2020-06-29T11:06:24.329Z"
     *      pageNumber: 1
     *      pageSize: 10
     *  }
     * })
     * .catch(error => {
     *    console.log(error);
     * });
     *
     * @public
     */
    getDataAsync(dataPageName: any, context: any, parameters: {}, paging: any, query: any, options?: {}): Promise<any>;
    /**
     * API to get page type of data page results
     * @param {string} dataPageName name of the page type of data page whose results to be fetched
     * @param {string} context - optional, name of the context
     * "app/primary_1"
     * @param {object} parameters optional, object containing parameters associated to data page.
     * parameters: {
     *  "paramName": "paramValue"
     * }
     * @param {object} options - optional, Javascript object containing optional preferences for fetching data page results
     * @param {boolean} [options.invalidateCache] -  The flag that indicates whether the cache needs to invalidated for the current parameter set passed<br>
     * {
     *  invalidateCache: true
     * }
     * @returns {object} response object with page type datapage result
     * @example  <caption>In the example below, the API retrieves the D_FollowedBugsCount page type datapage result</caption>
     *  const dataViewName = "D_FollowedBugsCount";
     *  const parameters = {
     *  "ID": "12311"
     *` };
     *  const context = "app/primary_1";
     *  const options = {
     *   invalidateCache: true;
     *  }
     * PCore.getDataPageUtils().getPageDataAsync(dataViewName, context, parameters, options);
     * .then(response => {
     *  // The response of this API is as shown below:
     *  {
     *    "MyFollowedBugsCount":16,
     *    "pzLoadTime":"August 25, 2022 9:50:59 PM UTC",
     *    "pzPageNameHash":"_pa42316787137117pz"}
     * })
     * .catch(error => {
     *    console.log(error);
     * });
     * @public
     */
    getPageDataAsync(dataPageName: any, context: any, parameters?: {}, options?: {}): Promise<any>;
    updateDataPageStore(sharedDataPages?: {}): void;
    _mergeDataStore(dataPageName: any, parameters: any, paging: any, query: any, results: any): any;
    _fetchData(dataPageName: any, parameters: any, paging: any, query: any, context: any, options: any): Promise<any>;
    isDataPage(propertyRef?: string): boolean;
    _handleCascadeUpdate(): void;
    subscribeToUpdate(dataPageName: any, dependentFields: any, context: any, pageReference: any, callback: any, subscriptionId: any): void;
    unsubscribe(dataPageName: any, dependentFields: any, context: any, pageReference: any, subscriptionId: any): void;
    _subscribeToCascadeUpdates(dataPageName: any, dependentFields: any, context: any, pageReference: any, subscriptionId: any): void;
    _subscribeToMessageService(dataPageName: any): void;
    /**
     * Message recieved from web socket service.
     * @param {*} data  = {message, msgId}  format
     * {
     *  matcher: "DATAPAGE_UPDATED",
     *  message: {
     *      "datapage": "D_Test"
     *  }
     * }
     * @private
     */
    _handleMessage(data: any): void;
    _markDataInstancsDirty(dataPageName: any): void;
    _isPerInteraction(dataPageName: any): boolean;
    _isCacheable(dataPageName: any, query: any): boolean;
    /**
     * disable or enable the cache for
     * @param {boolean} cacheDisable value whether Cache Should be disabled or enabled
     * @example  <caption>In the example below, the API set the value to disable or enable the cache. </caption>
     *  PCore.getDataPageUtils().disableCache(true)
     */
    disableCache(cacheDisable: any): void;
}
declare const _default: DataPageUtils;
export default _default;
