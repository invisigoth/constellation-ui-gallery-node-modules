import FlowContainer from './flow-container';
export declare const CONTAINER_TYPES: {
    SINGLE: string;
    MULTIPLE: string;
};
export declare const CONTAINER_NAMES: {
    PRIMARY: string;
    WORKAREA: string;
    MODAL: string;
    PREVIEW: string;
};
/**
 * this function returns the container data for the given container name
 * @function getContainerData
 * @param {string} target -- target container
 * @returns {*} returns -- State Object for the given container
 * @static
 *
 * @example  <caption>Example for getContainerData.</caption>
 * PCore.getContainerUtils().getContainerData('app/primary');
 * example for getting containers info under app/primary target
 */
export declare const getContainerData: (target: any) => any;
/**
 * this function returns the container data for the given container name
 * @private
 * @function getContainerItemData
 * @param {string} target -- target container
 * @param {string} containerItem -- target container item
 * @returns {*} returns -- State Object for the given container item
 * @static
 *
 * @example  <caption>Example for getContainerItemData.</caption>
 * PCore.getContainerUtils().getContainerItemData('app/primary', 'app/primary_1');
 * example for getting containenr item app/primary_1 data under app/primary target
 */
export declare const getContainerItemData: (target: any, containerItem: any) => any;
/**
 * this function returns the container items data for the given target
 * @function getContainerItems
 * @param {string} target -- target container
 * @returns {object} returns -- container items data for the given target
 * @static
 *
 * @example  <caption>Example for getContainerItems.</caption>
 * PCore.getContainerUtils().getContainerItems('app/primary');
 * example for getting container items info under app/primary target
 */
export declare const getContainerItems: (target: any) => any;
/**
 * this function returns the container accessOrder data for the given target
 * @function getContainerAccessOrder
 * @param {string} target -- target container
 * @returns {Array} returns -- container accessOrder data for the given target
 * @static
 *
 * @example  <caption>Example for getContainerAccessOrder.</caption>
 * PCore.getContainerUtils().getContainerAccessOrder('app/primary');
 * example for getting container accessOrder info under app/primary target
 */
export declare const getContainerAccessOrder: (target: any) => any;
/**
 * this function returns the container items present or not for the given target
 * @function areContainerItemsPresent
 * @param {string} target -- target container
 * @returns {boolean} returns -- container items present or not for the given target
 * @static
 *
 * @example  <caption>Example for areContainerItemsPresent.</caption>
 * PCore.getContainerUtils().areContainerItemsPresent('app/primary');
 * example for are container items present under app/primary target
 */
export declare const areContainerItemsPresent: (target: any) => boolean;
/**
 * this function determines whether a containeritem present with given key in a target container.
 * @function isContainerItemExists
 * @param {string} target -- target container  e.g. app/primary
 * @param {string} key -- unique key name e.g app/view/1
 * @param {Function} callback A function to execute on unique key in each containerItem until the function returns true,
 * indicating that the satisfying containerItem was found. if callback is undefined, we use strict comparison for key match.
 * @returns {boolean} returns -- true if containeritem already exists in store OR
 *                            -- false if no containeritem found with param information
 * @static
 *
 * @example  <caption>Example for isContainerItemExists.</caption>
 * PCore.getContainerUtils().isContainerItemExists('app/primary', 'R-1234');
 * example for getting to know whether 'R-1234' Work Item under 'app/primary' target exists or not
 */
export declare const isContainerItemExists: (target: any, key: any, callback: any) => boolean;
/**
 * this function returns containeritem name if unique key is present in containers data.
 * @function getContainerItemName
 * @param {string} target -- target container  e.g. app/primary
 * @param {string} key -- key name e.g app/view/1
 * @param {Function} callback -- A function to execute on unique key in each containerItem until the function returns true,
 * indicating that the satisfying containerItem was found. if callback is undefined, we use strict comparison for key match.
 * @returns {string} returns -- item name if container already exists in store OR
 *                            -- null if no container found with param information
 * @static
 *
 * @example  <caption>Example for getContainerItemName.</caption>
 * PCore.getContainerUtils().getContainerItemName('app/primary', 'R-1234');
 * example for getting container item name for 'R-1234' Work Item under 'app/primary' target.
 */
export declare const getContainerItemName: (target: string, key: string, callback?: Function) => string;
/**
 * this function gives whether container is initialised in corresponding context
 * @function isContainerInitialized
 * @param {string} context -- context of the container e.g. app/primary_1
 * @param {string} name -- container name e.g. workarea
 * @returns {boolean} returns -- is container initialized
 * @static
 *
 * @example  <caption>Example for isContainerInitialized.</caption>
 * PCore.getContainerUtils().isContainerInitialized('app', 'primary');
 * example for getting to know whether container initliazed or not for provided information
 */
export declare const isContainerInitialized: (context: any, name: any) => any;
/**
 * this function gives the container type
 * @function getContainerType
 * @param {string} context -- context of the container e.g. app/primary_1
 * @param {string} name -- container name e.g. workarea
 * @returns {string} returns -- container type e.g single or multiple
 * @static
 *
 * @example <caption>Example for getContainerType.</caption>
 * PCore.getContainerUtils().getContainerType('app', 'primary');
 * example for getting container type for provided information
 */
export declare const getContainerType: (context: any, name: any) => any;
/**
 * this functions gives active containeritem under provided target container
 * @function getActiveContainerItemName
 * @param {string} target -- target container e.g. app/primary
 * @returns {string} returns -- container name e.g app/primary_4
 * @static
 *
 * @example <caption>Example for getActiveContainerItemName.</caption>
 * PCore.getContainerUtils().getActiveContainerItemName('app/primary_1/workarea');
 * example for getting Active Container ItemName under 'app/primary_1/workarea' target.
 *
 * @example <caption>Example for getActiveContainerItemName.</caption>
 * PCore.getContainerUtils().getActiveContainerItemName('app/primary');
 * example for getting Active Container ItemName under 'app/primary' target.
 *
 */
export declare const getActiveContainerItemName: (target: any) => any;
/**
 * this functions helps to determine if containeritem is active or not with given inputs
 * @function isContainerItemActive
 * @param {string} target -- target container e.g. app/primary
 * @param {string} key -- unique key of the containeritem  e.g app/view/1
 * @param {Function} callback -  A function to execute on unique key in each containerItem until the function returns true,
 * indicating that the satisfying containerItem was found. if callback is undefined, we use strict comparison for key match.
 * @returns {boolean} - 1) true if passed in containerItemName is active
 *                    - 2) false if passed in containerItemName is not active
 * @static
 *
 * @example <caption>Example for isContainerItemActive with comparator function.</caption>
 * PCore.getContainerUtils().isContainerItemActive('app/primary', 'R-1234', (key, semanticURL) => {  });
 * example for checking 'R-1234' Work Item is active or not under 'app/primary' target.
 *
 *
 * @example <caption>Example for isContainerItemActive without comparator function.</caption>
 * PCore.getContainerUtils().isContainerItemActive('app/primary', 'W-67');
 * example for checking 'W-67' Work Item is active or not under 'app/primary' target.
 *
 */
export declare const isContainerItemActive: (target: any, key: any, callback: any) => boolean;
/**
 * this functions gives data context name for provided containeritem
 * @function getDataContextName
 * @param {string} containerItemName -- containeritem name e.g. app/primary_4
 * @returns {string} - 1) data context if passed in containeritem is present in any of the containers
 *                   - 2) null if no data found
 * @static
 *
 * @example <caption>Example for getDataContextName.</caption>
 * PCore.getContainerUtils().getDataContextName('app/primary_3');
 * example is for returning data context name for container item name --> 'app/primary_3'
 *
 * @example <caption>Example for getDataContextName.</caption>
 * PCore.getContainerUtils().getDataContextName('app/primary_2/workarea_1');
 * example is for returning data context name for container item name --> 'app/primary_2/workarea_1'
 */
export declare const getDataContextName: (containerItemName: any) => any;
/**
 * this functions gives active container context under provided target container
 * @function getActiveContainerItemContext
 * @param {string} target -- target container e.g. app/primary
 * @returns {string} returns -- container context e.g app/primary_4
 * @static
 *
 * @example <caption>Example for getActiveContainerItemContext.</caption>
 * PCore.getContainerUtils().getActiveContainerItemContext('app/primary_1/workarea');
 * example for getting Active Container Item Context under 'app/primary_1/workarea' target.
 *
 * @example <caption>Example for getActiveContainerItemContext.</caption>
 * PCore.getContainerUtils().getActiveContainerItemContext('app/primary');
 * example for getting Active Container Item Context under 'app/primary' target.
 *
 */
export declare const getActiveContainerItemContext: (target: any) => any;
/**
 * This functions returns child containeritems for given parent containeritem
 * @function getChildContainerItems
 * @param {string} containerItemName -- containeritem name e.g. app/primary_4
 * @returns {Array} e.g. array of child container item names['app/primary_4/workarea_1', 'app/primary_4/workarea_3']
 * @static
 *
 * @example <caption>Example for getChildContainerItems.</caption>
 * PCore.getContainerUtils().getChildContainerItems('app/primary_3');
 * example is for returning child containeritems present under 'app/primary_3' (parent containeritem name)
 *
 * @example <caption>Example for getChildContainerItems.</caption>
 * PCore.getContainerUtils().getChildContainerItems('app/secondary_2');
 * example is for returning child containeritems present under 'app/secondary_2' (parent containeritem name)
 */
export declare const getChildContainerItems: (containerItemName: any) => any[];
/**
 * This functions returns child containers for given parent container name
 * @function getChildContainers
 * @param {string} containerItemName -- containeritem name e.g. app/primary_1
 * @returns {Array} e.g. array of child container names['app/primary_1/workarea']
 * @private
 *
 * @example <caption>Example for getChildContainers.</caption>
 * PCore.getContainerUtils().getChildContainers('app/primary_1');
 * example is for returning child containers present under 'app/primary_1' (parent containeritem name)e
 *
 * @example <caption>Example for getChildContainers.</caption>
 * PCore.getContainerUtils().getChildContainers('app/primary_2');
 * example is for returning child containers present under 'app/primary_2' (parent containeritem name)
 */
export declare const getChildContainers: (containerItemName: any) => any[];
/**
 * This functions returns child containers for given parent container name
 * @function getChildContainersContexts
 * @param {string} parentContainerItemID -- containeritem name e.g. app/primary_1
 * @returns {Array} e.g. array of child container names['app/primary_1/workarea']
 * @private
 *
 * @example <caption>Example for getChildContainersContexts.</caption>
 * PCore.getContainerUtils().getChildContainers('app/primary_1');
 * example is for returning child containers present under 'app/primary_1' (parent containeritem name)e
 *
 * @example <caption>Example for getChildContainersContexts.</caption>
 * PCore.getContainerUtils().getChildContainers('app/primary_2');
 * example is for returning child containers present under 'app/primary_2' (parent containeritem name)
 */
export declare const getChildContainersContexts: (parentContainerItemID: any) => any[];
/**
 * This functions returns suggestion contexts related to containerItemID
 * @function getSuggestionContexts
 * @param {string} containerItemID parent containerItemID  e.g. app/primary_1
 * @returns {Array} array of related suggestion context name e.g. ['app/primary_1/suggestion,app/primary_1/workarea_1/suggestion']
 * @private
 *
 * @example <caption>Example for getSuggestionContexts.</caption>
 * PCore.getContainerUtils().getSuggestionContexts('app/primary_1');
 * example is for returning related suggestion context present for 'app/primary_1' (parent containeritemId)
 */
export declare const getSuggestionContexts: (containerItemID: any) => any[];
/**
 * This function determines whether container is single mode or not
 * @function isContainerSingleMode
 * @param {string} target -- target container  e.g. app/primary
 * @returns {boolean} - 1) true if passed container type is single
 *                    - 2) false if passed container type is other
 * @private
 *
 * @example <caption>Example for isContainerSingleMode.</caption>
 * PCore.getContainerUtils().isContainerSingleMode('app/primary');
 * example for getting to know whether container is single mode
 *
 * @example <caption>Example for isContainerSingleMode.</caption>
 * PCore.getContainerUtils().isContainerSingleMode('app/primary_1/workarea');
 * example for getting to know whether container is single mode
 */
export declare const isContainerSingleMode: (target: any) => boolean;
/**
 * This function determines whether container is multiple mode or not
 * @function isContainerMultipleMode
 * @param {string} target -- target container  e.g. app/primary
 * @returns {boolean} - 1) true if passed container type is multiple
 *                    - 2) false if passed container type is other
 * @private
 *
 * @example <caption>Example for isContainerMultipleMode.</caption>
 * PCore.getContainerUtils().isContainerMultipleMode('app/primary');
 * example for getting to know whether container is multiple mode
 *
 * @example <caption>Example for isContainerMultipleMode.</caption>
 * PCore.getContainerUtils().isContainerMultipleMode('app/primary_1/workarea');
 * example for getting to know whether container is multiple mode
 */
export declare const isContainerMultipleMode: (target: any) => boolean;
/**
 * This function determines whether container have items or not
 * @function hasContainerItems
 * @param {string} target -- target container  e.g. app/primary
 * @returns {boolean} - 1) true if passed container has items
 *                    - 2) false if passed in container has no items
 * @private
 *
 * @example <caption>Example for hasContainerItems.</caption>
 * PCore.getContainerUtils().hasContainerItems('app/primary');
 * example for getting to know whether container has items for provided information
 *
 * @example <caption>Example for hasContainerItems.</caption>
 * PCore.getContainerUtils().hasContainerItems('app/primary_1/workarea');
 * example for getting to know whether container has items for provided information
 */
export declare const hasContainerItems: (target: any) => boolean;
/**
 * This function provides container limit information.
 * @function getContainerLimit
 * @param {string} target -- target container  e.g. app/primary
 * @returns {number} - container limit value
 * @private
 *
 * @example <caption>Example for getContainerLimit.</caption>
 * PCore.getContainerUtils().getContainerLimit('app/primary');
 * example to know container limit for `app/primary`
 */
export declare const getContainerLimit: (target: any) => any;
/**
 * This function helps to set container limit for target.
 * @function setContainerLimit
 * @param {string} target -- target container  e.g. app/primary
 * @param {number} limitNumber -- limit value e.g. 8, 16, 32 etc..
 *                             -- if not limitNumber passed, default limit value 16 will be set.
 * @returns {void}
 * @private
 *
 * @example <caption>Example for setContainerLimit.</caption>
 * PCore.getContainerUtils().setContainerLimit('app/primary', 8);
 * example to set container limit for `app/primary` as 8
 */
export declare const setContainerLimit: (target: any, limitNumber?: number) => void;
/**
 * This function helps to know whether container limit has been reached or not.
 * @function isContainerLimitReached
 * @param {string} target -- target container  e.g. app/primary
 * @returns {boolean} - 1) true - if container limit reaches
 *                    - 2) false - if container limit not reached.
 * @private
 *
 * @example <caption>Example for isContainerLimitReached.</caption>
 * PCore.getContainerUtils().isContainerLimitReached('app/primary');
 * example to know container limit for `app/primary`
 */
export declare const isContainerLimitReached: (target: any) => boolean;
/**
 * This function helps to give payload for resetContainers.
 * @function resetContainersPayload
 * @param {object} containerInfo -- target container  e.g. app/primary
 * @returns {object} - contains context, Array of container items, container name
 *
 * @private
 *
 * @example <caption>Example for resetContainersPayload.</caption>
 * PCore.getContainerUtils().resetContainersPayload({ "context": "app", "name": "preview"});
 */
export declare const resetContainersPayload: (containerInfo: any) => {
    context: any;
    name: any;
    containerItems: any[];
    childContainers: any[];
};
/**
 * This function checks whether container content is changed or not
 * i.e. state is dirty or not
 * @function isContainerDirty
 * @param {string} containerItemID -- container id  e.g. app/primary_1
 * @returns {boolean} - reutrns true if container is dirty else false
 *
 * @example <caption>Example for isContainerDirty.</caption>
 * PCore.getContainerUtils().isContainerDirty("app/primary_1");
 */
export declare const isContainerDirty: (containerItemID: any) => boolean;
/**
 * This function helps to know whether container limit has been reached or not.
 * @function getLeastRecentlyUsedNonDirtyContainerItemID
 * @param {string} target -- target container  e.g. app/primary
 * @returns {string|undefined} - 1) containerItemID (string type) - if LRU + ND container item found.
 *                             - 2) undefined - if no container item found with non dirty status.
 * @private
 *
 * @example <caption>Example for getLeastRecentlyUsedNonDirtyContainerItemID.</caption>
 * PCore.getContainerUtils().getLeastRecentlyUsedNonDirtyContainerItemID('app/primary');
 * example to know least used not dirty container item inside `app/primary`
 */
export declare const getLeastRecentlyUsedNonDirtyContainerItemID: (target: any) => any;
/**
 * This function helps to get the target of the given containerItemID.
 * @function getTargetFromContainerItemID
 * @param {string} containerItemID -- target container  e.g. app/primary
 * @returns {string} - return the target of the containerItem
 * @private
 *
 * @example <caption>Example for getTargetFromContainerItemID.</caption>
 * PCore.getContainerUtils().getTargetFromContainerItemID('app/primary/workarea_1');
 * example to get the target ('app/primary/workarea')  of the containerItemID 'app/primary/workarea_1'
 */
export declare const getTargetFromContainerItemID: (containerItemID: any) => any;
/**
 * This function used to close the container item
 * @function closeContainerItem
 * @param {string} containerItemID -- container item which need to be closed
 * @param {object} options -(optional) options contains additional info like skipDirtyCheck to
 * @returns { Promise} this returns promise
 * skip confirm dailog if container item is dirty
 * @example <caption>Example for closeContainerItem.</caption>
 * In the below example container item with id - "app/primary_4" will be closed
 * PCore.getContainerUtils().closeContainerItem("app/primary_4");
 *
 * // pass skipDirtyCheck: true in options to prevent confirm dialog
 * PCore.getContainerUtils().closeContainerItem("app/primary_4",{skipDirtyCheck:true});
 *
 */
export declare const closeContainerItem: (containerItemID: any, options?: {}) => Promise<{
    newAccessedOrder: any[];
}>;
/**
 * Adds container item in root context
 * @example <caption>Example for addRootContainerItem</caption>
 * PCore.getContainerUtils().addRootContainerItem(root, containerName, appData, isPortal)
 * @param {object} viewConfig - view metadata of the root view in UI resources
 * @param {string} containerName - name of the container item
 * @param {object} appData - app data in case of portal scenario
 * @param {boolean} isPortal - boolean value portal or non-portal
 * @private
 */
export declare const addRootContainerItem: (viewConfig: any, containerName: any, appData: any, isPortal: any) => void;
/**
 * this function helps to identify whether context refering by current containerItemID is being used by another container in redux store
 * @private
 * @param {*} containerItemID - qualified container Item ID e.g. app/primary_1
 * @returns {boolean} - reutrns true if container item context is being used else false
 */
export declare const isContainerItemContextBeingUsedInOtherContainers: (containerItemID: any) => boolean;
/**
 * This function returns the transitent items present under
 * the container such as app/primary_1/workarea
 * @private
 * @param {Array} containerItemsID target container  e.g. [app/primary_1/workarea_1]
 * @returns {Array} array of transient items for target container
 */
export declare const getTransientItems: (containerItemsID: any) => any;
/**
 * Deletes the data stored in a transient item.
 * @function clearTransientData
 * @param {string} transientItemID The ID of the transient item containing the data to be deleted.
 * @returns {void}
 * @example <caption>Example for clearTransientData</caption>
 * // consider transient item value is
 * // {Name: 'James Bond', department: {id: '007', type: 'agent'}};
 * PCore.getContainerUtils().clearTransientData('app/primary_1/workarea_1/transientItem_1');
 * // after calling clearTransientData, transient item data will be
 * // {Name: '', department: {id: '', type: ''}}
 */
export declare const clearTransientData: (transientItemID: any) => void;
/**
 * Deletes the keys and data stored in a transient item.
 * @function purgeTransientData
 * @param {string} transientItemID The ID of the transient item containing the keys and data to be deleted.
 * @returns {void}
 * @example <caption>Example for purgeTransientData</caption>
 * // consider transient item value is
 * // {Name: 'James Bond', department: {id: '007', type: 'agent'}};
 * PCore.getContainerUtils().purgeTransientData('app/primary_1/workarea_1/transientItem_1');
 * // after calling purgeTransientData, transient item data will be
 * // empty object {}
 */
export declare const purgeTransientData: (transientItemID: any) => void;
/**
 *
 * Provides APIs to set, get, and container names
 * This class is independent of the context
 */
declare class ContainerItems {
    static items: any;
    /**
     *  adds container items array
     * @private
     * @param {object} items - items
     */
    static addContainerItems(items: any): void;
    /**
     *  returns container-items array
     * @private
     */
    static getContainerItems(): any;
    /**
     *  deletes container item
     * @private
     * @param {string} containerName - container name to be deleted
     */
    static deleteContainerItem(containerName: any): void;
}
/**
 * exposes Class which contains apis to set, get, and container names
 * @private
 * @returns {object} - ContainerItems instance
 */
export declare const getContainerAPI: () => typeof ContainerItems;
/**
 * Remove container from store
 * @private
 * @param {string} containerName - name of the container
 */
export declare const removeContainer: (containerName: any) => void;
/**
 * This function updates the etag in child containers
 * @function updateRelatedContextEtag
 * @private
 * @param {string} containerItemName -- containeritem name e.g. app/primary_4
 * @param {string} etag -- latest etag
 * @returns {void}
 * @example <caption>Example for updateRelatedContextEtag.</caption>
 * PCore.getContainerUtils().updateRelatedContextEtag("app/primary_4","'20211129T130156.399 GMT'")
 * after calling this etag is updated in the child containers (app/primary_4/workarea_1)
 */
export declare const updateRelatedContextEtag: (containerItemName: any, etag: any) => void;
/**
 * This function updates the etag in case context
 * @function updateCaseContextEtag
 * @private
 * @param {string} containerItemName -- containeritem name e.g. app/primary_4
 * @param {string} etag -- latest etag
 * @returns {void}
 * @example <caption>Example for updateCaseContextEtag.</caption>
 * PCore.getContainerUtils().updateCaseContextEtag("app/primary_4","'20211129T130156.399 GMT'")
 * after calling this etag is updated in the case context (app/primary_4)
 */
export declare const updateCaseContextEtag: (containerName: any, etag: any) => void;
/**
 * This function returns the root container name
 * @private
 * @returns {string} - Containername -(1) if portal is loaded,app
 * -----------------------------------(2) If portal is not loaded, root
 */
export declare const getRootContainerName: () => "app" | "root";
/**
 * Obtains an entry point to the {@link ActiveContext|ActiveContext} object that contains APIs that act on the active context for the currently opened container.
 *
 * PCore.getContainerUtils().getActiveContext();
 *
 * @returns {object} - {@link ActiveContext|ActiveContext} instance
 * @function
 * @public
 */
export declare const getActiveContext: () => {
    getCoreheaders(headerName: any): any;
};
/**
 * This function updates the lastUpdateTime in primary container
 * @function updateParentLastUpdateTime
 * @private
 * @param {string} context -- context of the container e.g. app/primary_4
 * @param {string} lastUpdateTime -- latest lastUpdateTime
 * @returns {void}
 * @example <caption>Example for updateParentLastUpdateTime.</caption>
 * PCore.getContainerUtils().updateParentLastUpdateTime("app/primary_4","2022-08-10T07:03:20.065Z")
 * after calling this lastUpdateTime is updated in the primary container (app/primary_4)
 */
export declare const updateParentLastUpdateTime: (context: any, lastUpdateTime: any) => void;
/**
 * This functions returns context for given target container and key
 * @function getContextByTargetandKey
 * @param {string} target -- target container name e.g. app/primary
 * @param {string} key -- key within container item to search for e.g. OO6GFG-TH1COS-WORK T-157004
 * @returns {boolean}
 * @private
 *
 * @example <caption>Example for getContextByTargetandKey.</caption>
 * PCore.getContainerUtils().getContextByTargetandKey('app/primary', OO6GFG-TH1COS-WORK T-157004);
 * example is for returning context present under 'app/primary_2/workarea => item => app/primary_2/workarea_1 => context'
 */
export declare const getContextByTargetAndKey: (target: any, key: any) => any;
/**
 * This function returns the parentContext value for given container item if it exists
 * @private
 * @function getContainerParentContext
 * @param {string} containerItemName -- containeritem name e.g. app/primary_4
 * @returns {string} - 1) parent context if exists in container item
 *                   - 2) null if no data found
 *
 * @example <caption>Example for getContainerParentContext.</caption>
 * PCore.getContainerUtils().getContainerParentContext('app/primary_3/modal_1');
 * example is for returning data context name for container item name --> 'app/primary_3'
 *  */
export declare const getContainerParentContext: (containerItemName: any) => any;
export declare const getActiveContainerItemIDFromRoutingInfo: (routingInfo: any) => any;
export declare const getFlowContainer: () => typeof FlowContainer;
export {};
