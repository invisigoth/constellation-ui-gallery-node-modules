import { C11nEnv } from '../interpreter/c11n-env';
import { ContainerInfo, TransientContainerInfo, TransientItemInfo } from './types';
/**
 * @description
 * Provides the basic APIs to manage the containers that are used in complex
 * components such as the ViewContainer and FlowContainer. These composite
 * components use regions on the page called "containers" to map different
 * aspects of the data that's displayed.
 */
declare class ContainerManager {
    private readonly c11nEnv;
    /**
     * Constructor - <strong>Not for use outside of Core! Included for reference only.</strong>
     * @param {object} contextObj The context object that will be used for this instance of the Container Manager
     */
    constructor(contextObj: C11nEnv);
    /**
     * Create a promise for the container manager action and return an object containing the promise
     * and the ActionManager actionMgrID associated with that promise
     * @param {string} theActionType the action type for which we're creating a promise
     * @returns {object} object with actionMgrID and promise keys: { actionMgrID: <theID>, promise: <thePromise> }
     * @function
     * @private
     */
    containerManagerPromise: (theActionType: string) => object;
    /**
     *
     * Initializes the container(s) in a complex component.
     *
     * @param {object} containerInfo
     * Typically, the JSON object contains the <em>type</em> of the container being initialized.
     * For example: "single" or "multiple"
     * <br><br>
     * { type: "single"} or {type: "multiple"}
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     * @example <caption>Example for initializeContainers()</caption>
     * const containerManager = getPConnect().getContainerManager();
     * containerManager.initializeContainers({
     *    type: "multiple"
     *  });
     */
    initializeContainers(containerInfo: ContainerInfo): Promise<object>;
    /**
     *
     * Adds a container item to the container
     *
     * @param {object} containerInfo
     * Typically, the JSON object contains information about any _semantic URL_ associated with
     * the _context_ of the container. Additional information can specify a specific, targeted
     * region in the container (via _acName_), how the information should be rendered in the
     * container, etc.
     * <br><br>
     * Examples include:
     * <br>
     * { semanticURL: "", context: "app", acName: "primary"}
     * <br>and<br>
     * { semanticURL: "", context: "app/primary_5", caseViewMode: perform }
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     * @example <caption>Example for addContainerItem()</caption>
     * const containerManager = getPConnect().getContainerManager();
     * containerManager.addContainerItem({
     *    context: "app/primary_1",
     *    semanticURL: "RequestApprovals/REQ-1",
     *    caseViewMode: "review"
     *  });
     */
    addContainerItem(containerInfo: ContainerInfo): Promise<object>;
    /**
     * Updates the information within an item in the container
     * @param {object} containerInfo
     * Typically, the JSON object contains information about context, target, containerItemID and any _semantic URL_ associated with
     * the _context_ of the container. Additional information can specify a specific, targeted
     * region in the container (via _acName_), how the information should be rendered in the
     * container.
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     * @example <caption>Example for updateContainerItem()</caption>
     * const containerManager = getPConnect().getContainerManager();
     *   containerManager.updateContainerItem({
     *   semanticURL: "RequestApprovals/REQ-1",
     *   caseViewMode: "review",
     *   target:"app/primary_0/workarea",
     *   containerItemID:"app/primary_0/workarea_0",
     *   context:"app/primary_0"
     * });
     */
    updateContainerItem(containerInfo: ContainerInfo): Promise<object>;
    /**
       * Activates the container item in a container
       * @param {object} containerInfo
       * this is the JSON Object containing containerItemID, target
       * @returns {Promise<object>} A promise associated with the action
       * @example <caption>Example for activateContainerItem()</caption>
       * const containerManager = getPConnect().getContainerManager();
          containerManager.activateContainerItem({
              target: "app/primary",
              containerItemID: "app/primary_3"
        });
       */
    activateContainerItem(containerInfo: ContainerInfo): Promise<object>;
    /**
       * Removes a container item from a container
       * @param {object} containerInfo
       * this is the JSON Object containing containerItemID, target
       * @returns {Promise<object>} A promise associated with the action
       * @example <caption>Example for removeContainerItem()</caption>
       * const containerManager = getPConnect().getContainerManager();
          containerManager.removeContainerItem({
          target: "app/primary",
          containerItemID: "app/primary_3"
        });
       */
    removeContainerItem(containerInfo: ContainerInfo): Promise<object>;
    /**
     *
     * Reset the container(s) to its initial state.
     *
     * @param {object} containerInfo
     * Typically, the JSON object contains information about context, containerName, containeritems associated with the container.
     * @returns {Promise<object>} A promise associated with the action
     * @example <caption>Example for resetContainers()</caption>
     * const containerManager = getPConnect().getContainerManager();
     * containerManager.resetContainers({
     *    context:"app",
     *    name:"preview",
     *    containerItems: ["app/preview_1","app/preview_2"]
     *  });
     */
    resetContainers(containerInfo: ContainerInfo): Promise<object>;
    /**
     * Add a transient item to the current context
     * which can be used to hold the values which doesn't
     * get submitted with content. Example: creating search filters which should not be submitted
     * along with the other data to server.
     * @param {object} containerInfo JSON object containing info about id and data to add
     * whereas id is the unique id for the transient item name and
     * data contains the properties and their values
     * @returns {string} newly created transient item id
     * @example <caption>Example for addTransientItem()</caption>
     * const containerManager = getPConnect().getContainerManager();
     * containerManager.addTransientItem({
     *  id: 'uniqueIdentifier',
     *  data: {
     *        "Prop1": "valueA",
     *        "Prop2": "valueB"
     *  }
     * });
     */
    addTransientItem(containerInfo: ContainerInfo): string;
    /**
     * Update a transient item in the current context
     * which can be used to hold the values which doesn't
     * get submitted with content. Example: creating search filters which should not be submitted
     * along with the other data to server.
     * @param {object} transientObject JSON object containing info about id and data to add
     * whereas id is the unique id for the transient item and
     * data contains the properties and their values.
     * @returns {undefined} for succesful update of transient item id
     * @example <caption>Example for updateTransientData()</caption>
     * const containerManager = getPConnect().getContainerManager();
     * containerManager.updateTransientData({
     *  id: 'uniqueIdentifier',
     *  data: {
     *        "Prop1": "valueA",
     *        "Prop2": "valueB"
     *  }
     * });
     */
    updateTransientData(transientObject: TransientContainerInfo): void;
    /**
     * Remove a transient item from the current context
     * @param {object} transientItemInfo JSON object containing target, containerItemID and transientItemId
     * @returns {undefined} on removing transient item
     * @example <caption>Example for removeTransientItem()</caption>
     * const containerManager = getPConnect().getContainerManager();
     * containerManager.removeTransientItem('uniqueIdentifier');
     */
    removeTransientItem(transientItemInfo: TransientItemInfo): void;
    createContainerPConnect(flowContainerInfo: {
        accessedOrder: any;
        items: any;
    }, pageReference: string, containerName: string, isAssignmentView?: boolean): void;
    hasContainerItems(): boolean;
    isContainerInitialized(): any;
}
export default ContainerManager;
