/**
 * Checks whether property ref exist in declare
 * expression.
 * @param {*} propertyRef property ref path
 * @param {string} context context name
 * @private
 */
export declare const hasDeclareExpression: (propertyRef: string, context: string) => any;
/**
 * Handles the changes event triggered by infra.
 * If property exist in declare expression map then it
 * will process it.
 * @param {*} payload redux stateobject
 * @private
 */
export declare const handleChange: (payload: any) => void;
/**
 * Updates the properties to existing map.
 * @param {*} properties List of properties
 * @private
 */
export declare const updateDeclareExpressions: (properties?: {}) => void;
/**
 * This API evaluates the filter expression on the given localData and returns a boolean true/false
 * The localData will always take precedence over the data in the store(i.e when we pass both data and c11nEnv, the data will be taken into consideration)
 * To evaluate expression on the data in the store, send data as undefined
 * @example <caption>Example for evaluateExpression</caption>
 *  const data =  { class: 'MOBILE_PAGE', HomeNumber: '456', name: 'teja' };
 *  * const meta = {
 *    meta: {
 *      type: 'ScalarList',
 *      config: {
 *        ruleClass: 'OSYEB1-TestApp-Data-Address',
 *        value: '@FILTERED_LIST .Mobile[.HomeNumber != "123"].name'
 *      }
 *    },
 *    options: {
 *      pageReference: 'caseInfo.content',
 *      context: 'app'
 *    }
 *  };
 * const pConnect = PCore.createC11nEnv(meta);
 * const options = {
 *  pConnect
 * }
 * const result = PCore.getExpressionEngine().evaluate(".HomeNumber != '123'", data, options);
 *
 * options parameter is optional
 * @function
 * @param {string} expression filterExpression for the given localData
 * @param {object} data localData which has to be filtered (this is optional if c11nEnv object is passed in the options)
 * @param {object} options  contains c11nEnv object of the property on which the given filterExpression is present
 * @returns {boolean} result the evaluated value filterExpression for the given data
 */
export declare const evaluate: (expression: string, data: any, options: any) => any;
