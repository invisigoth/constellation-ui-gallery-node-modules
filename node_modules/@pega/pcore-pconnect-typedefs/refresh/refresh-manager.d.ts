/**
 * @description
 * Exposes APIs to register properties and case updates and triggers explicit refresh
 * Deregisters registration upon removal of context
 */
declare class RefreshManager {
    readonly refreshMap: any;
    readonly propChangeRefreshMap: any;
    constructor();
    /**
     * Initialize cache
     * @description This method initializes refresh cache
     * @param {object} cachedMap - refreshMap or propChangeRefreshMap passed
     * @param {string} context - Context where assginment is loaded
     * @param {string} propOrTabToRegister - Property name or case view tab to be registered
     * @param {string} uniqueHash - Unique key to avoid duplication
     * @param {Function} callback - Binded Callback to invoked later
     *
     * @example <caption>Example for initializeRefreshCache()</caption>
     * Example can be seen in Refresh Manager registerForRefresh method
     * Example usage - RefreshManager.initializeRefreshCache()
     *
     * @see {@link initializeRefreshCache} for further information.
     * @returns {void}
     * @function
     */
    static initializeRefreshCache(cachedMap: any, context: string, propOrTabToRegister: string, uniqueHash: string, callback: Function): void;
    /**
     * Register property to a cache
     * @description This method register a property to refresh cache
     * @param {string} refreshType - Specifies the type of refresh PROP_CHANGE / CASE_UPDATE
     * @param {Function} callback - Binded Callback to invoked later
     * @param {string} propOrTabToRegister - Full Property reference or particular case view tab to be registered
     * @param {string} uniqueIds - Combines context and page reference etc
     * @param {string} context - Context where assginment is loaded
  
     *
     * @example <caption>Example for registerForRefresh()</caption>
     * Example can be seen in Actions api registerForRefreshView method
     * Example usage -  PCore.getRefreshManager().registerForRefresh(refreshType, callback, propChanged, id, context);
     *
     * @see {@link registerForRefresh} for further information.
     * @returns {void}
     * @function
     */
    registerForRefresh(refreshType: string, callback: Function, propOrTabToRegister: string, uniqueIds: any, context: string): void;
    /**
     * Triger refresh callback
     * @description This method finds refresh callback registered to passed property
     * @param {string} refreshType - Specifies the type of refresh PROP_CHANGE / CASE_UPDATE
     * @param {string} propOrTabChanged - Full Property reference callback is register for or case view tab to be refreshed
     * @param {string} context - Context where assginment is loaded
  
     *
     * @example <caption>Example for triggerRefreshForType()</caption>
     * Example can be seen in Actions api triggerRefreshViewForType method
     * Example usage - PCore.getRefreshManager().triggerRefreshForType(type, propOrTabChanged, context);
     *
     * @see {@link triggerRefreshForType} for further information.
     * @returns {void}
     * @function
     */
    triggerRefreshForType(refreshType: string, propOrTabChanged: string, context: string): void;
    /**
     * Removes cache per context
     * @description This method Removes cache as per given context
     * @param {string} context - Context where is getting removed
     *
     * @example <caption>Example for deRegisterForRefresh()</caption>
     * Example can be seen in Garbage Collector cleanCaches method
     * Example usage - PCore.getRefreshManager().deRegisterForRefresh(context);
     *
     * @see {@link deRegisterForRefresh} for further information.
     * @returns {void}
     * @function
     */
    deRegisterForRefresh(context: string): void;
}
declare const _default: RefreshManager;
export default _default;
