export declare const refreshTargetViewsList: any;
/**
 * Description : Removes stale container item from refreshList
 * @param {string} context container name
 */
export declare const removeViewsFromTargetList: (context: string) => void;
/**
 * [dispatchRefreshData]
 * Description : Dispatches the REFRESH_DATA action
 * @param   {string}    ID              CaseID or AssignmentID
 * @param   {string}    actionID        Action ID either a casewide action or assignement action
 * @param   {string}    context         Data context
 * @param   {boolean}   caseWideAction  Whether the action action is a case wide action or not.
 * @param   {object}    options         options object for actions
 */
export declare const dispatchRefreshData: (ID: string, actionID: string, context: string, caseWideAction: any, options: any) => void;
/**
 * [dispatchCaseViewRefresh]
 * Description : Dispatches the REFRESH_DATA action
 * @param   {string}    ID              CaseID or AssignmentID
 * @param   {string}    viewID          View ID
 * @param   {string}    context         Data context
 * @param   {string}    pageReference   page reference
 * @param   {object}    options         Options object for action
 */
export declare const dispatchCaseViewRefresh: (ID: string, viewID: string, context: string, pageReference: string, options: any) => void;
/**
 * [recordViewForRefresh]
 * Description : Pushes the view to a list. This list holds all the views which have refresh targets.
 * @param   {string}    viewName        view name from which the refresh is triggered
 * @param   {string}    context         Data context
 * @param   {string}    pageReference   Page reference inside the content
 */
export declare const recordViewForRefresh: (viewName: string, context: string, pageReference: string) => void;
/**
 * [shouldViewRefresh]
 * Description : Returns true if context has any views present in it,else returns false.
 *               Refresh will happen for all the views present in that context.
 * @param   {string}    context     Data context
 * @returns {boolean}   boolean
 */
export declare const shouldViewRefresh: (context: string) => boolean;
/**
 * [inspectComponentForRefreshTargets]
 * Description : Inspects the component, checks if there are any refresh targets in it.
 * If any refresh targets, calls a method which tracks the view for further processing.
 * @param   {object}    component   C11nEnv object
 */
export declare const inspectComponentForRefreshTargets: (component: any) => void;
export declare const refreshAssignment: (context: string, pageReference: string, options: any) => void;
/**
 * [refreshOnPropertyChange]
 * Description : This function gets the action type, action/assignment ID and gives a call to dispatch REFRESH_DATA
 * @param   {object}    payload
 *                      payload.context - Data context
 *                      payload.pageReference - Page reference in the content
 */
export declare const refreshOnPropertyChange: (payload: any) => void;
export declare const appendQueryParamsForRefreshAPI: (payload: any, restApi: string) => string;
