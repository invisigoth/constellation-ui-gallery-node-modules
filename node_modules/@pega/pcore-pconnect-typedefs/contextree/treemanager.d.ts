import TreeNode from './treenode';
declare class ContextTreeManager {
    rootNodes: {
        [key: string]: TreeNode;
    };
    constructor();
    /**
     * @description This method checks whether the contextName passed exists as a root Node
     * @example <caption>Example for _isContextNodeExist()</caption>
     * // In this example, the API checks if the contextName passed exists as a root Node
     * this._isContextNodeExist("app/primary_1")
     * // returns  - if the contextName passed exists as a root node
     * @param {string} contextName Name of the context we are checking for
     * @returns {boolean} if the contextName passed exists as a root node
     * @function
     * @private
     */
    _isContextNodeExist(contextName: string): boolean;
    /**
     * @description This method checks if the contextName passed already exists as a root Node otherwise adds the contextNode to
     *  the tree manager as a root Node
     * @example <caption>Example for addContextNode()</caption>
     * // In this example, the API adds the given context to the Tree Manager as a root node
     * viewNode = this.addContextNode("app/primary_1")
     * // returns  - Treenode that was added
     * @param {string} contextName contextName of the root node we want to add
     * @returns {TreeNode} Treenode that was added
     * @function
     * @private
     */
    addContextNode(contextName: string): TreeNode;
    /**
     * @description This method searches for the context name provided in the root nodes and returns if the node is found
     * @example <caption>Example for getContextNode()</caption>
     * // In this example, the API gives the node we are looking for
     * contextNode = this.getContextNode("app/primary_1")
     * // returns  - The root node for the context name provided
     * @param {string} contextName contextName of the root node we want
     * @returns {TreeNode} The root node for the context name provided
     * @function
     * @private
     */
    getContextNode(contextName: string): TreeNode;
    /**
     * @description This method adds the page node to the context name provided based on the page name.
     * @example <caption>Example for addPageNode()</caption>
     * // In this example, the API adds the page node we are looking for
     * node = this.addPageNode("app/primary_1/workarea_1", "caseInfo.content")
     * // returns  - The page node for the context name, page name provided which was added
     * @param {string} contextName context in which we want to add the page node
     * @param {string} pageName name of the page node
     * @returns {TreeNode} The page node for the context name, page name provided which was added
     * @function
     * @private
     */
    addPageNode(contextName: string, pageName: string): TreeNode;
    /**
     * @description This method adds the parentviewnode based on the context name, page name, parent view provided.
     * @example <caption>Example for _addParentViewNode()</caption>
     * // In this example, the API adds the parent view node we are looking for
     * parentViewNode = this._addParentViewNode("app/primary_1/workarea_1", "caseInfo.content", "Registrar")
     * // returns  - The parent view node for the context name, page name, parent view name provided
     * @param {string} contextName context in which we want to add the view
     * @param {string} pageName page in which we want to add the view
     * @param {string} parentView name of the view we want to add
     * @returns {TreeNode} The parent view node for the context name, page name, parent view name provided which was added
     * @function
     * @private
     */
    _addParentViewNode(contextName: string, pageName: string, parentView: string): TreeNode;
    /**
     * @description This method adds the viewnode based on the context name, page name,view name, parent view name provided.
     * @example <caption>Example for addViewNode()</caption>
     * // In this example, the API adds the view node we are looking for
     * viewNode = this.addViewNode("app/primary_1/workarea_1", "caseInfo.content", "MIYAPURRTA", "Registrar")
     * // returns  - The  view node for the context name, page name, view name,  parent view name provided
     * @param {string} contextName context in which we want to add the view
     * @param {string} pageName page in which we want to add the view
     * @param {string} viewName name of the view we want to add
     * @param {string} parentViewName name of the parent view in which we want to add the view
     * @returns {TreeNode} The added view node for the context name, page name, view name, parent view name provided
     * @function
     * @private
     */
    addViewNode(contextName: string, pageName: string, viewName: string, parentViewName: string): void;
    /**
     * @description This method gets the viewnode based on the context name, page name,view name provided.
     * @example <caption>Example for getViewNode()</caption>
     * // In this example, the API gives the view node we are looking for
     * viewNode = this.getViewNode("app/primary_1/workarea_1", "caseInfo.content", "MIYAPURRTA")
     * // returns  - The  view node for the context name, page name, view name provided
     * @param {string} contextName context from which we want to get the view
     * @param {string} pageName from which we want to get the view
     * @param {string} viewName name of the view we want
     * @returns {TreeNode} The view node for the context name, page name, view name provided
     * @function
     * @private
     */
    getViewNode(contextName: string, pageName: string, viewName: string): TreeNode;
    /**
     * @description This method adds the page list node based on the context name, page name,view name, page list name provided.
     * @example <caption>Example for addPageListNode()</caption>
     * // In this example, the API adds the page list node we are looking for
     * fieldNode = this.addPageListNode("app/primary_1/workarea_1", "caseInfo.content", "KONDAPURRTA_EmbeddedData_5", ".EmbeddedData")
     * // returns  - The  page list node for the context name, page name, view name, page list name provided
     * @param {string} contextName contextName of the page list node we want to add
     * @param {string} pageName pageName of the page list node we want to add
     * @param {string} viewName viewName of the page list node we want to add
     * @param {string} pageListName pageListName of the page list node we want to add
     * @returns {TreeNode} The added page list node for the context name, page name, view name, page list name provided
     * @function
     * @private
     */
    addPageListNode(contextName: string, pageName: string, viewName: string, pageListName: string): TreeNode;
    /**
     * @description This method gives the page list node based on the context name, page name,view name, page list name provided.
     * @example <caption>Example for getPageListNode()</caption>
     * // In this example, the API gives the page list node we are looking for
     * pagelistnode = this.getPageListNode("app/primary_1/workarea_1", "caseInfo.content", "KONDAPURRTA_EmbeddedData_5", ".EmbeddedData")
     * // returns  - The  page list node for the context name, page name, view name, page list name provided
     * @param {string} contextName contextName of the page list node we want
     * @param {string} pageName pageName of the page list node we want
     * @param {string} viewName viewName of the page list node we want
     * @param {string} pageListName pageListName of the page list node we want
     * @returns {TreeNode} The page list node for the context name, page name, view name, page list name provided
     * @function
     * @private
     */
    getPageListNode(contextName: string, pageName: string, viewName: string, pageListName: string): TreeNode;
    /**
     * @description This method gives the field node based on the context name, page name,view name, field name provided.
     * @example <caption>Example for getFieldNode()</caption>
     * // In this example, the API gets the field node we are looking for
     * fieldNode = this.getFieldNode("app/primary_1/workarea_1", "caseInfo.content", "KONDAPURRTA_EmbeddedData_5", ".EmpName")
     * // returns  - The  field node for the context name, page name, view name, field name provided
     * @param {string} contextName contextName of the field node we want
     * @param {string} pageName pageName of the field node we want
     * @param {string} viewName viewName of the field node we want
     * @param {string} fieldName fieldName of the field node we want
     * @returns {TreeNode} The field node for the context name, page name, view name, field name provided
     * @function
     * @private
     */
    getFieldNode(contextName: string, pageName: string, viewName: string, fieldName: string): TreeNode;
    /**
     * @description This method adds the field node based on the context name, page name,view name, field name provided.
     * @example <caption>Example for addFieldNode()</caption>
     * // In this example, the API adds the field node we are looking for
     * fieldNode = this.addFieldNode("app/primary_1/workarea_1", "caseInfo.content", "KONDAPURRTA_EmbeddedData_5", ".EmpName")
     * // returns  - The  field node for the context name, page name, view name, field name provided
     * @param {string} contextName contextName of the field node we want to add
     * @param {string} pageName pageName of the field node we want to add
     * @param {string} viewName viewName of the field node we want to add
     * @param {string} fieldName fieldName of the field node we want to add
     * @returns {TreeNode} The added field node for the context name, page name, view name, field name provided
     * @function
     * @private
     */
    addFieldNode(contextName: string, pageName: string, viewName: string, fieldName: string): TreeNode;
    /**
     * @description This method remove the root node based on the context name provided
     * @example <caption>Example for removeContextTreeNode()</caption>
     * // In this example, the API removes the root node based on the context name provided
     * this.removeContextTreeNode("app/primary_1/workarea_1")
     * // returns  - if the root node can be removed based on context name provided
     * @param {string} contextName context name of the root node to be removed
     * @returns {boolean} if the root node can be removed based on context name provided
     * @function
     * @private
     */
    removeContextTreeNode(contextName: string): void;
    /**
     * @description This method adds a callback to be executed whenever any mutation occurs to any of the view's children .
     * @example <caption>Example for onViewMutate()</caption>
     * // In this example, the API registers a callback to listen to any changes/mutations in the current view's hierarchy
     * PCore.getContextTreeManager().onViewMutate("app/primary_1/workarea_1", "caseInfo.content", "View-Name", (errors) => {
     *    setErrorStateOnView((fieldErrors) => {
     *    const errors = [...fieldErrors];
     * ...
     * }
     * })
     * @param {string} contextName context Name of the view we want to listen for changes/mutation that might occur on fields inside the current view hierarchy
     * @param {string} pageName page Name of the view we want to listen for changes/mutation that might occur on fields inside the current view hierarchy
     * @param {string} viewName view Name of the view we want to listen for changes/mutation that might occur on fields inside the current view hierarchy
     * @param {callback} callback callback to be executed on mutation i.e when mutateField() is called on any field inside this view hierarchy. Callbacks can generally be used to modify the view state
     * @returns {void}
     * @function
     * @public
     */
    onViewMutate(contextName: string, pageName: string, viewName: string, callback: (object: {
        type: string;
    }) => void): void;
    /**
     * @description This method triggers the callback that have been registered using onViewMutate on any of its parent views.
     * This method is usually called when we want to propagate the changes on the field to its parent views.
     * @example <caption>Example for mutateField()</caption>
     * // In this example, triggers the callback set on any of its parent views
     * PCore.getContextTreeManager().mutateField("app/primary_1/workarea_1", "caseInfo.content", ".FieldName",
     * [{fieldName: "FieldName",type:"error",message:"Field can't be blank"}]);
     * @param {string} contextName name of the context in which field is present
     * @param {string} pageName name of the page in which field is present
     * @param {string} fieldName name of the field on which mutation has occurred
     * @param {Object} mutateObject (optional) mutation object which needs to be passed as a parameter to the callback
     * @param {string} [mutateObject.type] (optional) type of the mutation object
     * @returns {void}
     * @function
     * @public
     */
    mutateField(contextName: string, pageName: string, fieldName: string, mutateObject: Object): void;
    /**
     * @description This method adds a callback to be executed whenever any mutation occurs to any of the page list's children.
     * @example <caption>Example for onPageListMutate()</caption>
     * // In this example,  the API registers a callback to listen to any changes/mutations in the current pagelist's hierarchy
     * PCore.getContextTreeManager().onViewMutate("app/primary_1/workarea_1", "caseInfo.content", "View-Name", ".PageListName", (errors) => {
     *    setErrorStateOnPagelist((fieldErrors) => {
     *    const errors = [...fieldErrors];
     * ...
     * }
     * })
     * @param {string} contextName context Name of the pagelist we want to listen for changes/mutation that might occur on fields inside the current pagelist hierarchy
     * @param {string} pageName page Name of the pagelist we want to listen for changes/mutation that might occur on fields inside the current pagelist hierarchy
     * @param {string} viewName view Name of the pagelist we want to listen for changes/mutation that might occur on fields inside the current pagelist hierarchy
     * @param {string} pageListName name of the pagelist we want to listen for changes/mutation that might occur on fields inside the current pagelist hierarchy
     * @param {callback} callback callback to be executed on mutation i.e when mutatePageList() is called on any field inside this pagelist hierarchy. Callbacks can generally be used to modify the pagelist's view state
     * @returns {void}
     * @function
     * @public
     */
    onPageListMutate(contextName: string, pageName: string, viewName: string, pageListName: string, callback: (object: {
        type: string;
    }) => void): void;
    /**
     * @description This method triggers the callback that have been registered using onPageListMutate on any of its parent views.
     * This method is usually called when we want to propagate the changes on the pagelist fields to its parent views.
     * @example <caption>Example for mutatePageList()</caption>
     * // In this example, triggers the callback set on any of its parent views
     * PCore.getContextTreeManager().mutatePageList("app/primary_1/workarea_1", "caseInfo.content", "Page-List-Name",
     * [{fieldName: "Employees",type:"error",message:"Employees can't be blank"}]);
     * @param {string} contextName name of the context in which field is present
     * @param {string} pageName name of the page in which field is present
     * @param {string} pageListName name of the pagelist on which mutation has occurred
     * @param {Object} mutateObject (optional) mutation object which needs to be passed as a parameter to the callback
     * @param {string} [mutateObject.type] (optional) type of the mutation object
     * @returns {void}
     * @function
     * @public
     */
    mutatePageList(contextName: string, pageName: string, pageListName: string, mutateObject: Object): void;
}
declare const _default: ContextTreeManager;
export default _default;
