interface ContextNode {
    type: string;
    name: string;
    parent: ContextNode | null;
    addReference: (name: string, node: ContextNode) => void;
    getReference: (name: string) => ContextNode | undefined;
    triggerEvent: (eventObject: {
        type: string;
    }) => void;
    addNode: (type: string, name: string) => ContextNode;
    getNode: (type: string, name: string) => ContextNode | undefined;
}
declare class TreeNode implements ContextNode {
    readonly type: string;
    readonly name: string;
    parent: ContextNode | null;
    private readonly children;
    private readonly eventSubscribers;
    private readonly references;
    constructor(type: string, name: string);
    /**
     * @description This method adds the node to the set of references present in the current node
     * with the name as its key
     * @example <caption>Example for addReference()</caption>
     * // In this example, the API adds the reference to the current node
     * this.addReference("KONDAPURRTA_EmbeddedData_5.EmbeddedData",fieldNode)
     * // returns  -
     * @param {string} name name of the reference to be added
     * @param {TreeNode} node node to be added as a reference
     * @returns {void}
     * @function
     * @private
     */
    addReference(name: string, node: ContextNode): void;
    /**
     * @description This method gives the reference for name provided.
     * @example <caption>Example for getReference()</caption>
     * // In this example, the API gives the reference to the node we are looking for
     * viewNode = pageNode.getReference(parentView)
     * // returns  - Tree node which was set as reference
     * @param {string} name nameof node
     * @returns {TreeNode} the reference node based on the name
     * @function
     * @private
     */
    getReference(name: string): this | undefined;
    /**
     * @description This method gives the node for type, name provided.
     * @example <caption>Example for getNode()</caption>
     * // In this example, the API gives the node for the type, name are looking for
     * node = this.getContextNode(contextName)?.getNode('PAGE', pageName)
     * // returns  - The node based on type, name provided
     * @param {string} type type of node
     * @param {string} name name of node
     * @returns {TreeNode} - The node based on type, name provided
     * @function
     * @private
     */
    getNode(type: string, name: string): this | undefined;
    /**
     * @description This method adds the node for type, name provided.
     * @example <caption>Example for addNode()</caption>
     * // In this example, the API adds the node for the type, name are looking for
     * const pageNode = this.addContextNode(contextName).addNode('PAGE', pageName);
     * // returns  - The node based on type, name provided
     * @param {string} type type of node
     * @param {string} name name of node
     * @returns {TreeNode} - The added node based on type, name provided
     * @function
     * @private
     */
    addNode(type: string, name: string): this;
    /**
     * @description This method adds the evenlistener for callback provided.
     * @example <caption>Example for addEventListener()</caption>
     * // In this example, the API adds the callback to the eventsubscibers
     * this.getPageListNode(contextName, pageName, viewName, pageListName)?.addEventListener(callback)
     * // returns  -
     * @param {callback} callback function to be called on mutation
     * @returns {void} -
     * @function
     * @private
     */
    addEventListener(callback: (object: {
        type: string;
    }) => void): void;
    /**
     * @description This method triggers the event for the event object provided.
     * @example <caption>Example for triggerEvent()</caption>
     * // In this example, the API triggers the event for the event object
     * contextNode.getReference(`${pageName}.${pageListName}`)?.triggerEvent(mutateObject);
     * // returns  -
     * @param {Object} eventObject mutation objects to be passed to the listeners
     * @returns {TreeNode} -
     * @function
     * @private
     */
    triggerEvent(eventObject: {
        type: string;
    }): void;
}
export default TreeNode;
