interface Window {
    pms: any;
    PCore: any;
    pega: any;
    name: string;
    sessionStorage: any;
}
interface DataPageKeys {
    linkedField: string;
    keyName: string;
}
interface actionObject {
    actionMgrID?: string;
    context?: string;
    pageReference?: string;
    headers?: {
        RemoteSystemID?: string;
        [key: string]: any;
    };
    className?: string;
    isRemoteCase?: boolean;
    debugInfo?: {
        debugId: string;
    };
    remoteCaseClass?: string;
    activeItemCaseViewMode?: string;
    isModalAction?: boolean;
    isProcessAction?: boolean;
    containerName?: string;
    parentCaseInfo?: object;
    parentContext?: string;
    targetName?: string;
    isInCreateStage?: boolean;
    acTargetName?: string;
    viewType?: string;
    class?: string;
}
interface RoutingInfo {
    routes: any;
    routesMeta: any;
    reqContextName: string;
    reqServletPath: string;
    appName: string;
    appAlias: string;
    orgName: string;
    appDelimeter: string;
    pxReqServletNameReal: string;
    isDefaultPortal: boolean;
    portalName: string;
}
interface ActionInfo {
    class?: string;
    actionID?: string;
    assignmentID?: string;
    caseID?: string;
    workID?: string;
    containerName?: string;
    containerItemID?: string;
    isCaseWideAction: boolean;
    doDeleteCaseSummary: boolean;
    isInCreateStage: boolean;
    isModalAction?: boolean;
    outcome?: string;
    viewType?: string;
    dataPageID?: string;
    context?: string;
    headers?: any;
    businessID?: string;
}
interface Component {
    getPageReference: Function;
    getCaseInfo: Function;
    getComponentConfig: Function;
    getStateProps: Function;
    getContextName: Function;
}
interface browserEvent {
    nativeEvent: object;
    value: any;
    target: any;
    prop: any;
    auxiliaryTarget?: any;
}
interface ActionItem {
    actionHandler: object;
    component: object;
    eventType: string;
    config: {
        parallel: string;
    };
}
interface ActionAPIOptions {
    autoDetectRefresh?: boolean;
    propertyName?: string;
    preserveClientChanges?: boolean;
    classID?: string;
    refreshFor?: boolean;
}
interface DataPageObj {
    keyName: string;
    isAlternateKeyStorage: boolean;
    linkedField: string;
}
