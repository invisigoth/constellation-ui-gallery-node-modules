declare class ComponentsRegistry {
    constructor();
    /**
     * Registers the component with core so that renderer can
     * get the right component while rendering.
     *
     * @param {string} componentName Name of the component eq., Currency
     * @param {object} component component object example
     * {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * }
     * @example <caption>PCore.getComponentsRegistry().register(componentName, component)</caption>
     * PCore.getComponentsRegistry().register("Currency", {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * });
     *
     * @memberof ComponentsRegistry
     */
    register(componentName: any, component: any): void;
    /**
     * Registers the component with core so that renderer can
     * get the right component while rendering.
     *
     * @param {string} componentName Name of the component eq., Currency
     * @param {object} component component object example
     * {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * }
     * @example <caption>PCore.getComponentsRegistry().register(componentName, component)</caption>
     * PCore.getComponentsRegistry().register("Currency", {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * });
     *
     * @memberof ComponentsRegistry
     */
    registerLazyMap(componentName: any, component: any): void;
    /**
     * Registers the component with core so that renderer can
     * get the right component while rendering.
     *
     * @param {string} componentName Name of the component eq., Currency
     * @param {object} component component object example
     * {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * }
     * @example <caption>PCore.getComponentsRegistry().register(componentName, component)</caption>
     * PCore.getComponentsRegistry().register("Currency", {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * });
     *
     * @memberof ComponentsRegistry
     */
    registerCustomComponentLazyMap(componentName: any, component: any): void;
    /**
     * Gets the component object registered with core.
     *
     * @param {string} componentName Name of the component eq., Currency
     * @example <caption>PCore.getComponentsRegistry().getComponent(componentName)</caption>
     * const component = PCore.getComponentsRegistry().getComponent("Currency");
     * @returns {object} component object example
     * {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * }
     * @memberof ComponentsRegistry
     */
    getComponent(componentName: any): any;
    /**
     * Gets the component object registered with core.
     *
     * @param {string} componentName Name of the component eq., Currency
     * @example <caption>PCore.getComponentsRegistry().getComponent(componentName)</caption>
     * const component = PCore.getComponentsRegistry().getComponent("Currency");
     * @returns {object} component object example
     * {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * }
     * @memberof ComponentsRegistry
     */
    getLazyComponent(componentName: any): any;
    /**
     * Gets the component object registered with core.
     *
     * @param {string} componentName Name of the component eq., Currency
     * @example <caption>PCore.getComponentsRegistry().getComponent(componentName)</caption>
     * const component = PCore.getComponentsRegistry().getComponent("Currency");
     * @returns {object} component object example
     * {
     *  component: "Currency",
     *  scripts: ["components/Currency/index.js"]
     * }
     * @memberof ComponentsRegistry
     */
    getCustomComponent(componentName: any): any;
    /**
     * Merges the componentMap to registry.
     *
     * @example <caption>PCore.getComponentsRegistry().mergeComponentsMap(componentsMap)</caption>
     * const component = PCore.getComponentsRegistry().mergeComponentsMap(reactComponentsMap);
     * @param {object} componentsMap object which holds component definitions eq.,
     * const reactComponentsMap = {
     * Renderer: {
     * renderer: "PegaReactRenderer",
     * scripts: ["renderer/react_renderer.js"]
     * },
     * Currency: {
     * component: "Currency",
     * scripts: ["components/Currency/index.js"]
     * }
     * }
     * @memberof ComponentsRegistry
     */
    mergeComponentsMap(componentsMap?: {}): void;
    /**
     * Merges override map
     * @param {object} overrideMap object that holds override map.
     * @memberof ComponentsRegistry
     */
    mergeOverrideMap(overrideMap?: {}): void;
    /**
     * returns override map
     * @memberof ComponentsRegistry
     */
    getOverrideMap(): any;
    /**
     * returns Lazy map
     * @memberof ComponentsRegistry
     */
    getLazyMap(): any;
}
declare const _default: ComponentsRegistry;
export default _default;
