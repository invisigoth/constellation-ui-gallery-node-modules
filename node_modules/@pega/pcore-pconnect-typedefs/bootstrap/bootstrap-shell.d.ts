/**
 *
 * @param {Object} config - Configuration object.
 * @property {Object} config.routingInfo - Routing information object includes "routesMeta" and "routes" objects. The "routesMeta" includes restAPI information to each route and "routes" incudes payload data to each route.
 * @example
 * routingInfo: {
 *  routesMeta: {
 *    "showView": {
 *       "urlPattern": "{pageName}",
 *       "restApi": {
 *         "endPoint": "/api/application/v2/pages/{page}?pageClass={pageClass}",
 *         "reqType": "GET",
 *         "params": {
 *          "page": "",
 *          "pageClass": ""
 *         }
 *       }
 *    },
 *    ...
 *  }
 *  routes: {
 *     "Home": {
 *       "routeKey": "showView",
 *       "payload": {
 *         "page": "pyHome",
 *         "pageClass": "Data-Portal"
 *       }
 *     },
 *     ...
 *    }
 * }
 * @property {Object} config.actionModel - Action model(For internal use only).
 * @property {Object} config.additionalHeaders - This contains "pzCTkn" property which will have a token value and also which is a default header and bootstrap uses this to avoid CSR attacks. This token will be sent in each DX API request. If constellation needs to send more headers, that should be part of this.
 * @property {Object} config.tokens - This contains "C11NB2S" property which will have token value which will be used while connecting to constellation app static server in order to download static assets such as custom components, custom images, and localisation rules.
 * @property {string} config.semanticUrl - This is the user friendly URL to display in the browser. If this is empty default will be calculated by the core engine.
 * @property {Object} config.queryParams - Extra params which would be set to the browser friendly URL.
 * @property {boolean} config.noPortal - Indicates whether to disable the portal.
 * @property {string} config.timezone - Timezone for the application.
 * @property {boolean} config.noHistory - Indicates whether to disable browser back and forward buttons.
 * @property {string} config.theme - JSon object of configured application theme.
 * @property {Object} config.fieldDefaults - JSON object which contains the default field settings.
 * @example
 * The sample field defaults for type Currency
 * {
 *   "Currency": {
 *    "name": "Currency",
 *     "label": "Currency",
 *     "description": "Currency",
 *     "type": "Field",
 *     "subtype": "Decimal-Currency",
 *     ...
 *  }
 * }
 * @property {boolean} config.dynamicLoadComponents - Indicates whether dynamic loading of OOTB react components is disabled or not.
 * @property {boolean} config.dynamicSemanticUrl - Indicates whether browser friendly  URL updation is to be enabled or not.
 * @property {boolean} config.enableRouting - Indicates whether to enable or disable the semantic URL calculation in constellation core.
 * @property {string} config.locale - Application locale.
 * @property {Object} config.environmentInfo - Includes environment information of the current application. This includes information about the operator, application, locale, case list
 * Information about the application environment.
 *   @property {Object} pyUserSettings - User-specific settings.
 *   @property {string} pzLoadTime - The time of loading in the Pega environment (e.g., "September 28, 2023 at 3:22:49 AM EDT").
 *   @property {string} pzPageNameBase - The base page name ("D_pxEnvironmentInfo").
 *   @property {string} pzPageNameHash - The page name hash.
 *   @property {Object} pxApplication - Information about the application.
 *      @property {string} pyBaseLocale - The base locale.
 *      @property {string} pyBuiltOnApplications - List of applications the current application is built on.
 *      @property {string} pyCaseInstanceListDP - Data page for case instance list.
 *      @property {string} pyDefaultOperatorDP - Data page for default operator.
 *      @property {string} pyDocumentURLDP - Data page for document URL.
 *      @property {string} pyLabel - The label for the application.
 *      @property {string} pyMaxAttachmentSize - The maximum attachment size.
 *      @property {string} pyRuleName - The rule name for the application.
 *      @property {Object} pxLocale - Locale information.
 *      @property {string} pyTimeZone - The time zone (e.g., "America/New_York").
 *   @property {Object} pxMashupDetails - Details about mashups.
 *      @property {string} pyMashupCodeForLandingPage - Mashup code for the landing page.
 *      @property {string} pyMashupCodeForOpenAssignment - Mashup code for opening assignments.
 *      @property {string} pyMashupCodeForOpenCase - Mashup code for opening cases.
 *   @property {Object} pxOperator - Information about the operator.
 *      @property {string} pyAccessGroup - The access group of the operator.
 *      @property {string} pyDefaultPortal - The default portal for the operator.
 *      @property {string} pyImageInsKey - The image instance key.
 *      @property {string} pyUserIdentifier - The user identifier.
 *      @property {string} pyUserName - The user name.
 *      @property {string} pyWorkGroup - The work group of the operator.
 *   @property {Object[]} pyApplications - List of applications that the operator have access to
 *      @property {string} pyIconSmall - The icon for the application.
 *      @property {string} pyLabel - The label or name of the application.
 *      @property {string} pzApplicationURL - The URL of the application.
 *   @property {Object[]} pyCaseTypeList - An array of case types.
 *      @property {string} pxIcon - The icon for the case type.
 *      @property {string} pyIsSearchActive - Indicates if search is active for the case type.
 *      @property {string} pyWorkTypeImplementationClassName - The class name for the case type implementation.
 *      @property {string} pyWorkTypeName - The name of the case type.
 *   @property {Object} pySourcePage - Source page information.
 *      @property {string} pyConnectorType - The connector type for the source page.
 *      @property {string} pySourceClass - The class of the source page.
 *      @property {string} pySourceIdentifier - The identifier of the source page.
 *      @property {string} pySourceNumber - The source number.
 *      @property {string} pySourceType - The type of the source page.
 * Usage example
 * const "environmentInfo": {
 *   "pyUserSettings": {},
 *   "pzLoadTime": "September 28, 2023 at 3:22:49 AM EDT",
 *   "pzPageNameBase": "D_pxEnvironmentInfo",
 *   "pzPageNameHash": "",
 *   "pxApplication": {
 *     "pyBaseLocale": "",
 *     "pyBuiltOnApplications": "C11nGall,Theme-Cosmos,PegaDevelopment,PegaSSOT,PegaRULES",
 *     "pyCaseInstanceListDP": "D_pxAllCaseList",
 *     "pyDefaultOperatorDP": "D_pyC11nOperatorsList",
 *     "pyDocumentURLDP": "D_pxGetDocumentURL",
 *     "pyLabel": "C11n Gallery",
 *     "pyMaxAttachmentSize": "1024",
 *     "pyRuleName": "C11nGall 02.01.01"
 *   },
 *   "pxLocale": {
 *     "pyTimeZone": "America/New_York"
 *   },
 *   "pxMashupDetails": {
 *     "pyMashupCodeForLandingPage": "",
 *     "pyMashupCodeForOpenAssignment": "",
 *     "pyMashupCodeForOpenCase": ""
 *   },
 *   "pxOperator": {
 *     "pyAccessGroup": "C11nGall:Administrators",
 *     "pyDefaultPortal": "Developer",
 *     "pyImageInsKey": "",
 *     "pyUserIdentifier": "tejas1",
 *     "pyUserName": "Tejas",
 *     "pyWorkGroup": "Default"
 *   },
 *   "pyApplications": [
 *     {
 *       "pxObjClass": "Rule-Application",
 *       "pyIconSmall": "",
 *       "pyLabel": "crude",
 *       "pzApplicationURL": "https://sde-bos-24.rpega.com/prweb/app/crude/"
 *     },
 *     {
 *       "pxObjClass": "Rule-Application",
 *       "pyIconSmall": "",
 *       "pyLabel": "C11n Gallery",
 *       "pzApplicationURL": "https://sde-bos-24.rpega.com/prweb/app/C11nGall/"
 *     }
 *   ],
 *   "pyCaseTypeList": [
 *     {
 *       "pxIcon": "polaris-solid",
 *       "pxObjClass": "Embed-Application-WorkMetaData",
 *       "pyIsSearchActive": "true",
 *       "pyWorkTypeImplementationClassName": "ON8TTL-C11nGall-Work-AddressTest",
 *       "pyWorkTypeName": "AddressTest"
 *     },
 *     {
 *       "pxIcon": "polaris-solid",
 *       "pxObjClass": "Embed-Application-WorkMetaData",
 *       "pyIsSearchActive": "true",
 *       "pyWorkTypeImplementationClassName": "ON8TTL-C11nGall-Work-ApprovalTest",
 *       "pyWorkTypeName": "Approval Test"
 *     }
 *   ],
 *   "pySourcePage": {
 *     "pxObjClass": "Embed-DataSource",
 *     "pyConnectorType": "",
 *     "pySourceClass": "Data-Admin-Operator-ID",
 *     "pySourceIdentifier": "pxPopulateEnvironmentInfo",
 *     "pySourceNumber": "1",
 *     "pySourceType": "Data Transform"
 *   }
 * }
 * @property {string} config.renderingMode - Rendering mode for the application (default: 'FULL_PORTAL'). //possible values to be added
 * @property {Object} config.remoteCaseMapping - Remote cases config will be downloaded, which includes remote system id
 * @property {Object} config.serviceConfig - Contains service configuration info.
 * @example
 * {
 *   "contextPath": "/prweb",
 *   "appAlias": "app/C11nGall",
 *   "googleMapKey": "AIzaSyAjGxU3bSmuA_6AzgfRtbRHhOw_DCLL-xE",
 *   "staticContentServer": "https://localhost:3000/",
 *   "appStaticContentServer": "https://staging.constellation.pega.io/c11n-appstatic/",
 *   "messagingService": "wss://staging2.constellation.pega.io/c11n-messaging/"
 * }
 * @param {Function} callback - The callback function to be executed after bootstrapping.
 * @returns {Promise<boolean>} A promise that resolves to true if the bootstrapping is successful.
 *
 * * @example
 * // Example usage of the bootstrap function
 * const config = {};
 *
 * const callbackFunction = () => {
 *   console.log("Bootstrap completed!");
 * };
 *
 * try {
 *   const result = await bootstrap(config, callbackFunction);
 *   console.log("Bootstrap successful:", result);
 * } catch (error) {
 *   console.error("Bootstrap failed:", error);
 * }
 */
export function bootstrap(config: any, callback: Function): Promise<boolean>;
/**
 * Loads a view into a target DOM element.
 *
 * @param {HTMLElement} targetDom - The target DOM element where the view will be loaded.
 * @param {Object} viewMetadata - Metadata for the view being loaded.
 * @param {Array} [preLoadComponents=[]] - Preloaded components.
 * @param {Object} runtimeParams - Runtime parameters for the view.
 * @param {string} portalTarget - Target for the portal.
 * @param {string} styleSheetTarget - Target for the stylesheet.
 * @param {string} containerTargetName - Name of the container target.
 * @example
 * Example usage of loadView function
 * const targetDom = document.getElementById('viewContainer');
 * const viewMetadata = {}
 * const preLoadComponents = ['ComponentA', 'ComponentB'];
 * const runtimeParams = { runtime parameters };
 * const portalTarget = 'portal-container';
 * const styleSheetTarget = 'style-container';
 * const containerTargetName = 'hybrid';
 *
 * bootstrapShell.loadView(targetDom, viewMetadata, preLoadComponents, runtimeParams, portalTarget, styleSheetTarget, containerTargetName)
 *
 */
export function loadView(targetDom: HTMLElement, viewMetadata: any, preLoadComponents?: any[], runtimeParams: any, portalTarget: string, styleSheetTarget: string, containerTargetName: string): void;
/**
 * Loads a portal into a target DOM element.
 *
 * @param {HTMLElement} targetDom - The target DOM element where the portal will be loaded.
 * @param {string} portalName - The name of the portal to load.
 * @param {Array} (Optional) [preLoadComponents=[]] - Lists of components that must be loaded before the portal can be loaded.
 * @param {string} containerTargetName - Name of the container target.
 * // Example usage of loadPortal function
 * const targetDom = document.getElementById('portalContainer');
 * const portalName = 'myPortal';
 * const preLoadComponents = ['ComponentA', 'ComponentB'];
 * const containerTargetName = 'portalContainer';
 *
 * bootstrapShell.loadPortal(targetDom, portalName, preLoadComponents, containerTargetName)
 */
export function loadPortal(targetDom: HTMLElement, portalName: string, preLoadComponents: any[], containerTargetName: string): void;
/**
 * This API loads the operator's default portal.
 * @param {HTMLElement} targetDom - The target DOM element where the portal will be loaded.
 * @param {Array} [preLoadComponents=[]] Lists of components that must be loaded before the portal can be loaded.
 * @param {String} containerTargetName - Name of the container target.
 * * // Example usage of loadDefaultPortal function
 * const targetElement = document.getElementById('portalContainer'); // Replace with your target element
 * const preLoadComponents = ['Component1', 'Component2']; // Replace with actual component names
 * const containerTargetName = 'mainContainer'; // Replace with actual container target name
 *
 * bootstrapShell.loadDefaultPortal(targetElement, preLoadComponents, containerTargetName);
 */
export function loadDefaultPortal(targetDom: HTMLElement, preLoadComponents?: any[], containerTargetName: string): void;
/**
 * Loads a component into a target DOM element.
 *
 * @param {HTMLElement} targetDom - The target DOM element where the component will be loaded.
 * @param {Object} componentMetadata - Metadata for the component being loaded.
 * @param {Array} preLoadComponents - Lists of components that must be loaded before the portal can be loaded.
 * @returns {Promise} A promise that resolves when the component is loaded.
 * * @example
 * const targetElement = document.getElementById('componentContainer'); // Replace with your target element
 * const componentMetadata = {
 *   name: 'ComponentName', // Replace with actual component name
 *   // ... other component metadata
 * };
 * const preLoadComponents = ['Component1', 'Component2']; // Replace with actual component names
 *
 * loadComponent(targetElement, componentMetadata, preLoadComponents)
 *   .then(() => {
 *     // resolved action
 *   })
 *   .catch((error) => {
 *     // rejected action
 *   });
 */
export function loadComponent(targetDom: HTMLElement, componentMetadata: any, preLoadComponents: any[]): Promise<any>;
/**
 * Loads a mashup into a target DOM element.
 *
 * @param {string} targetDom - The target DOM element identifier or tag name where the mashup will be loaded.
 * @param {boolean} [usePegaMashupStyling=true] - (Optional by default it will be true) Indicates whether to use Pega mashup styling.
 * @example
 *
 * const targetElementId = 'mashupContainer'; // Replace with the actual target element ID
 *
 * loadMashup(targetElementId);
 */
export function loadMashup(targetDom: string, usePegaMashupStyling?: boolean): void;
/**
 * Loads a view by name into a target DOM element.
 *
 * @param {HTMLElement} targetDom - The target DOM element where the view will be loaded.
 * @param {string} viewName - The name of the view to load.
 * @param {string} portalName - The name of the portal.
 * @param {string} viewClass - The view class.
 * @param {Array} additionalComponents - Additional components to load.
 * @param {string} portalTarget - Target for the portal.
 * @param {string} styleSheetTarget - Target for the stylesheet.
 * @param {string} containerTargetName - Name of the container target.
 * @example
 *
 * const targetElement = document.getElementById('viewContainer'); // Replace with your target element
 * const viewName = 'MyView'; // Replace with actual view name
 * const portalName = 'MyPortal'; // Replace with actual portal name
 * const viewClass = 'my-view-class'; // Replace with actual view class
 * const additionalComponents = ['Component1', 'Component2']; // Replace with actual component names
 * const portalTarget = 'portalTarget'; // Replace with actual portal target
 * const styleSheetTarget = 'styleSheetTarget'; // Replace with actual stylesheet target
 * const containerTargetName = 'containerTargetName'; // Replace with actual container target name
 *
 * loadViewByName(targetElement, viewName, portalName, viewClass, additionalComponents, portalTarget, styleSheetTarget, containerTargetName);
 */
export function loadViewByName(targetDom: HTMLElement, viewName: string, portalName: string, viewClass: string, additionalComponents: any[], portalTarget: string, styleSheetTarget: string, containerTargetName: string): void;
/**
 * Loads a case into a target DOM element.
 *
 * @param {HTMLElement} targetDom - The target DOM element where the case will be loaded.
 * @param {string} caseId - The ID of the case to load.
 * @param {Array} [preLoadComponents=[]] - Lists of components that must be loaded before the portal can be loaded.
 * @param {string} portalTarget - Target for the portal.
 * @param {string} styleSheetTarget - Target for the stylesheet.
 * @param {Object} [options={}] - (Optional) Additional options.
 * @property {boolean} [options.isCaseLocked=false] - (Optional, by default it will be false) Indicates whether the case is locked.
 * @example
 * const targetElement = document.getElementById('caseContainer'); // Replace with your target element
 * const caseId = 'M-12'; // Replace with actual case ID
 * const preLoadComponents = ['Component1', 'Component2']; // Replace with actual component names
 * const portalTarget = 'portalTarget'; // Replace with actual portal target
 * const styleSheetTarget = 'styleSheetTarget'; // Replace with actual stylesheet target
 * const options = {
 *   isCaseLocked: false // Replace with actual case lock status, default value would be
 * };
 *
 * loadCase(targetElement, caseId, preLoadComponents, portalTarget, styleSheetTarget, options);
 */
export function loadCase(targetDom: HTMLElement, caseId: string, preLoadComponents?: any[], portalTarget: string, styleSheetTarget: string, options?: any): void;
/**
 * Creates a case and loads it into the specified target DOM element.
 *
 * @param {string} targetDom - The target DOM element where the case will be loaded.
 * @param {string} caseId - The ID of the case to be created and loaded.
 * @param {Array} [preLoadComponents=[]] - Lists of components that must be loaded before the portal can be loaded.
 * @param {string} portalTarget - The portal target for the case.
 * @param {string} styleSheetTarget - The stylesheet target for the case.
 * @returns {Promise} A Promise that resolves once the case is created and loaded.
 *
 * @example
 * const targetElement = document.getElementById('caseContainer'); // Replace with your target element
 * const caseId = 'C-123'; // Replace with actual case ID
 * const preLoadComponents = ['Component1', 'Component2']; // Replace with actual component names
 * const portalTarget = 'portalTarget'; // Replace with actual portal target
 * const styleSheetTarget = 'styleSheetTarget'; // Replace with actual stylesheet target
 *
 * createCase(targetElement, caseId, preLoadComponents, portalTarget, styleSheetTarget);
 */
export function createCase(targetDom: string, caseId: string, preLoadComponents?: any[], portalTarget: string, styleSheetTarget: string): Promise<any>;
/**
 * Loads an assignment into a target DOM element.
 *
 * @param {HTMLElement} targetDom - The target DOM element where the assignment will be loaded.
 * @param {string} assignmentId - The ID of the assignment to load.
 * @param {Array} [preLoadComponents=[]] - Preloaded components.
 * @param {string} portalTarget - Target for the portal.
 * @param {string} styleSheetTarget - Target for the stylesheet.
 * @param {Object} options - Additional options for loading the assignment.
 * @property {boolean} options.isUIkit - Indicates whether to use UIKit for the assignment.
 * @property {boolean} options.isReloadAssignment - Indicates whether to reload the assignment.
 * @property {string} options.caseId - The ID of the case associated with the assignment.
 * @property {boolean} options.acTertiary - Indicates whether the assignment is AC tertiary.
 * @property {boolean} options.uiKitConstellationCaseInCreateStage - Indicates whether UIKit is used for the assignment in create stage.
 *
 * @example
 * const targetElement = document.getElementById('assignmentContainer'); // Replace with your target element
 * const assignmentId = 'A-984'; // Replace with actual assignment ID
 * const preLoadComponents = ['Component1', 'Component2']; // Replace with actual component names
 * const portalTarget = 'portalTarget'; // Replace with actual portal target
 * const styleSheetTarget = 'styleSheetTarget'; // Replace with actual stylesheet target
 * const options = {
 *   isUIkit: true,
 *   isReloadAssignment: false,
 *   caseId: '123456', // Replace with actual case ID
 *   acTertiary: 'additionalContext',
 *   uiKitConstellationCaseInCreateStage: true
 * };
 *
 * loadAssignment(targetElement, assignmentId, preLoadComponents, portalTarget, styleSheetTarget, options);
 */
export function loadAssignment(targetDom: HTMLElement, assignmentId: string, preLoadComponents?: any[], portalTarget: string, styleSheetTarget: string, { isUIkit, isReloadAssignment, caseId, acTertiary, uiKitConstellationCaseInCreateStage }: any): void;
/**
 * Loads a case preview into a target DOM element.
 *
 * @param {HTMLElement} targetDom - The target DOM element where the case preview will be loaded.
 * @param {Object} caseOptions - Options for the case preview.
 * @property {string} caseOptions.caseID - The ID of the case for the preview.
 * @property {string} caseOptions.caseClass - The class of the case for the preview.
 * @param {Array} [preLoadComponents=[]] - Lists of components that must be loaded before the portal can be loaded.
 * @param {string} portalTarget - Target for the portal.
 * @param {string} styleSheetTarget - Target for the stylesheet.
 *
 * @example
 * const targetElement = document.getElementById('previewContainer'); // Replace with your target element
 * const caseOptions = {
 *   caseID: 'C-16', // Replace with actual case ID
 *   caseClass: 'my-case-class' // Replace with actual case class
 * };
 * const preLoadComponents = ['Component1', 'Component2']; // Replace with actual component names
 * const portalTarget = 'portalTarget'; // Replace with actual portal target
 * const styleSheetTarget = 'styleSheetTarget'; // Replace with actual stylesheet target
 *
 * loadPreview(targetElement, caseOptions, preLoadComponents, portalTarget, styleSheetTarget);
 */
export function loadPreview(targetDom: HTMLElement, caseOptions: any, preLoadComponents?: any[], portalTarget: string, styleSheetTarget: string): void;
/**
 * Bootstrap the application with authentication header and configuration.
 *
 * @param {Object} config - Configuration object.
 * @param {string} config.restServerUrl - The REST server URL.
 * @param {boolean} [config.customRendering=false] - Indicates custom rendering.
 * @param {Function} config.onPCoreReadyCallback - Callback function when Pega Core is ready.
 * @param {string} config.staticContentServerUrl - The static content server URL.
 * @param {boolean} [config.dynamicSetCookie=false] - Indicates dynamic cookie handling.
 * @param {Object} [config.authInfo={}] - Authentication information.
 * @param {string} [config.theme={}] - Application theme.
 * @param {string} config.renderingMode - Rendering mode.
 * @param {string} target - The target DOM element to load the application.
 * @param {Array} [preLoadComponents=[]] - Preloaded components.
 * @param {string} portalTarget - Target for the portal.
 * @param {string} styleSheetTarget - Target for the stylesheet.
 * @returns {Promise<void>} A Promise that resolves once the application is bootstrapped.
 */
/**
 * Bootstrap the application with authentication header and configuration.
 *
 * @param {Object} config - Configuration object.
 * @property {string} config.restServerUrl - The REST server URL.
 * @property {boolean} [config.customRendering=false] - Indicates custom rendering.
 * @property {Function} config.onPCoreReadyCallback - Callback function when Pega Core is ready.
 * @property {string} config.staticContentServerUrl - The static content server URL.
 * @property {boolean} [config.dynamicSetCookie=false] - Indicates dynamic cookie handling.
 * @property {Object} [config.authInfo={}] - Authentication information.
 * @property {string} [config.theme={}] - Application theme.
 * @property {string} config.renderingMode - Rendering mode.
 * @param {string} target - The target DOM element to load the application.
 * @param {Array} [preLoadComponents=[]] - Preloaded components.
 * @param {string} portalTarget - Target for the portal.
 * @param {string} styleSheetTarget - Target for the stylesheet.
 * @returns {Promise<void>} A Promise that resolves once the application is bootstrapped.
 *
 * @example
 * const config = {
 *   restServerUrl: 'https://example.com/api',
 *   customRendering: false, // (Optional property, default will be false)
 *   onPCoreReadyCallback: () => {
 *     console.log('PCore is ready!');
 *   },
 *   staticContentServerUrl: 'https://example.com/static',
 *   dynamicSetCookie: false, // (Optional property, default will be false)
 *   authInfo: {}, // (Optional)
 *   theme: {}, // (Optional)
 *   renderingMode: 'view',
 *   appAlias: 'app/C11'
 * };
 * const targetElement = document.getElementById('appContainer'); // Replace with your target element
 * const preLoadComponents = ['Component1', 'Component2']; // Replace with actual component names
 * const portalTarget = 'portalTarget'; // Replace with actual portal target
 * const styleSheetTarget = 'styleSheetTarget'; // Replace with actual stylesheet target
 *
 * bootstrapWithAuthHeader(config, targetElement, preLoadComponents, portalTarget, styleSheetTarget);
 */
export function bootstrapWithAuthHeader(config: any, target: string, preLoadComponents?: any[], portalTarget: string, styleSheetTarget: string): Promise<void>;
/**
 * Initializes the Constellation Core by importing assets and Constellation Core itself.
 * @private
 * @param {string} staticContentServer - The static content server URL.
 * @returns {Promise<void>} A Promise that resolves once initialization is complete.
 */
export function initConstellationCore(staticContentServer: string): Promise<void>;
/**
 * @private
 * @returns
 */
export function isNewUnifiedBuild(): boolean;
/**
 * Registers for debug information and sets the application to preview mode.
 * @private
 * @param {*} channel - The BroadcastChannel used to post debug information.
 */
export function registerForDebugInfo(channel: any): void;
/**
 * Toggles the tracer headers based on messages received through the channel.
 * @private
 * @param {*} channel - The BroadcastChannel used to toggle tracer headers.
 */
export function toggleTracerHeaders(channel: any): void;
/**
 * Loads environment information based on the provided configuration.
 * @private
 * @param {Object} config - Configuration object containing environment information.
 * @property {Object} config.theme - Theme information.
 * @property {string} config.theme.definition - Definition of the theme in JSON format.
 * @property {Object} config.keyMapping - Key mapping information.
 */
export function loadEnvironmentInfo(config: any): Promise<void>;
/**
 * This API overrides the initial locale retrieved by application config.
 * API must be called at portal loading and bootstrap initialized.
 * It makes sure all the localized content loads in the given locale instead of the initial locale.
 * This API can be only called once at the time of portal load. Calling after the portal is loaded
 * will not load the application's localized content.
 *
 * Example usage:
 *    updateLocale('de_DE')
 * @private
 * @param {string} locale - The locale to be set.
 */
export function updateLocale(locale: string): void;
