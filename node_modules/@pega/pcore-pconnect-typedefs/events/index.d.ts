/**
 * Provides APIs for subscribing to events like CaseEvents using PubSubUtils.
 * @module Events
 */
declare class Events {
    /**
     * Obtains the case related events that can be subscribed to using the getPubSubUtils() API.
     * @function getCaseEvent
     * @public
     * @returns {string} The name of the event as a string.
     * @example <caption>In this example, the API returns the name of the case related event that can be subscribed to.</caption>
     * const CaseEvent = PCore.getEvents().getCaseEvent().CASE_CREATED;
     */
    static getCaseEvent: () => Readonly<{
        CASE_ATTACHMENTS_UPDATED_FROM_CASEVIEW: string;
        CASE_FOLLOWER_UPDATED_BY_OPERATOR_FROM_CASEVIEW: string;
        CASE_FOLLOWER_UPDATE_BY_OPERATOR_FROM_WIDGET: string;
        CASE_CREATED: string;
        CREATE_STAGE_DONE: string;
        CREATE_STAGE_CANCELLED: string;
        CREATE_STAGE_SAVED: string;
        CREATE_STAGE_DELETED: string;
        ASSIGNMENT_SUBMISSION: string;
        END_OF_ASSIGNMENT_PROCESSING: string;
        CLOSE_CONFIRM_VIEW: string;
        CASE_OPENED: string;
        CASE_CLOSED: string;
        ASSIGNMENT_OPENED: string;
        CASE_PREVIEW: string;
        CURRENT_ASSIGNMENT_UPDATED: string;
        CASE_LOCK_EVENT: string;
    }>;
    /**
     * Obtains the data object related events that can be subscribed to using the getPubSubUtils() API.
     * @function getDataEvent
     * @public
     * @returns {string} The name of the event as a string.
     * @example <caption>In this example, the API returns the name of the data object related event that can be subscribed to.</caption>
     * const dataEvent = PCore.getEvents().getDataEvent().DATA_OBJECT_CREATED;
     */
    static getDataEvent: () => Readonly<{
        DATA_OBJECT_CREATED: string;
        DATA_OBJECT_DELETED: string;
        DATA_OBJECT_UPDATED: string;
    }>;
    /**
     * This function helps to get all the transient items related events
     * which are supposed to be used to subscribe using getPubSubUtils.
     * @function getTransientEvent
     * @public
     * @returns {string} Event Name which needs to be subscribed to.
     * @example <caption>In these examples the API returns the transient event name which can be used to subscribe.</caption>
     * const TransientEvent = PCore.getEvents().getTransientEvent().UPDATE_PROMOTED_FILTERS;
     * // console output:
     * // updatePromotedFilters
     * @private
     */
    static getTransientEvent: () => Readonly<{
        UPDATE_PROMOTED_FILTERS: string;
    }>;
    /**
     * Obtains the bootstrap-shell related events that can be subscribed to using the getPubSubUtils() API.
     * @function getBootstrapShellEvent
     * @returns {object} All the bootstrap-shell event name.
     * @example <caption>In this example, the API returns the name of the bootstrap-shell related event that can be subscribed to.</caption>
     * const bootstrapShellEvent = PCore.getEvents().getBootstrapShellEvent().CONSTELLATION_LOADED;
     * @private
     */
    static getBootstrapShellEvent: () => Readonly<{
        CONSTELLATION_LOADED: string;
    }>;
}
export default Events;
