import { BrowserBookmarkOptions, RestAPIPayload, RoutingInfoObj } from './types';
/**
 * this method is a toggle feature to enable or disable application routing.
 * @param {boolean} bEnable boolean to toggle app routing
 */
export declare const enableAppRouting: (bEnable: boolean) => boolean;
/**
 * this method is a toggle feature to enable or disable application routing
 * @function isAppRoutingEnabled
 * @returns {boolean} isAppRoutingEnabled Flag
 */
export declare const isAppRoutingEnabled: () => boolean;
/**
 * Get semantic url for given routeKey (ex: showView)
 * @function getSemanticURL
 * @param {*} routeKey - routeKey
 * @param {*} payload - payload
 * @param {*} queryParameters - queryParameters
 * @returns {*} semantic url or empty string
 */
export declare const getSemanticURL: (routeKey: string, payload: any, queryParameters: any) => string;
/**
 * Get restApi for given routeKey (ex: showView)
 * @function getRestEndPoint
 * @param {*} routeKey - routeKey
 * @param {*} payload - payload
 * @returns {*} restApi and reqType
 */
export declare const getRestEndPoint: (routeKey: string, payload: any) => RoutingInfoObj;
/**
 * build and return complete rest url including host.
 * @function getRestEndPoint
 * @param {*} routeKey - routeKey
 * @param {*} payload - payload
 * @returns {*} Returns and object containing restApi and reqType properties if the passed routeKey is present in routing info else null.
 */
export declare const resolveRestApi: (routeKey: string, payload?: any) => RestAPIPayload;
/**
 * this method is wrapper function for _routeProcessor
 * @function _routeProcessor
 * @param {*} translatedData - { uiResources, data, options }
 */
export declare const routeProcessor: (translatedData: any) => void;
/**
 * this method is wrapper function for _buildSemanticURL
 * @param {*} urlPath - object containing pxURLPath
 * @returns {string} - url containing caseId in case of case link along with application domain and app name
 */
export declare const resolveSemanticURL: (urlPath: string) => any;
/**
 * this method is a public API exposed to other modules
 * @function parseResponse
 * @param {*} translatedData - { uiResources, data, options }
 */
export declare const parseResponse: (translatedData: any) => void;
/**
 * this method listens to browser back/forward event
 * @function publishForBrowserHistory
 * @param {*} event - popstate event
 */
export declare const publishForBrowserHistory: (event: any) => void;
/**
 * this method checks if browser url is a semantic url or not.
 * @function isSemanticURL
 * @returns {boolean} isSemanticURL Flag
 */
export declare const isSemanticURL: () => boolean;
/**
 * Get the restApi for the given view
 * @param   {string}    viewID - View Name passed in the queryparam
 * @param   {string}    viewClass - View Name passed in the queryparam
 * @returns {object}    restApi - restApi for the view
 */
export declare const getViewRestEndPoint: (viewID: string, viewClass: string) => RoutingInfoObj;
/**
 * this method checks if browser url is a valid semantic url or not.
 * @function isValidSemanticURL
 * @returns {boolean} isSemanticURL Flag
 */
export declare const isValidSemanticURL: () => boolean;
/**
 * API to set defaultRoute name
 * @param {string} defaultRoute - Default route of portal channel
 */
export declare const setDefaultRoute: (defaultRoute: string) => void;
/**
 * API to get defaultRoute name
 * @returns {string} defaultViewUrlpath - Default route of portal channel
 */
export declare const getDefaultRoute: () => string;
/**
 * this method publish for browser bookmark or refresh in viewcontainer (primary)
 * @function publishForBrowserBookmark
 * @param {*} options - options
 */
export declare const publishForBrowserBookmark: (options: BrowserBookmarkOptions) => void;
/**
 * This method initializes instance variables of Class
 * @function init
 * @param {*} routingInfo - Application Routing Table Information
 * @param {boolean} disableBrowserNavigation - Optional local mechanism to disable app navigation through browser history
 */
export declare const init: (routingInfo: any, disableBrowserNavigation?: boolean) => void;
/**
 * This method merges the existing routingInfo with the passed routingInfo
 * @function addRoutes
 * @param {*} routingInfo - Application Routing Table Information
 */
export declare const addRoutes: (routingInfo: any) => void;
/**
 * this method reads value from Application.pyLabel
 * @function initializeApplicationLabel
 * @param {*} applicationData - response.data
 */
export declare const initializeApplicationLabel: (applicationData: any) => void;
/**
 * this method update document title
 * @function updateDocumentTitle
 * @param {string} title - document title
 */
export declare const updateDocumentTitle: (title: string) => void;
