/**
 * @file Implements Browser History Management Logic: consists of methods for handling change in browser history
 * @author WebWiz Team <WebWizDevelopmentTeam@pega.com>
 */
/**
 * this method update browser document title
 * @function updateDocumentTitle
 * @param {string} title - browser document title
 */
export declare const updateDocumentTitle: (title: string) => void;
/**
 * this method is used to formulate the state for correponding semantic url
 * @function stateForSemanticURL
 * @param {*} info - information corresponding to semantic url
 * @param {*} options - other params like context
 * @returns {*} state corresponding to semantic url
 */
export declare const getStateForSemanticURL: (info: any, options: any) => {
    stateObj: any;
};
/**
 * this method is a wrapper function for history.pushState and implements the same in try-catch block
 * @function addToHistory
 * @param {*} state - state information corresponding to semantic url
 * @param {*} title - title corresponding to semantic url
 * @param {*} url - semantic url
 */
export declare const addToHistory: (state: any, title: string, url: string) => void;
/**
 * this method is a wrapper function for history.replaceState and implements the same in try-catch block
 * @function replaceHistory
 * @param {*} state - state information corresponding to semantic url
 * @param {*} title - title corresponding to semantic url
 * @param {*} url - semantic url
 */
export declare const replaceHistory: (state: any, title: string, url: string) => void;
/**
 * this method returns history state on Browser back/forward action
 * @function getStateForBackForwardNav
 * @param {*} event - popstate event
 * @returns {*} state corresponding to popstate event
 */
export declare const getStateForBackForwardNav: (event: any) => any;
/**
 * this method add a Event listener for browser back/forward event
 * @function addEventListenerForHistory
 * @param {*} handlerFunc - event handler function reference
 */
export declare const addEventListenerForHistory: (handlerFunc: Function) => void;
/**
 * this method add a Event listener for browser refresh event
 * @function addEventListenerForRefresh
 */
export declare const addEventListenerForRefresh: () => void;
/**
 * this method returns the pathname of a URL
 * @function getPathNameOfUrl
 * @returns {*} pathname of URL with first and last '/' removed
 */
export declare const getPathNameOfUrl: () => string;
/**
 * this method returns the pathname of a URL
 * @function getPathNameOfUrl
 * @returns {*} pathname of URL with first and last '/' removed
 */
export declare const getPathNameWithQueryParams: () => string;
/**
 * this method returns URL
 * @function getFullUrl
 * @returns {*} complete URL
 */
export declare const getFullUrl: () => string;
/**
 * This method returns url search parameters
 * @function getQueryParams
 * @returns {*} complete URL
 */
export declare const getQueryParams: () => string;
/**
 * this method displays a message in Browser console
 * @function sendMessageToConsole
 * @param {string} message - message
 * @param {*} additionalInfo - additional Information to be displayed with message
 * @param {string} messageType - warning | error | info
 */
export declare const sendMessageToConsole: (message: any, additionalInfo: any, messageType: string) => void;
