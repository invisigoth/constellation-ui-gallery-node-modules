declare class RemoteCase {
    static remoteCaseMapping: {};
    /**
     * * [setRemoteCaseMapping]
     * Description : Sets the remote case mapping object.
     * @param {object} mapping captures the case remote relationship object
     * eq.,
     * {
     *   Work-Host:{
     *     RemoteClassName: "Work-Remote",
     *     RemoteSystemID: "SystemName"
     *   }
     * }
     */
    static setRemoteCaseMapping: (mapping: any) => void;
    /**
     * * [setRemoteCaseMapping]
     * Description : returns the captured remote case mapping.
     * @returns {object} returns the captured mapping
     * eq.,
     * {
     *   Work-Host:{
     *     RemoteClassName: "Work-Remote",
     *     RemoteSystemID: "SystemName"
     *   }
     * }
     */
    static getRemoteCaseMapping: () => {};
    /**
     * * [getRemoteCase]
     * Description : Sets the remote case mapping object.
     * @param {string} hostCaseClass host case class
     * @returns {object} Returns the mapped object
     * eq.,
     * {
     *     RemoteClassName: "Work-Remote",
     *     RemoteSystemID: "SystemName"
     *   }
     */
    static getRemoteCase: (hostCaseClass: any) => any;
    /**
     * * [getRemoteCase]
     * Description : Sets the remote case mapping object.
     * @param {string} hostCaseClass host case class
     * @returns {object} Returns the mapped object
     * eq.,
     * {
     *     RemoteClassName: "Work-Remote",
     *     RemoteSystemID: "SystemName"
     *   }
     */
    static isRemoteCase: (hostCaseClass: any) => boolean;
    /**
     * * [getRemoteHeaderByContext]
     * Description : Sets the remote case mapping object.
     * @param {string} context context name
     * @returns {string} Returns mapped header
     */
    static getRemoteHeaderByContext: (context: any) => any;
    /**
     * * [getRemoteHeader]
     * Description : Sets the remote case mapping object.
     * @param {string} caseClass hostclass name
     * @returns {string} Returns mapped header
     */
    static getRemoteHeader: (caseClass: any) => any;
    static injectRemoteCaseHeader: (headers: any, payload: any, context: any) => void;
}
export default RemoteCase;
