import { C11nEnv } from '../interpreter/c11n-env';
/**
 * Class to provide case information related API's
 */
export declare class CaseInfo {
    private readonly c11nEnv;
    constructor(c11nEnv: C11nEnv);
    /**
     * Fetch case stages details for a given case id
     * @example <caption>In this example, the API returns the stages of the case with id "OPB1HW-SPACETRA-WORK RA-43001".</caption>
     * const stages = getPConnect().getCaseInfo().getCaseStages(OPB1HW-SPACETRA-WORK RA-43001);
     * @param {string} caseID The id of the case whose stages are to be fetched<br>
     * @param {string} context The current context where to render
     * @returns {object} - Case stages details of given case id
     */
    getCaseStages(caseID: any, contextName: any): any;
    /**
     * Obtains the name of the case type.
     *
     * @example <caption>In this example, the API returns the name of the case type.</caption>
     * const caseTypeName = getPConnect().getCaseInfo().getCaseTypeName();
     *
     * @returns {string} Case type name
     * <br><br>
     * Eg: Registration
     */
    getCaseTypeName(): any;
    /**
     * Returns Case name
     *
     * @example <caption>Example for getName()</caption>
     * const caseName = getPConnect().getCaseInfo().getName();
     *
     * @returns {string} Case name
     * <br><br>
     * Eg: Registration
     */
    getName(): any;
    /**
     * Returns Case class name
     *
     * @example <caption>Example for getClassName()</caption>
     * const className = getPConnect().getCaseInfo().getClassName();
     *
     * @returns {string} Case class name
     * <br><br>
     * Eg: ON8TTL-C11nGall-Work-CreateStageTest
     */
    getClassName(): any;
    /**
     * Fetch available processes for a case
     * @example <caption>Example for getAvailableProcesses()".</caption>
     * const availableProcesses = getPConnect().getCaseInfo().getAvailableProcesses();
     * @returns {Array} - returns available processes
     * <br>
     * Eg:  [
     *          {
     *              "name": "Vendor Addition",
     *              "links": {
     *              "add": {
     *                "rel": "self",
     *                "href": "/cases/ON8TTL-C11NGALL-WORK PC-99001/processes/VendorAddition_Flow",
     *                "type": "POST",
     *                "title": "add case optional process"
     *                    }
     *                  },
     *               "ID": "VendorAddition_Flow",
     *               "type": "Case"
     *           }
     *        ]
     */
    getAvailableProcesses(): any;
    /**
     * Returns Case key
     *
     * @example <caption>Example for getKey()</caption>
     * const caseKey = getPConnect().getCaseInfo().getKey();
     *
     * @returns {string} Case key
     * <br><br>
     * Eg: ON8TTL-C11NGALL-WORK CST-1
     */
    getKey(): any;
    /**
     * Returns Case ID
     *
     * @example <caption>Example for getID()</caption>
     * const caseKey = getPConnect().getCaseInfo().getID();
     *
     * @returns {string} - Case ID
     * <br><br>
     * Eg: CST-1
     */
    getID(): any;
    /**
     * Returns Assignment ID
     *
     * @example <caption>Example for getAssignmentID()</caption>
     * const assignmentID = getPConnect().getCaseInfo().getAssignmentID();
     *
     * @returns {string} Assignment ID
     * <br><br>
     * Eg: ASSIGN-WORKLIST ON8TTL-C11NGALL-WORK CST-51001!CREATEFORM_DEFAULT
     */
    getAssignmentID(): any;
    /**
     * Returns Case actions info
     *
     * @example <caption>Example for getActions()</caption>
     * const actions = getPConnect().getCaseInfo().getActions();
     *
     *
     * @returns {Array} Case actions info
     * <br>
     * Eg: {
     *       "secondary": [
     *           {
     *              "jsAction": "cancelAssignment",
     *              "name": "Cancel",
     *               "actionID": "cancel"
     *           }
     *       ],
     *       "main": [
     *           {
     *               "jsAction": "finishAssignment",
     *               "name": "Next   ",
     *               "actionID": "next"
     *           }
     *       ]
     *   }
     */
    getActions(): any;
    /**
     * Returns current flow action ID that is rendered.
     *
     * @example <caption>Example for getActiveFlowActionID()</caption>
     * const activeFlowActionID = getPConnect().getCaseInfo().getActiveFlowActionID();
     *
     * @returns {string} Current flow action ID
     * <br><br>
     * Eg: MyFlowAction1
     */
    getActiveFlowActionID(): any;
    /**
     * Returns parent case info when the current assignment is in child case.
     *
     * @example <caption>Example for getParentCaseInfo()</caption>
     * const parentCaseInfo = getPConnect().getCaseInfo().getParentCaseInfo();
     *
     * @returns {object} Parent Case details of current child Case.
     * <br><br>
     * Eg:
     *  {
     *       "hasMoreAncestors":"false",
     *       "name":"Parent case",
     *       "links":{
     *          "open":{
     *             "rel":"other",
     *             "href":"/cases/OTVTGS-ZOMATO-WORK P-13002",
     *             "type":"GET",
     *             "title":"open parent case"
     *          }
     *       },
     *       "ID":"OTVTGS-ZOMATO-WORK P-13002",
     *       "content":{
     *          "pyStatusWork":"New",
     *          "classID":"OTVTGS-Zomato-Work-ParentCase",
     *          "pxUpdatedOperatorAndDateTime":"Gallery less than a minute ago",
     *          "pxUrgencyWork":"10",
     *          "pxCreateOperatorAndDateTime":"Gallery 38 minutes ago"
     *       }
     *    }
     */
    getParentCaseInfo(): any;
    /**
     * Returns true if the view is in perform mode else false
     *
     * @example <caption>Example for isPerform()</caption>
     * const isPerform = getPConnect().getCaseInfo().isPerform();
     *
     * @returns {boolean} Flag to indicate perform mode or not
     *
     */
    isPerform(): boolean;
    /**
     * Returns true if the view is in review mode else false
     *
     * @example <caption>Example for isReview()</caption>
     * const isReview = getPConnect().getCaseInfo().isReview();
     *
     * @returns {boolean} Flag to indicate review mode or not
     *
     */
    isReview(): boolean;
    /**
     * Checks and returns true if the current assignment is in create stage.
     * @private
     * @returns {boolean} - Returns true if the current assignment is in create stage else false
     */
    isAssignmentInCreateStage(): boolean;
    /**
     * Checks and returns true if the current action is local action.
     * @private
     * @returns {boolean} - Returns true if the current action is local action else false
     */
    isLocalAction(): boolean;
    /**
     * Obtains the name of the current assignment's view in a case.
     *
     * @example <caption>Example for getCurrentAssignmentViewName()</caption>
     * const viewName = getPConnect().getCaseInfo().getCurrentAssignmentViewName();
     *
     * @returns {string} View name
     * <br><br>
     * Eg: EmployeeDetails
     */
    getCurrentAssignmentViewName(): any;
    /**
     * Returns the refresh condition of current active case action
     *
     * @example <caption>Example for getActionRefreshConditions()</caption>
     * const refreshConditions = getPConnect().getCaseInfo().getActionRefreshConditions();
     *
     * @returns {object} Refresh Conditions
     * <br><br>
     * Eg:  refreshConditions: [{field: ".Datetime",event: "Changes"}, {field: ".Checkbox",event: "Changes"}]
     * @private
     */
    getActionRefreshConditions(): any;
    /**
     * Returns Business ID
     * @example <caption>Example for getBusinessID()</caption>
     * const caseKey = getPConnect().getCaseInfo().getBusinessID();
     *
     * @returns {string} Business ID
     * <br><br>
     * Eg: CST-1
     */
    getBusinessID(): any;
    getAssignments(): any;
    getChildAssignments(): any;
    isCaseWideLocalAction: () => boolean;
    getAllAssignments(): any;
    getActiveCaseActionName(): any;
    getFirstCaseActionName(): any;
    hasAssignments(): boolean;
    hasMessages: () => boolean;
    hasGetNextWorkLinks(): boolean;
}
export default CaseInfo;
