declare class CaseAPIs {
    /**
       * Open the work object associated with the given workID into the page associated with the pageID
       * @param {string} workID The work object to be opened<br>
       * Example: "OPB1HW-SPACETRA-WORK RA-10001"<br><br>
       * @param {string} context The current context where to render
       * @param {string} target The target container - primary
       * @param {object} options - Optional, object containing extra infomation like startingFields and pageName
       * @param {string} options.pageName  - Name of the page like pyDetails, pyEmbedAssignment
       * @param {string} options.channelName  - Optional, Channel Name
       * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
  
       */
    static openCase(workID: any, context: any, target: any, options: any): Promise<unknown>;
    /**
     * Open the given assignment and associated with the given container target
     * @param {string} assignmentId The ID of the assignment to be opened.<br>
     * Example: "ASSIGN-WORKLIST OPB1HW-SPACETRA-WORK RA-43001!REQUEST_FLOW_0"
     * <br><br>
     * @param {string} context The current context where to render
     * @param {string} target The target container - primary
     * @param {object} options - Optional, object containing extra infomation like startingFields and pageName
     * @param {string} options.pageName  - Name of the page like pyDetails, pyEmbedAssignment
     * @param {string} options.channelName  - Optional, Channel Name
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    static openAssignment(assignmentId: any, context: any, target: any, options: any): Promise<unknown>;
    /**
     *
     * Create a work object for the given <strong>class</strong> and <strong>flow</strong>.
     * Once created, show the work object in the given container <strong>target</strong>.
     *
     * @param {string} workClass The ID class.<br>
     * Example: "ASSIGN-WORKLIST OPB1HW-SPACETRA-WORK RA-43001!REQUEST_FLOW_0"
     * <br><br>
     * @param {string} context The current context where to render
     * @param {string} target The target container - primary
     * @param {object} options - Optional, object containing extra infomation like startingFields
     * @param {string} options.channelName - Optional, Channel Name
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    static createCase(workClass: any, context: any, target: any, options: any): Promise<unknown>;
    /**
     *
     * Open the next urgent assignment for the user
     *
     * @param {string} context The current context where to render
     * @param {string} target The target container - primary
     * @param {object} options - Optional, object containing extra infomation
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    static getNextWork(context: any, target: any, options: any): Promise<unknown>;
    static getOpenedCaseItems(target: any): any[];
    /**
       * Fetch case details for a given case id
       * @param {string} caseID The case details to be fetched<br>
       * Example: "OPB1HW-SPACETRA-WORK RA-43001"<br><br>
       * @returns {object} - Case details of given case id
  
      */
    static getCaseDetails: (caseID: any) => any;
    /**
     * Fetch case-wide bulk actions for given caseIds list
     * @param {Array} caseIDList The caseIds list<br>
     * Example: ["OPB1HW-SPACETRA-WORK RA-43001"]<br><br>
     * @returns {Array} - all actions eligible for bulk processing for given caseIds
     */
    static getCaseBulkActions: (caseIDList: any) => Promise<any[]>;
}
export default CaseAPIs;
