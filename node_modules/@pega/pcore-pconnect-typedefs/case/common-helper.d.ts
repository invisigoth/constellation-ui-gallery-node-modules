export declare const DXAPI_RESPONSE_DATA_READ_PATHS: {
    CASE_INFO: string;
    CASE_CLASS_NAME: string;
    NEXT_ASSIGNMENT_INFO_ID: string;
    ASSIGNMENTS: string;
    CASE_INFO_ID: string;
    CASE_FIRST_FLOW_ACTION_NAME: string;
    CASE_FIRST_ASSIGNMENT_ID: string;
};
export declare const getContainerName: (actionType: any, actionInPayload: any) => any;
export declare const getContainerNameFromContainerItemID: (containerItemID: any) => any;
export declare const isWorkAreaContainer: (containerName: any) => boolean;
export declare const isModalContainer: (containerName: any) => boolean;
export declare const isActivateContainerItemActionType: (actionType: any) => boolean;
export declare const getNextAssignmentInfoID: (dxApiResponse: any) => any;
export declare const isErrorActionType: (actionType: any) => boolean;
export declare const hasErrorActionType: (actionsOut: any) => any;
export declare const getCaseInfo: (dxApiResponse: any) => any;
export declare const hasAssignments: (dxApiResponse: any) => boolean;
export declare const getDisplayCaseID: (caseID: any) => any;
export declare const getCaseClassName: (dxApiResponse: any) => any;
export declare const isNextStepInCreateStage: (dxApiResponse: any) => boolean;
export declare const getCaseInfoID: (dxApiResponse: any) => any;
export declare const getCaseFirstFlowActionID: (dxApiResponse: any) => any;
export declare const getCaseFirstAssignmentID: (dxApiResponse: any) => any;
export declare const addActionToRemoveContainerItem: (actionsOut: any, options: any) => void;
/**
 * this function helps to check whether parent and child container data context referring to same work item or not
 * @private
 * @param {*} childContainerItemID - child container item id
 * @returns {boolean} - true --> if both container data context refers to same work item
 */
export declare const isParentAndChildContextHoldingSameItem: (childContainerItemID: any) => boolean;
export declare const updateKeyAndFlowName: (sourceObject: any, dxApiResponse: any, options?: {}) => void;
/**
 * this function helps to set last submit time property in context_data
 * @param {*} data - data object to which refresh properties will get added
 * @param {*} actionInPayload -  ncoming action payload from public action api
 * @private
 */
export declare const setLastRefreshTimeProperty: (data: any, actionInPayload: any) => void;
/**
 * this function handles the promise logic
 * @private
 * @param {*} actionsOut - actions which will get dispatched out
 * @param {*} actionMgrID - action manager id
 * @param {*} errorDetails - that gives the type of information about the error
 * @returns {string} - returns 'reject' or 'resolve'
 */
export declare const promiseHandler: (actionsOut: any, actionMgrID: any, errorDetails: any) => string;
/**
 * this function tests whether given case is coexistence or not
 * @private
 * @param {string} className - classname of the case
 * @returns {boolean} - returns boolean if case is coexistence or not
 */
export declare const isCoexistenceCase: (className: any) => boolean;
/**
 * returns flag whether the app built on Theme Cosmos or not
 * @returns {string}
 * @public
 * @static
 */
export declare const isBuiltOnThemeCosmos: () => boolean;
