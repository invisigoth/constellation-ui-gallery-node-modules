export declare const getViewTypeForFinishAssignment: (actionInPayload: any) => any;
export declare const getActionNameForDxApiCall: (actionInPayload: any) => "finishAssignment" | "caseWideActions";
export declare const addActionToActivateModalContainerItem: (actionsOut: any, actionInPayload: any) => void;
export declare const addActionToRemoveCurrentModalContainerItem: (actionsOut: any, actionInPayload: any) => void;
export declare const canOpenCaseView: (context: any) => any;
export declare const processLastAssignmentInCreateStageModal: (actionsOut: any, { translatedDXAPIResponse, actionInPayload }: {
    translatedDXAPIResponse: any;
    actionInPayload: any;
}, commonOutActionPayload: any) => Promise<any>;
export declare const addActionToRefreshCasePreviewView: (actionsOut: any, actionInPayload: any, options: any) => void;
/**
 * this function helps to merge response from child container to parent container when the same case data is being shared between both
 * @param {*} actionsOut - actions which will get dispatched out
 * @param {*} actionInPayload -incoming action payload from public action api
 * @param {*} options - optional data
 * @returns {void}
 * @private
 */
export declare const addActionToMergeResponseDataToParentContext: (actionsOut: any, actionInPayload: any, { data, caseViewMode }: {
    data: any;
    caseViewMode: any;
}) => void;
export declare const getPayloadForEndOfAssignmentProcessingEvent: (translatedDXAPIResponse: any, actionInPayload: any) => {
    isCaseWideAction: any;
    caseID: any;
    assignmentID: any;
    actionID: any;
};
export declare const addRemoveTransientItemAction: (actionsOut: any, { isModalAction, target, transientItemID }: {
    isModalAction: any;
    target: any;
    transientItemID: any;
}) => void;
export declare const createPayloadForOpenWorkByHandle: (parentCaseInfo: any, actionInPayload: any, actionsOut: any) => void;
export declare const isModalLaunchedFromPreview: (context: any) => boolean;
export declare const isModalLaunchedFromPrimary: (context: any, activeWorkArea: any) => boolean;
export declare const createToastMessage: (payload: any) => string;
export declare const getContainerIdByCaseId: (context: any, caseID: any) => string;
export declare const createPayloadForRefreshAssignment: (context: any, caseWideAction?: boolean, contextData?: boolean) => {
    ID: any;
    actionID: any;
    context: any;
    caseWideAction: boolean;
    contextData: boolean;
    options: {
        actionMgrID: any;
    };
};
export declare const addActionsForLocalActionLaunchedFromPrimary: (activeWorkArea: any, commonOutActionPayload: any, parentContainerItemID: any, actionInPayload: any, actionsOut: any, isNextAssignmentInfoPresent: any, keyValue: any, translatedDXAPIResponse: any, chainedData: any) => Promise<void>;
export declare const canUpdateAssignmentData: (validAssignment: any, context: any, translatedDXAPIResponse: any, isModalAction: any, canPerform: any) => any;
export declare const processFinishAssignmentForCreateStage: (response: any, actionInPayload: any, commonOutActionPayload: any, translatedDXAPIResponse: any, actionsOut: any) => Promise<void>;
export declare const processFinishAssignmentWithOpenAssignment: (response: any, actionsOut: any, context: any) => Promise<void>;
export declare const addActionsForFinishAssignmentOfNonCreateStages: (commonOutActionPayload: any, actionInPayload: any, translatedDXAPIResponse: any, currentContainerInfo: any, actionsOut: any) => Promise<void>;
export declare const addActionsForFinishAssignmentLaunchedFromModal: (actionInPayload: any, commonOutActionPayload: any, isNextAssignmentInfoPresent: any, keyValue: any, translatedDXAPIResponse: any, actionsOut: any, chainedData: any, response: any) => Promise<void>;
export declare const publishEventsForLocalActionFromPreviewView: (commonOutActionPayload: any, actionInPayload: any, activeWorkArea: any) => void;
export declare const canPerformCurrentAssignment: (translatedDXAPIResponse: any, actionInPayload: any) => any;
