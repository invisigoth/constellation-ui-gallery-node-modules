import { CaseOptions } from './types';
/**
 * Provides APIs useful for Mashup use cases.
 */
declare class MashupApi {
    /**
     * Loads the case by caseid into target mashup
     * @function
     * @public
     *
     * @param {string} caseId to openCase
     * @param {string} targetContext optional to target different container
     * @param {object} options - Optional, object containing extra infomation like pageName
     * @param {string} options.pageName  - Name of the page like pyDetails, pyEmbedAssignment
     * @param {string} options.channelName - Optional, Channel Name
     * @returns {object} promise
     *
     * @example <caption>Example for loadCase api</caption>
     * PCore.getMashupApi().openCase('OPB1HW-SPACETRA-WORK RA-10001');
     */
    static openCase(caseId: string, targetContext?: string, options?: CaseOptions): Promise<unknown>;
    /**
     * Creates case and loads view into target mashup
     * @function
     * @public
     *
     * @param {string} className Name of the case class
     * @param {string} targetContext optional to target different container
     * @param {object} options - Optional, object containing extra infomation like startingFields and pageName
     * @param {string} options.pageName  - Name of the page like pyDetails, pyEmbedAssignment
     * @param {object} options.startingFields - Optional, object containing fields to be set while creating a case
     * @param {string} options.channelName - Optional, Channel Name
     * @param {boolean} option.disableAssignmentHeader - flag to display/hide the header of the assignment in assignment page
     *
     * @returns {object} promise
     *
     * @example <caption>Example for createCase api</caption>
     * const options = {
     *  pageName: "pyEmbedAssignment",
     *  startingFields: {
     *    FirstName: "Adam",
     *    LastName: "Smith",
     *    Vehicle: {
     *      Make: "Honda",
     *      Model: "Accord"
     *    }
     *  }
     *}
     * PCore.getMashupApi().createCase('OXJ4P4-CoWin-Work-Feedback', options);
     */
    static createCase(className: string, targetContext?: string, options?: CaseOptions): Promise<unknown>;
    /**
     * Obtains the assignment that contains the highest priority and loads it into a target context.
     * @function
     * @public
     *
     * @param {string} targetContext - Optional, The context where the assignment must be loaded. If the value of targetContext is not provided, the default value is app.
     * @param {object} options - Optional, The JavaScript object containing the property that can be used to load a specific view. By Default only pageName property is passed
     * @param {string} options.pageName  - The name of the view that must be loaded into a container.
     * @param {boolean} option.disableAssignmentHeader - flag to display/hide the header of the assignment in assignment page
     * @returns {object} promise
     *
     * @example <caption>In this example, the API loads the assignment with the highest priority into the workarea context.</caption>
     * PCore.getMashupApi().getNextWork('workarea', { pageName: 'pyEmbedAssignment' });
     */
    static getNextWork(targetContext?: string, options?: CaseOptions): Promise<unknown>;
    /**
     * Loads the assignment into target mashup
     * @function
     * @public
     *
     * @param {string} assignmentId assignment id to load
     * @param {string} targetContext optional to target different container
     * @param {object} options - Optional, object containing extra infomation like pageName
     * @param {string} options.pageName  - Name of the page like pyDetails, pyEmbedAssignment
     * @param {string} options.channelName - Optional, Channel Name
     * @param {boolean} option.disableAssignmentHeader - flag to display/hide the header of the assignment in assignment page
     * @returns {object} promise
     *
     * @example <caption>Example for loadCase api</caption>
     * PCore.getMashupApi().openAssignment('Work-Test M-12!Assignment_id');
     */
    static openAssignment(assignmentId: string, targetContext?: string, options?: CaseOptions): Promise<unknown>;
    /**
       * Opens the page view into the target mashup
       * @function
       * @public
       * @param {string} pageName Name of the page
       * @param {string} className Name of the page class
       * @param {string} targetContext optional to target different container
       * @param {object} options - Optional, object containing extra infomation like defaultCasePage
       * @param {string} options.defaultCasePage  - Name of the page like pyDetails, pyEmbedAssignment
       * @param {boolean} options.disableAssignmentHeader - flag to display/hide the header of the assignment in assignment page
  
       * @returns {object} promise
       *
       * @example <caption>Example for openPage api</caption>
       * PCore.getMashupApi().openCase('pyHome','Data-Portal');
       */
    static openPage(pageName: string, className: string, targetContext?: string, options?: CaseOptions): Promise<unknown>;
    /**
       * Returns context API
       * @function
       * @public
       *
       * @param {string} pageReference Page reference
       * @param {string} targetContext optional to target different container
  
       * @returns {object} This API returns the PConnect object which provides access to context APIs
       *
       * @example <caption>Example for using Context APIs</caption>
       * const contextAPI = PCore.getMashupApi().getCurrentContextAPI("MashupPage");
       * contextAPI.setValue(".BannerLabel", "Welcome!");
       *
       * const contextAPI = PCore.getMashupApi().getCurrentContextAPI("caseInfo.content", "app/primary_1/workarea_2");
       * contextAPI.setValue(".CustomerName", "Connor");
       */
    static getCurrentContextAPI(pageReference: string, targetContext?: string): import("../interpreter/c11n-env").C11nEnv;
}
export default MashupApi;
