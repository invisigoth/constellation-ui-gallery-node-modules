import { C11nEnv } from './c11n-env';
/**
 * Helps to build the contextObject by translating
 * configuration or metadata.
 */
declare class Translator {
    /**
     * Resolves the config into contextObject, insense
     * eq., if config has
     * {
     *  label: '.FirstName'
     * }
     *
     * It going to convert into contextObject as
     * {
     *  label: "alice" // value read from store.
     * }
     *
     * All the properties will be captured in stateObj
     * like {
     *  label: '.FirstName'
     * }
     * It will help to bind the state to the component.
     * @param {object} props target object
     * @param {object} config component metadata
     * @param {object} stateObj to keep all properties
     */
    static resolveProps(props: any, config: any, stateObj: any): void;
    static addToStateObject(key: string, value: string, stateObj: any): void;
    /**
     * Resolves the config into contextObject, insense
     * eq., if config has
     * {
     *  label: '.FirstName'
     * }
     *
     * It going to convert into contextObject as
     * {
     *  label: "alice" // value read from store.
     * }
     *
     * All the properties will be captured in stateObj
     * like {
     *  label: '.FirstName'
     * }
     * It will help to bind the state to the component.
     * @param {*} props target object
     * @param {*} config component metadata
     * @param {object} c11nEnv constellation env
     */
    static translate(props: any, config: any, c11nEnv: C11nEnv): any;
    static resolveReference(meta: any, c11nEnv: C11nEnv): {
        context: any;
        meta: any;
    };
}
export default Translator;
