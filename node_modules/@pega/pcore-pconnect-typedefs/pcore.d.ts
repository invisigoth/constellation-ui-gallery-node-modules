import _isEqual from 'lodash.isequal';

import Initialiser from './initialiser';
import * as StateManager from './store/state/state-manager';
import * as ContainerUtils from './container/container-utils';
import { localeUtils } from './locale/locale-utils';
import Attachment from './attachment';
import ViewRule from './view-rule';
import FollowerApi from './case-follower';
import RelatedCasesApi from './related-cases';
import UserApi from './user';
import FeedUtils from './feed';
import Tags from './tags';
import Stakeholders from './stakeholders';
import EnvironmentInfo from './environment-info';
import RuntimeParamsAPI from './runtime-params';
import getPersonalizationUtils from './personalization';
import DataApi from './data-view/index';
import DataApiUtils from './data-view/DataApiUtils';
import AnalyticsUtils from './analytics';
import RoutingUtils from './router/routing-utils';
import RemoteCase from './case/remote-case';
import { createC11nEnv, registerComponentCreator } from './interpreter/c11n-env';
import * as AppRouter from './router/app-router';
import ModuleRegistry from './modules/module-registry';
import MessageManager from './messages';
import CoexistenceManager from './coexistence';
import { publicConstants } from './constants';
import MashupApi from './mashup/apis';
import Events from './events';
import SemanticUrlUtils from './router/semanticurl-utils';
import ErrorHandler from './error-handler';
import FormUtils from './form/form-utils';
import AnnotationUtils from './annotation/annotation-utils';
import FieldUtils from './fields/index';
import MessagingServiceManager from './messagingservice/manager';
import * as RuleStore from './rules/rules-store';
import DataStore from './datapage/index';
import DataTypeUtils from './datatype';
import CascadeManager from './cascade/manager';
import Debugger from './debug/debugger';
import DeferLoadManager from './deferload/manager';
import CaseUtils from './case/utils';
import StateUtils from './store/state/utils';
import * as ExpressionEngine from './expression/expression-engine';
import RefreshManager from './refresh/refresh-manager';
import ActionsSequencer from './actions/sequencer';
import * as RestClient from './rest-client';
import FieldDefaultUtils from './fields/field-default';
import AuthUtils from './utils/authentication-utils';
import NavigationUtils from './utils/navigation-utils';
import * as ViewResources from './utils/view-resources';
import PubSubUtils from './utils/pubsub-utils';
import AsynchronousUtils from './utils/asynchronous-utils';
import AssetLoader from './utils/asset-loader';
import './validation/validators/validators';
import './annotation/handlers/handlers';
import BootstrapUtils from './bootstrap/bootstrap-utils';
import ContextTreeManager from './contextree/treemanager';

/**
 * The <strong>PCore</strong> object provides access to methods
 * that are available
 * for use by Bridge layers that connect the Constellation
 * Core to a UI Library implementation. (For example, Nebula
 * is a bridge layer between Constellation Core and React.)
 * Methods defined on this class are available via the
 * <strong>PCore</strong> object.
 */
/* eslint-disable class-methods-use-this */
class PCore {
  /**
   * Constructor - <strong>Not for use outside of Core! Included for reference only.</strong>
   */
  constructor() {
    // Empty Constructor explicitly provided to control JSDoc output
    PCore.behaviorOverrides = {};
  }

  /**
   * JSON object that stores any behavior overrides.
   * <p>Supported override flag is:</p>
   * <p><strong>dynamicLoadComponents</strong> - when false, do not attempt to load components dynamically</p>
   * @private
   */
  static behaviorOverrides = {};

  /**
   * Returns the version of the PConnect/PCore APIs for this implementation.
   * @returns { string } The major/minor/patch version (ex: "8.6.1")
   * @function
   */
  getPCoreVersion = () => '8.23.0';

  /**
   * This API registers a callback that will be called once the application infrastructure
   * has established the store and is ready to perform its initial render.
   * It is expected that the component object and container ID information
   * passed into the callback will be used to call a
   * function that will render the component tree specified by the results of the
   * component object's getPConnect().
   *
   * Example use can be found in src/bridge/react_root.js:
   * PCore.onPCoreReady((root, target) => { render(root, target)});
   * where the incoming root and target arguments are passed along to the method
   * that renders the application
   *
   * @param {Function} callback The callback takes 2 arguments: root and target.
   * root is a JSON
   * object containing a "props" key. This is the component object that provides
   * access to the the initial getPConnect() for the top-level component
   * of the application. The root object may also provides a "domContainerID" key.
   * If that key exists, it used to get the DOM element with the given ID which is
   * then used as the target element in order the component object will be rendered.
   * If that key is null, the target argument passed to the callback is used  as the
   * initial point of rendering.
   *
   * target will be null when the application is first being rendered and may
   * be a string such "app/primary" to indicate the target container in which the
   * application should be rendered. If target is not defined, the component object
   * is rendered in the DOM's <app-root> element or in the element with id="app" if
   * there is no <app-root> element.
   *
   * @function
   */
  onPCoreReady = (callback) => {
    return BootstrapUtils.onPCoreReady(callback);
  };

  /**
   * This function returns the component registry bound to core.
   * It has methods to register or override existing components, this is exposed
   * so that components from other lib like mobile can replace desktop one.
   * @example <caption>Example for getComponentsRegistry()</caption>
   * const componentRegistry = PCore.getComponentsRegistry();
   * @returns {object} the Component registry
   * @function
   */
  getComponentsRegistry = () => {
    return BootstrapUtils.getComponentsRegistry();
  };

  /**
   * Utility function to check for a semantic URL
   * @function
   */
  checkIfSemanticURL = () => {
    return BootstrapUtils.checkIfSemanticURL();
  };

  /**
   * Utility function to check for a valid semantic URL
   * @function
   */
  isValidSemanticURL = () => {
    return AppRouter.isValidSemanticURL();
  };

  /**
   * This api provides utilities to update routing table.
   * @example <caption>Example for getRoutingUtils()</caption>
   * // this example will return the RoutingUtils API object
   * const routingUtils = PCore.getRoutingUtils();
   *
   * @returns {object} the {@link module:RoutingUtils|RoutingUtils} API object
   * @function
   * @private
   */
  getRoutingUtils = () => RoutingUtils;

  /**
   * Obtains an entry point to the {@link module:ViewResources|ViewResources} object that contains APIs to manage view metadata in rule store
   *
   * @example <caption>In this example, the getViewResources API is used to obtain the updateViewResources API.</caption>
   * const { updateViewResources } = PCore.getViewResources();
   *
   * @returns {object} An object of {@link module:ViewResources|ViewResources} APIs
   * @function
   */

  getViewResources = () => {
    return ViewResources;
  };

  /**
   * Utility function to configure for browser bookmarking
   * @param {object} payload need better description
   * @function
   */
  configureForBrowserBookmark = (payload) => {
    return BootstrapUtils.configureForBrowserBookmark(payload);
  };

  /**
   * Returns the Redux Store
   * @returns {object} the Redux Store
   * @function
   *
   * @example <caption>Example for getStore()</caption>
   * const store = PCore.getStore();
   */
  getStore = () => {
    return StateManager.getStore();
  };

  /**
   * Reset the Store to its initial state. <strong>Note: This is typically only
   * used by Mashups when they are exiting out of their flow and want
   * to leave the Store in a state that is initialized for the next use.
   * On the initial loading of the app, the store is automatically
   * initialized.
   * @function
   * @private
   * @returns {object} object with actionMgrID and promise keys: { actionMgrID: <theID>, promise: <thePromise> }
   *
   * @example <caption>Example for resetStore()</caption>
   * const store = PCore.resetStore();
   */
  resetStore = () => StateManager.resetStore();

  /**
   * Returns the Message Manager API's. It exposes below API's
   * <ul>
   *  <li>addMessages</li>
   *  <li>getMessages</li>
   *  <li>clearMessages</li>
   * </ul>
   *
   * @example <caption>Example for addMessages api</caption>
   * const { addMessages } = PCore.getMessageManager();
   * addMessages({
   *    messages: [
   *      {
   *        type: 'error',
   *        message: 'Validation Error'
   *      }
   *    ],
   *    category: 'HTTP'
   *    context: 'app/primary_2'
   * });
   * // above example shows how to use addMessages api to add HTTP message
   * // for the context app/primary_2
   *
   * @example <caption>Example for clearMessages api</caption>
   * const { clearMessages } = PCore.getMessageManager();
   * clearMessages({
   *    type: 'error',
   *    property: '.firstName',
   *    context: 'app/primary_2'
   * });
   * // above example shows how to use clearMessages api to clear messages of type error
   * // on firstName property
   *
   * @returns {object} the {@link module:MessageManager|Message Manager} API object
   * @function
   * @public
   */
  getMessageManager = () => {
    return MessageManager;
  };

  /**
   * This api provides Coexistence related api.
   * @example <caption>Example for getCoexistenceManager()</caption>
   * Example usage - PCore.getCoexistenceManager();
   *
   * @returns {object} the {@link CoexistenceManager} API object
   * @function
   * @private
   */
  getCoexistenceManager = () => CoexistenceManager;

  /**
   * Returns the value of prop from Redux Store. This is a syntactical sugar to StateManager.getValue()
   *
   * @param {string} propReference property reference e.g. .FirstName or pyWorkPage.FirstName
   * @param {string} pageReference page reference e.g. .pyWorkPage, D_Accounts.pxResults(1)
   * @param {string} context context of the property
   * @returns {*} returns -- value of the prop
   * @function
   *
   */
  getStoreValue = (propReference, pageReference, context) => {
    return StateManager.getValue(propReference, pageReference, context);
  };

  /**
   * Returns the Container Manager Utils
   * This exposes the container manager utility APIs like
   * <ul>
   * <li>getContainers</li>
   * <li>getContainerData</li>
   * <li>isContainerItemExists</li>
   * <li>getContainerItemName</li>
   * and others
   * </ul>
   *
   * @example <caption>Example for getContainerUtils()</caption>
   * Example usage - PCore.getContainerUtils()
   * // returns -- ContainerUtils Object which containers the utility APIs
   *
   * @example <caption>Example for getContainerUtils().getContainerItemName</caption>
   * Example usage - PCore.getContainerUtils().getContainerItemName('app/primary')
   * // returns -- container item name if container already exists in store
   *
   * @returns {object} the {@link module:ContainerUtils|Container Utils} object
   * @function
   */
  getContainerUtils = () => {
    return ContainerUtils;
  };

  /**
   *  Obtains an entry point to the {@link AnnotationUtils} class that is used to access utility APIs to handle the annotation to a property.
   *
   * @example <caption>Example for getAnnotationUtils()</caption>
   * Example usage - PCore.getAnnotationUtils()
   * // returns -- AnotationUtils class containing the utility APIs
   *
   * @example <caption>Example for getAnnotationUtils().isProperty()</caption>
   * Example usage - PCore.getAnnotationUtils().isProperty('@P .EmployeeName')
   * // returns -- true if the passed argumment is property otherwise it returns false
   *
   * @returns {object} the {@link AnnotationUtils} API object
   * @function
   */
  getAnnotationUtils = () => {
    return AnnotationUtils;
  };

  /**
   *  Obtains an entry point to the {@link FieldUtils} class that is used to access utility APIs to handle the field related operations.
   *
   * @example <caption>Example for getFieldUtils()</caption>
   * Example usage - PCore.getFieldUtils()
   * // returns -- FieldUtils class containing the utility APIs
   *
   * @example <caption>Example for getFieldUtils().formatPageReference()</caption>
   * Example usage - PCore.getFieldUtils().formatPageReference('.Questionsets[0].Questions')
   * // returns -- '.Questionsets(1).Questions'
   *
   * @returns {object} the {@link FieldUtils} API object
   * @function
   * @public
   */
  getFieldUtils = () => {
    return FieldUtils;
  };

  /**
   *  Obtains an entry point to the {@link FieldDefaultUtils} instance that is used to access APIs to handle the fields default related operations.
   *
   * @example <caption>Example for getFieldDefaultUtils()</caption>
   * Example usage - PCore.getFieldDefaultUtils()
   * // returns -- FieldDefaultUtils class instance containing the APIs
   *
   * @example <caption>Example for getFieldDefaultUtils().getDefaultsforType()</caption>
   * Example usage - PCore.getFieldDefaultUtils().getDefaultsforType("Email")
   *
   * @returns {object} the {@link FieldDefaultUtils} object
   * @function
   * @public
   */
  getFieldDefaultUtils = () => {
    return FieldDefaultUtils;
  };

  /**
   * Returns the Asset Loader Class
   * This exposes the Asset Loader utility APIs including:
   * <ul>
   * <li>getStaticServerUrl</li>
   * <li>getConstellationServiceUrl</li>
   * <li>initServer</li>
   * <li>register</li>
   * <li>getLoader</li>
   * <li>loadAssets</li>
   * </ul>
   *
   * @example <caption>Example for getAssetLoader()</caption>
   * Example usage - PCore.getAssetLoader()
   * // returns -- AssetLoader Object which containers the utility APIs
   *
   * @example <caption>Example for getAssetLoader().getLoader</caption>
   * Example usage - PCore.getAssetLoader().getLoader('font-loader')
   * // returns -- Font Loader Function to load font assets if font-loader is defined
   * // else returns default loader
   *
   *
   * @returns {object} the Asset Loader Object
   * @function
   */
  getAssetLoader = () => {
    return AssetLoader;
  };

  /**
   * Obtains an entry point to the {@link module:AttachmentUtils|AttachmentUtils} object that contains utility APIs to handle the attachments of a case.
   *
   * @example <caption>In this example, the getAttachmentUtils API is used to obtain the uploadAttachment API.</caption>
   * // To access uploadAttachment API
   * const { uploadAttachment } = PCore.getAttachmentUtils();
   * // returns -- An object of Attachment utility APIs
   *
   * @returns {object} An object of {@link module:AttachmentUtils|AttachmentUtils} APIs
   * @function
   */
  getAttachmentUtils = () => {
    return Attachment;
  };

  /**
   * Obtains an entry point to the {@link module:ViewRule|ViewRule} object that contains APIs to handle performing
   * CRUD operations to View Rules
   *
   * @example <caption>In this example, the getViewRuleApi is used to obtain the getViewRule API.</caption>
   * // To access getViewRule API
   * const { getViewRule } = PCore.getViewRuleApi();
   * // returns -- An object of ViewRule utility APIs
   *
   * In particular, the full list of utility APIs are:
   * <ul>
   * <li>createViewRule</li>
   * <li>getViewRule</li>
   * <li>updateViewRule</li>
   * <li>deleteViewRule</li>
   * </ul>
   *
   * @returns {object} An object of {@link module:ViewRule|ViewRule} APIs
   * @function
   * @private
   */
  getViewRuleApi = () => {
    return ViewRule;
  };

  /**
   * Obtains an entry point to the {@link FeedUtils} object that contains APIs to handle the feeds of a case.
   * @example <caption>In this example, the FeedApi is used to obtain the postMessage API.</caption>
   * // To access postMessage API
   * const feedUtils = PCore.getFeedUtils();
   * feedUtils.postMessage().then(()=>{
   *    // success case
   * }).catch(()=>{
   *    // error case
   * })
   *
   * @returns {object} An object of {@link FeedUtils} APIs
   * @function
   */
  getFeedUtils = () => FeedUtils;

  /**
   * Obtains an entry point to the {@link module:TagUtils|TagUtils} object that contains APIs to handle the tags of a case.
   *
   * @example <caption>In this example, the API returns the tagUtils object containing the APIs that handle the tags of a case.</caption>
   * const { getTaggedCases, getTags, postTags, removeTag , getTagsLandingPageURL } = PCore.getTagUtils();
   *
   * @returns {object} This API returns the {@link module:TagUtils|TagUtils} object.
   * @function
   */
  getTagUtils = () => Tags;

  /**
   * Obtains an entry point to the {@link module:StakeholderUtils|StakeholderUtils} object that contains APIs to handle the participants of a case.
   *
   * @example <caption>In this example, the API returns the StakeholderUtils object containing the APIs that handle the participants of a case.</caption>
   * const { getParticipants, getRoleView, getParticipantRoles, getParticipant, createParticipant, updateParticipant, deleteParticipant } = PCore.getStakeholderUtils();
   *
   * @returns {object} This API returns the {@link module:StakeholderUtils|StakeholderUtils} object.
   * @function
   */
  getStakeholderUtils = () => Stakeholders;

  /**
   * Obtains an entry point to the {@link module:UserApi|UserApi} object that contains APIs to handle the user data.
   *
   * @example <caption>In this example, the getUserApi API is used to obtain the getOperatorDetails API.</caption>
   * // To access Users API
   * const { getOperatorDetails } = PCore.getUserApi();
   * // returns -- An object of User APIs
   *
   * @returns {object} An object of {@link module:UserApi|UserApi} APIs
   * @function
   */
  getUserApi = () => {
    return UserApi;
  };

  /**
   * Obtains an entry point to the {@link module:CaseFollowerApi|CaseFollowerApi} object that contains APIs to handle the followers of a case.
   *
   * @example <caption>In this example, the getCaseFollowerApi API is used to obtain the addCaseFollower API.</caption>
   * // To access Followers API
   * const { addCaseFollower } = PCore.getCaseFollowerApi();
   * // returns -- An object of Follower APIs
   *
   * @returns {object} An object of {@link module:CaseFollowerApi|CaseFollowerApi} APIs
   * @function
   */
  getCaseFollowerApi = () => {
    return FollowerApi;
  };

  /**
   * Obtains an entry point to the {@link CaseUtils} object that contains utility APIs for the Case.
   *
   * @example <caption>In this example, the getCaseUtils API is used to obtain the isCaseActive API.</caption>
   * const CaseUtils = PCore.getCaseUtils();
   *
   * @returns {object} An object of {@link CaseUtils} APIs
   * @function
   */
  getCaseUtils = () => {
    return CaseUtils;
  };

  /**
   * Obtains an entry point to the {@link StateUtils} object that contains utility APIs for the Redux State.
   *
   * @example <caption>In this example, the getStateUtils API is used to obtain API's like getSharedState, setSharedState.</caption>
   * const StateUtils = PCore.getStateUtils();
   *
   * @returns {object} An object of {@link StateUtils} APIs
   * @function
   */
  getStateUtils = () => {
    return StateUtils;
  };

  /**
   * This API provides an entry point to the RelatedCasesApi object that contains APIs to handle the related cases of a case.
   * To view the APIs in the RelatedCasesApi module, see {@link module:RelatedCasesApi|RelatedCasesApi}.
   *
   * @example <caption>In this example, the API returns the RelatedCasesApi object containing the APIs that handle the related cases of a case.</caption>
   * PCore.getRelatedCasesApi();
   *
   * @returns {object} This API returns the {@link module:RelatedCasesApi|RelatedCasesApi} object.
   * @function
   */
  getRelatedCasesApi = () => {
    return RelatedCasesApi;
  };

  /**
   * This API provides an entry point to the {@link module:PersonalizationUtils|PersonalizationUtils} object that contains utility APIs
   * to manage the personalization instances of a list component.
   * To view the APIs in the {@link module:PersonalizationUtils|PersonalizationUtils} module,
   * see {@link module:PersonalizationUtils|PersonalizationUtils} Module.
   *
   * @param {string} listId - A unique ID referencing a list component. The length of the ID should be limited to 32 characters.
   *
   * @example <caption>In this example, the API obtains the PersonalizationUtils object for the list whose ID is 443533r555.</caption>
   * const listId = "443533r555";
   * PCore.getPersonalizationUtils(listId);
   *
   * @returns {object} The {@link module:PersonalizationUtils|PersonalizationUtils} object
   * @function
   */
  getPersonalizationUtils = getPersonalizationUtils;

  /**
   * This API obtains the metadata associated with the datasource contained in the config object
   *
   * @example <caption>Example for getDataApi()</caption>
   * Example usage - PCore.getDataApi().init(dataConfig);
   * // the API obtains the metadata associated with the data source contained in the dataConfig object.
   * @function
   */
  getDataApi = () => {
    return DataApi;
  };

  /**
   * This API provides an entry point to the {@link module:DataApiUtils|DataApiUtils} object that contains utility APIs to retrieve information from data views.
   * To view the APIs in the {@link module:DataApiUtils|DataApiUtils} module, see {@link module:DataApiUtils|DataApiUtils} Module.
   *
   * @example <caption>In this example, the API obtains the entry point to the DataApiUtils object.</caption>
   * PCore.getDataApiUtils();
   *
   * @returns {object} The {@link module:DataApiUtils|DataApiUtils} object
   * @function
   */
  getDataApiUtils = () => {
    return DataApiUtils;
  };

  /**
   * Returns an object of Analytics utils like:
   * <ul>
   * <li>getDataObjects</li>
   * <li>getDefaultColumns</li>
   * <li>getInsightIDs</li>
   * <li>getInsightByID</li>
   * <li>createInsight</li>
   * <li>exportToExcel</li>
   * <li>translateStrings</li>
   * </ul>
   *
   * All APIs return a <code>Promise</code>.
   *
   * @example <caption>Examples for getAnalyticsUtils()</caption>
   * // To retrieve a list of all insights
   * PCore.getAnalyticsUtils().getInsightIDs().then(response => { ... }).catch(() => { ... });
   *
   * // To create an insight
   * const insightMetadata = { ... };
   * PCore.getAnalyticsUtils().createInsight(insightMetadata).then(response => { ... }).catch(() => { ... });
   *
   * @returns {object} An object of {@link module:AnalyticsUtils|Analytic Utility} APIs
   * @function
   */
  getAnalyticsUtils = () => {
    return AnalyticsUtils;
  };

  /**
   * Returns an instance of the LocaleUtils class.
   * @example <caption>PCore.getLocaleUtils()</caption>
   * //Returns the instance of the localeUtils with the following API's on it.
   * <ul>
   *    <li>setLocaleForRule</li>
   *    <li>getLocaleForRule</li>
   *    <li>resetLocaleStore</li>
   *    <li>getLocaleValue</li>
   *    <li>setTimezone</li>
   *    <li>getTimeZoneInUse</li>
   * </ul>
   * @function
   * @returns {object} the {@link localeUtils} Object
   */
  getLocaleUtils = () => {
    return localeUtils;
  };

  /**
   * Registers the custom LocaleUtils APIs overriding the existing ones.
   * @example <caption>PCore.getLocaleUtils().registerLocaleManager(customLocaleUtilApis)</caption>
   * customLocaleUtilApis - {
   *    "setLocaleForRule" : function(){ //custom implementation},
   *    "getLocaleForRule" : function(){ //custom implementation},
   *    "resetLocaleStore" : function(){ //custom implementation},
   *    "getLocaleValue"   : function(){ //custom implementation},
   *    "setTimezone"      : function(){ //custom implementation},
   *    "getTimeZoneInUse" : function(){ //custom implementation}
   * }
   * @function
   * @param   {object} customLocaleUtilApis An object with the custom implementation if the LocaleUtils API's
   * @returns {void}
   */
  registerLocaleManager = (customLocaleUtilApis) => {
    const existingLocaleUtilApis = this.getLocaleUtils();
    Object.keys(customLocaleUtilApis).forEach((customLocaleUtilsApiKey) => {
      // override existing apis with custom apis
      existingLocaleUtilApis[customLocaleUtilsApiKey] = customLocaleUtilApis[customLocaleUtilsApiKey];
    });
  };

  /**
   * Access for a runtime environment to set some flags to override some
   * default behaviors. Note that this action <strong>replaces</strong>
   * any previous overrides. To add to the existing overrides, use
   * <strong>setBehaviorOverride</strong>
   * @param {object} overridesObj <p>The JSON object containing any behavior override flags</p>
   * <p>Supported override flag:</p>
   * <p><strong>dynamicLoadComponents</strong> - when false, do not attempt to load components dynamically</p>
   * @example PCore.setBehaviorOverrides( { "dynamicLoadComponents": false } );
   * @function
   */
  setBehaviorOverrides = (overridesObj) => {
    PCore.behaviorOverrides = overridesObj;
  };

  /**
   * Access for a runtime environment to set/update a flag to override some
   * default behaviors. Note that this action <strong>adds or updates</strong>
   * the override key value. Other keys/values are left intact.
   * To <strong>replace</strong> the existing overrides, use
   * <strong>setBehaviorOverrides</strong>
   * @param {string} overrideKey <p>The key value for the behavior override flag. (Ex: "dynamicLoadComponents")</p>
   * @param {any} overrideValue <p> the desired value of the override. (Ex: true, false)</p>
   * <p>Supported override flags:</p>
   * <p><strong>dynamicLoadComponents</strong> - when false, do not attempt to load components dynamically</p>
   * <p><strong>dynamicSemanticUrl</strong> - when false, do not attempt to update the app's semantic URL dynamically</p>
   *  <p><strong>dynamicSetCookie</strong> - when false, do not attempt to set the app's C11n cookie dynamically</p>
   *
   * @example PCore.setBehaviorOverride( { "dynamicLoadComponents": true } );
   * @function
   */
  setBehaviorOverride = (overrideKey, overrideValue) => {
    PCore.behaviorOverrides[overrideKey] = overrideValue;
  };

  /**
   * Returns the current JSON object of behavior overrides.
   * @example PCore.getBehaviorOverrides() could return { "dynamicLoadComponents": false }
   * @returns {object} The current JSON object of behavior overrides.
   * @function
   */
  getBehaviorOverrides = () => {
    return PCore.behaviorOverrides;
  };

  /**
   * Returns the current value of the requested behavior override flag.
   * If the requested flag has not been sent, this returns undefined.
   * @param {string} theOverride The requested override flag. Ex: <strong>dynamicLoadComponents</strong>
   * @example PCore.getBehaviorOverride("dynamicLoadComponents") could return false
   * @function
   */
  getBehaviorOverride = (theOverride) => {
    return PCore.behaviorOverrides[theOverride];
  };

  /**
   * This API obtains an entry point to the AsynchronousUtils object that contains utility APIs that perform asynchronous operations using Observable patterns.
   * To view the APIs in the AsynchronousUtils class, see {@link AsynchronousUtils} Class.
   * @example <caption>In this example, the API returns the AsynchronousUtils object.</caption>
   * const asyncUtils = PCore.getAsynchronousUtils();
   * @function
   */
  getAsynchronousUtils = () => {
    return AsynchronousUtils;
  };

  /**
   * Creates a <strong>PConnect</strong> object from input component configuration.
   * The PConnect object represents a newly created component context for the given input configuration
   * and has access to all of the PConnect Public APIs.
   *
   * @example <caption>Example usage of createPConnect </caption>
   * Example:
   * const config = {
   *  "meta": {
   *     "type": "Button",
   *     "config": {
   *        label: "@P .Submit"
   *     }
   *   }
   * }
   *
   * const ButtonComponentPConnect = createPConnect(config);
   * <strong>ButtonComponentPConnect<strong> is a PConnect object created for the config (input parameter).
   *
   * @param {object} config payload to create a PConnect Object
   * @returns {object} The PConnect object created from the config data passed in as paramter
   * @public
   * @function
   */
  createPConnect = (config) => {
    return createC11nEnv(config);
  };

  /**
   * This API provides an entry point to the PubSubUtils object that is used to access the
   * utility APIs in the Constellation Core that publish and subscribe events
   * This exposes the Event PubSub UtilsAPIs like
   * <ul>
   * <li>subscribe</li>
   * <li>publish</li>
   * </ul>
   *
   * @example <caption>Example for getPubSubUtils()</caption>
   * Example usage - PCore.getPubSubUtils();
   * // returns the PubSubUtils object containing the utility APIs that publish and subscribe events
   * @function
   * @public
   */
  getPubSubUtils = () => {
    return PubSubUtils;
  };

  /**
   * Call registerComponentCreator with component creator function, such that it will be registered and receives the C11nEnv object.
   *
   * @param {Function} creator function which is called to register a component creator.
   * This function will receive the C11nEnv as first argument
   * and if there are any additionalProps object as second argument.
   *
   * @example <caption>Example for registerComponentCreator()</caption>
   * Example Usage:
   * PCore.registerComponentCreator((c11nEnv, additionalProps = {}) => {
   *   return React.createElement(PConnectHOC(), {
   *  ...c11nEnv,
   *  ...c11nEnv.getPConnect().getConfigProps(),
   *  ...c11nEnv.getPConnect().getActions(),
   *  ...{ additionalProps }
   * });
   *
   * All the components, which render will be using this registered component create function to create the component instance
   * Note: Here the usage shows React.createElement which indicates, the components are created using React.
   * @function
   * @public
   */

  registerComponentCreator = (creator) => {
    registerComponentCreator(creator);
  };

  /**
   * Call getConstants function to get the public constants
   * which are supposed to be used at appropriate places.
   *
   * @example <caption> Example for getConstants() </caption>
   * Example Usage:
   * const constants = PCore.getConstants();
   *
   * constants will have un-modifiable constants object which you can use at places Infra expects.
   * for example: you have to use constants.MESSAGES.MESSAGES_TYPE_ERROR if you want to add or delete error messages in the application state.
   *
   * @function
   * @public
   */
  getConstants = () => {
    return Object.freeze(publicConstants);
  };

  /**
   * Call getEvents function to get all the case related events
   * which are supposed to be used to subscribe using getPubSubUtils.
   * This exposes Events like:
   * <ul>
   * <li>getCaseEvents</li>
   * </ul>
   *
   * @example <caption> Example for getEvents() </caption>
   * Example Usage:
   * const CaseEvent = PCore.getEvents().getCaseEvent();
   *
   * @function
   * @public
   */

  getEvents = () => {
    return Events;
  };

  /**
   * This API provides an entry point to the {@link module:RestClient|REST Client} API object.
   * This exposes APIs that include:
   * <ul>
   *  <li>invokeRestApi</li>
   *  <li>getCancelTokenSource</li>
   *  <li>isRequestCanceled</li>
   * </ul>
   *
   * @example <caption>Example for invokeRestApi api</caption>
   * const { invokeRestApi } = PCore.getRestClient();
   * const cancelTokenSource = getCancelTokenSource();
   * invokeRestApi('getFeedMessages', {
   *    queryPayload: {
   *      filterForContext: 'DATA-PORTAL $SpaceTra',
   *      filterByContext: 'context'
   *    },
   *    body: {},
   *    headers: {},
   *    // passing cancel token so that we can cancel the request using cancelTokenSource
   *    cancelTokenSource: cancelTokenSource.token
   * })
   * .then(() => {
   *    // handle the response
   * })
   * .catch((error) => {
   *    // handle error
   *    if(isRequestCanceled(error)) {
   *       // handle the canceled request using cancelTokenSource.cancel();
   *   }
   * });
   * // above example shows how to use invokeRestApi api to make REST API call to get Feed messages.
   *
   * @example <caption>Example for getCancelTokenSource api</caption>
   * const { getCancelTokenSource } = PCore.getRestClient();
   * const cancelTokenSource = getCancelTokenSource();
   * // cancel the ongoing request using the cancelTokenSource
   * cancelTokenSource.cancel();
   * // above example shows how to use getCancelTokenSource api to get the cancel token source using which we can cancel the ongoing request.
   *
   * @example <caption>Example for isRequestCanceled api</caption>
   * const { isRequestCanceled } = PCore.getRestClient();
   * if(isRequestCanceled(error)) {
   *    // handle the canceled request using cancelTokenSource.cancel();
   * }
   * // above example shows how to use isRequestCanceled api to know if the request is canceled using cancel token source.
   *
   *
   * @returns {object} the {@link module:RestClient|REST Client} API object
   * @function
   * @public
   */
  getRestClient = () => {
    return RestClient;
  };

  /**
   * This api provides api to mashup cases and views.
   * @example <caption>Example for getMashupApi()</caption>
   * Example usage - PCore.getMashupApi();
   * // returns the MashupApi object containing the utility APIs to work with cases and pages
   *
   * @returns {object} the {@link MashupApi} API object
   * @function
   * @public
   */
  getMashupApi = () => {
    return MashupApi;
  };

  /**
   * Call getEnvironmentInfo function to get the Environment Information
   * such as Locale, Operator info, Application info.
   *
   * @example <caption>Example for getEnvironmentInfo</caption>
   * Example Usage:
   * const envInfo = PCore.getEnvironmentInfo();
   * // to get application name
   * const appName = envInfo.getApplicationName();
   *
   * @function
   * @public
   * @returns {object} the {@link EnvironmentInfo} API object

   */
  // This is a stub for getEnvironmentInfo function
  getEnvironmentInfo = () => {
    return EnvironmentInfo;
  };

  /**
   * Call getRuntimeParamsAPI to get RuntimeParamsAPI
   * which is used to set parameters object while authoring and to be made available in runtime
   *
   * @example <caption> Example for getRuntimeParamsAPI </caption>
   * Example Usage:
   * const runtimeParamsAPI = PCore.getRuntimeParamsAPI();
   * // to set runtimeParams
   * runtimeParamsAPI.setRuntimeParams({});
   *
   * @function
   * @public
   * @returns {object} the {@link RuntimeParamsAPI} API object
   */

  getRuntimeParamsAPI = () => {
    return RuntimeParamsAPI;
  };

  /**
   * This api provides utilities to build semantic URLs.
   * @example <caption>Example for getSemanticUrlUtils()</caption>
   * // this example will return the SemanticUrlUtils API object
   * const semanticUrlUtils = PCore.getSemanticUrlUtils();
   *
   * @returns {object} the {@link module:SemanticUrlUtils|SemanticUrlUtils} API object
   * @function
   * @public
   */
  getSemanticUrlUtils = () => SemanticUrlUtils;

  /**
   * This api provides remote case utils.
   * @example <caption>Example for getRemoteCaseUtils()</caption>
   * Example usage - PCore.getRemoteCaseUtils();
   *
   * @returns {object} the {@link RemoteCase} API object
   * @function
   * @private
   */
  getRemoteCaseUtils = () => RemoteCase;

  /**
   * This api provides NavigationUtils
   * @example <caption>Example for getNavigationUtils()</caption>
   * Example usage - PCore.getNavigationUtils();
   * @returns {object} the {@link NavigationUtils} API object
   * @function
   * @public
   */
  getNavigationUtils = () => NavigationUtils;

  /**
   * This api provides registering module on demand.
   * @example <caption>Example for registerModule()</caption>
   * Example usage - PCore.registerModule("getFollowersApi", {
   *   getFollowers: () => {}
   * });
   *
   * @param {string} moduleName Name of the module to be exposed
   * eq., getFollowersApi()
   * @param {object} module module object to be returned
   * @function
   * @private
   */
  registerModule = (moduleName, module) => ModuleRegistry.registerModule(moduleName, module, this);

  /**
   * This api provides Error Handling
   * @example <caption>Example for getErrorHandler()</caption>
   * Example usage - PCore.getErrorHandler().setGenericFailedMessage('Failed to load preview');
   * Example usage - PCore.getErrorHandler().getGenericFailedMessage();
   * @returns {object} the {@link ErrorHandler} API object
   * @function
   * @public
   */
  getErrorHandler = () => ErrorHandler;

  /**
   * Obtains an entry point to the {@link FormUtils} object that contains APIs that handle form related cases.
   * @example <caption>In this example, the getFormUtils is used to obtain the getChanges API.</caption>
   * // To access getChanges API
   * const formUtils = PCore.getFormUtils();
   * const changes = formUtils.getChanges('app/primary_1');
   * @returns {object} the {@link FormUtils} API object
   * @function
   * @public
   */
  getFormUtils = () => FormUtils;

  /**
   * This api provides messaging service (web sockets) related APIs
   * @example <caption>Example getMessagingServiceManager()</caption>
   * Example usage - PCore.getMessagingServiceManager().subscribe({matcher: "interaction"}, message => {
   *  // Do process message here
   * }));
   * PCore.getMessagingServiceManager().unsubscribe(subId);
   * @returns {object} the {@link MessagingServiceManager} API object
   * @function
   * @public
   */
  getMessagingServiceManager = () => MessagingServiceManager;

  /**
   * This api provides metadata access like views, data-pages, fields etc.,
   * @example <caption>Example getMetadataUtils()</caption>
   * Example usage - PCore.getMetadataUtils().getDatapageMetadata("D_TestPage")
   * @returns {object} the {@link RuleStore} API object
   * @function
   * @private
   */
  getMetadataUtils = () => RuleStore;

  /**
   * This API contains utility methods to retrieve data from data pages.
   * @example <caption>Example getDataPageUtils()</caption>
   * Example usage - PCore.getDataPageUtils()
   * @returns {object} the {@link DataStore} API object
   * @function
   * @public
   */
  getDataPageUtils = () => DataStore;

  /**
   * This API contains utility methods to retrieve information about data types.
   * @example <caption>Example getDataTypeUtils()</caption>
   * Example usage - PCore.getDataTypeUtils().getSavableDataPage();
   * @returns {object} the {@link DataTypeUtils} API object
   * @function
   * @public
   */
  getDataTypeUtils = () => DataTypeUtils;

  /**
   * This api is to register Datapage parameters for callback subscription
   * @example <caption>Example getCascadeManager()</caption>
   * Example usage - PCore.getCascadeManager()
   * @returns {object} the {@link CascadeManager} API object
   * @function
   * @public
   */
  getCascadeManager = () => CascadeManager;

  /**
   * Determines if the values of two objects are the same by performing a deep comparison.
   * @example <caption>In this example isDeepEqual is used to compare 2 objects</caption>
   * Example usage - PCore.isDeepEqual({'a': '123'}, {'a': '123'});
   * @param {object} oldValue The value of the first object.
   * @param {object} newValue The value of the second object.
   * @returns {boolean} returns true if both object are same in terms to value else return false
   * @function
   */
  isDeepEqual = (oldValue, newValue) => _isEqual(oldValue, newValue);

  /**
   * This API provides an entry point to the {@link module:AuthUtils|AuthUtils} API object that contains utility APIs to
   * to handle authentication tokens utilized for REST API calls.
   * <ul>
   * <li>setTokens</li>
   * </ul>
   *
   * @example <caption>Example for getAuthUtils()</caption>
   * Example usage - PCore.getAuthUtils().setTokens(tokenObj)
   * Example usage - PCore.getAuthUtils().revokeTokens().then()
   * Example usage - PCore.getAuthUtils().getAuthInstance(authConfig)
   *
   * @returns {object} the {@link module:AuthUtils|AuthUtils} Object
   * @function
   * @public
   */
  getAuthUtils = () => {
    return AuthUtils;
  };

  /**
   * This API provides an entry point to the {@link module:Debugger} API object that contains utility APIs to
   * to enable Xray.
   * <ul>
   * <li>enableXRay</li>
   * </ul>
   *
   * @example <caption>Example for getDebugger()</caption>
   * Example usage - PCore.getDebugger().enableXRay()
   *
   * @returns {object} the {@link module:Debugger} Object
   * @function
   * @private
   */

  getDebugger = () => Debugger;

  /**
   * This API provides an entry point to the {@link module:DeferLoadManager} API object that exposes methods to
   * manager defer loaded components
   * <ul>
   * <li>start</li>
   * <li>stop</li>
   * </ul>
   *
   * @example <caption>Example for getDeferLoadManager()</caption>
   * Example usage - PCore.getDeferLoadManager().start(viewName, caseKey, pageReference, contextName, uniqueId)
   * Example usage - PCore.getDeferLoadManager().stop(uniqueId, contextName)
   *
   * @returns {object} the {@link module:DeferLoadManager} Object
   * @function
   * @private
   */
  getDeferLoadManager = () => DeferLoadManager;

  /**
   * Obtains an entry point to the {@link module:ExpressionEngine|ExpressionEngine} object that contains API to evaluate expression on given data
   *
   * @example <caption>Example for getExpressionEngine</caption>
   * Example Usage:
   * const expressionEngine = PCore.getExpressionEngine();
   * // to evaluate an expression on localData
   * const result = expressionEngine.evaluate();
   *
   * @function
   * @public
   * @returns {object} the {@link module:ExpressionEngine|ExpressionEngine} API object
   */
  getExpressionEngine = () => ExpressionEngine;

  /**
   * Obtains an entry point to the ActionsSequencer object that contains APIs to sequence  different type of actions in the Constellation Infrastructure.
   * To view the APIs in the ActionsSequencer class, see {@link ActionsSequencer|APIs in the ActionsSequencer class}
   *
   * @example <caption>In this example , the API returns the ActionsSequencer object containing the utility APIs</caption>
   * PCore.getActionsSequencer();
   *
   * @returns {object} The ActionsSequencer Object
   * @function
   * @public
   */

  getActionsSequencer = () => ActionsSequencer;

  /**
   * This API create unique id and registers given property in passed context
   * @example <caption>Example for RefreshManager</caption>
   * const callback =  refreshCaseView.bind(params);
   * PCore.getRefreshManager().registerForRefresh('PROP_CHANGE',callback,'caseInfo.content.Name','app/modal_1/caseInfo.content','app/modal_1');
   *
   * options parameter is optional
   * @returns {object} return the RefreshManager instance
   * @private
   */
  getRefreshManager = () => RefreshManager;

  getInitialiser = () => Initialiser;

  getBootstrapUtils = () => BootstrapUtils;
  /**
   * Obtains an entry point to the ContextTreeManager object which provides apis to register and handle mutations confined to a view and its children.
   * @example <caption>Example for getContextTreeManager</caption>
   * PCore.getContextTreeManager().onViewMutate(
   *    tab.getPConnect().getContextName(),
   *     tab.getPConnect().getPageReference(),
   *     tab.getPConnect()._rawConfig.config?.name,
   *    (errors) => {
   * setTabErrors((tabErrors) => {
   * const errors = [...tabErrors];
   * ...
   * }
   * @returns {object} return the ContextTreeManager instance
   * @public
   */
  getContextTreeManager = () => ContextTreeManager;
}

export default PCore;