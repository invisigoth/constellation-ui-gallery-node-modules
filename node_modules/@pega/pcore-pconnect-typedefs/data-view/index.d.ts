declare class DataApi {
    constructor();
    static _searchResultsCache: {};
    static init(config: any, context?: string): Promise<unknown>;
    static clearContextedCache(context: any): void;
    static initializeCache(context: any, config: any, uniqueDataApiKey: any, dataApiObj: any): void;
    fetchMetaData(context: any): any;
    getData(searchText: any): Promise<any>;
    memoizedGetData(searchText: any): any;
    fetchData(searchText: any, isPaginated: any): any;
    fetchPaginatedData(searchText: any): any;
    fetchNonQueryableResults(searchText: any): Promise<unknown>;
    filterNonQueryableData(searchText: any): any;
    positionMatches(text: any, searchText: any): any;
    buildSelect(): any[];
    buildFilters(searchText: any): {};
    buildQuery(searchText: any): {
        select: any[];
        distinctResultsOnly: string;
        filter?: undefined;
    } | {
        select: any[];
        filter: {};
        distinctResultsOnly: string;
    };
    buildPageOptions(): {
        pageNumber: any;
        pageSize: any;
        maxResultsToFetch?: undefined;
    } | {
        maxResultsToFetch: any;
        pageNumber?: undefined;
        pageSize?: undefined;
    };
    buildSchemaForQueryableDP(searchText: any): {
        dataViewParameters: any;
        query: {
            select: any[];
            distinctResultsOnly: string;
            filter?: undefined;
        } | {
            select: any[];
            filter: {};
            distinctResultsOnly: string;
        };
        paging: {
            pageNumber: any;
            pageSize: any;
            maxResultsToFetch?: undefined;
        } | {
            maxResultsToFetch: any;
            pageNumber?: undefined;
            pageSize?: undefined;
        };
    };
    buildSchemaForNonQueryableDP(): {
        dataViewParameters: any;
    };
    isValidDatasource(): boolean;
}
export default DataApi;
