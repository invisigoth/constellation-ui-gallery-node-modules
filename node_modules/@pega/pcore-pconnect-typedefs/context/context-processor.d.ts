import { C11nEnv } from '../interpreter/c11n-env';
/**
 * This handles all rule resolution or fetching the right rule
 * for rendering.
 * It also contains the logic to maintain the context (stepPage)
 * so that components can render without much effort.
 */
declare class ContextProcessor {
    /**
     * Merges the data with existing data and also
     * updates the redux store.
     * @param {*} data target data object
     */
    static updateData(data: any): void;
    /**
     * Updates the context data with incoming contextdata
     * @param {*} ctxData contextdata
     */
    static updateContextData(ctxData: any): void;
    /**
     * Resolves the when from the contextdata and
     * returns the when result- true or false.
     * @param {*} whenName name of the when-rule
     * @param {object} c11nEnv constellation env
     */
    static resolveWhen(whenName: string, c11nEnv: C11nEnv): boolean;
    /**
     * Returns the localized value for the given field value.
     * @param {*} fieldValue field value
     * @param {object} c11nEnv constellation env
     */
    static resolveFieldValue(fieldValue: string, c11nEnv: C11nEnv): string;
    /**
     * Resolves the navigations from contextdata and returns the
     * UIMetadata of the navigation.
     * @param {*} ref navigation name or property reference.
     * @param {object} c11nEnv constellation env
     */
    static resolveNavigation(ref: string, c11nEnv: C11nEnv): any;
    /**
     * Resolves the navigations from contextdata and returns the
     * UIMetadata of the navigation.
     * @param {*} ref navigation name or property reference.
     * @param {object} c11nEnv constellation env
     * @param {string} classID case type class name
     */
    static resolveView(ref: string, c11nEnv: C11nEnv, classID?: string): any;
    /**
     * Special handling to support parameter holding the
     * rule name.
     * @param {*} name name of the param
     * @param {object} c11nEnv constellation env
     */
    static resolveName(name: string, c11nEnv: C11nEnv): any;
    /**
     * Prepares full reference for current context.
     * If currentReference is "pyWorkpage" & newReference is ".Page1", output => pyWorkpage.Page1
     * If currentReference is "pyWorkpage" & newReference is "Page1", output => Page1
     * @param {*} currentReference base reference
     * @param {*} newReference new reference to build
     */
    static getContextPath(currentReference: string, newReference: string): string;
    /**
     * If component's config has reference (like Section, Harness, flowAction),
     * it would be resolved from that particulat store and returns metadata of that entry.
     * @param {*} component - metadata of component
     * Sample component config {"type":"reference","config":{"type":"section","ref":"MainSec"}}
     * @param {object} c11nEnv Constellation env
     */
    static resolveReference(component: any, c11nEnv: C11nEnv): any;
    /**
     * Tokenises and resolves property.
     * @param {string} pageReference context path
     * @param {string} propReference property reference eq., .FirstName or pyWorkPage.FirstName
     * @param {string}  context context name
     */
    static resolvePropertyReference(pageReference: string, propReference: string, context: string): any;
    /**
     * Returns the property object or string depends on the
     * property.
     * example:
     * PageList: D_Genders.pxResults, will return list object
     * Page: pyWorkPage, will return workpage object.
     * Property: pyWorkPage.FirstName. will return string value.
     * @param {*} propName property reference.
     * @param {string} pageReference pageReference path
     * @param {string} context context name
     */
    static getProperty(propName: string, pageReference: string, context: string): any;
    /**
     * Returns the string value of the property.
     * @param {*} prop property reference
     * @param {*} pageReference pageReference
     * @param {string} context context name
     */
    static getProperyValue(prop: string, pageReference: string, context: string): any;
    static _handlePropString(config: any, key: string, value: string, c11nEnv: C11nEnv): void;
    static _resolveProps(config: any, c11nEnv: C11nEnv): void;
    /**
     * resolveProps to resolve all properties in action config
     * @param {*} config config object to resolve properties
     * @param {*} newConfig target object
     * @param {object} c11nEnv constellation env
     * @returns {object} returns the newConfig
     */
    static resolveProps(config: any, newConfig: any, c11nEnv: C11nEnv): any;
    /**
     *
     * Resolve classID for provided property
     * @param {string} prop - property name like .FirstName or .Student.FirstName
     * @param {string} pageReference - property reference like caseInfo.Content
     * @param {string} context - context info like app/primary/workarea_2
     * @example caseInfo: {
     *  content: {
     *    P1: {
     *        classID: 'Data-P1',
     *        P2: {
     *          classID: 'Data-P2',
     *          t1: 'constellation'
     *        }
     *     }
     *  }
     * }
     * tests: .P1 --> Data-P1
     * test2: .P1.P2 --> Data-P2
     * test3: .P1.P2.t1 --> Data-P2
     * caseInfo.content.EmbedPage
     */
    static resolveClassID(prop: string, pageReference: string, context: string): any;
}
export default ContextProcessor;
