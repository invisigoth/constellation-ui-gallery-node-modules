import { CookieComplianceMethod, EnvironmentInfoObj } from './types';
/**
 * Provides APIs to access state-full properties like properties from pxRequestor, OperatorID and Application pages
 */
declare class EnvironmentInfo {
    environmentInfoObject: EnvironmentInfoObj | null;
    readonly isPortalLoaded: boolean;
    pageName: string | null;
    KeyMapping: any;
    isAssignmentHeaderHidden: boolean;
    coexistenceMeta: {
        appType: string;
        isCoexistence: boolean;
    };
    brandingInfo: any;
    themeOverrides: any;
    locale?: string;
    private cookieComplianceMethod;
    constructor();
    setEnvironmentInfo(environmentInfoObject: EnvironmentInfoObj): void;
    /**
     * Returns operator user name
     *
     * @example <caption>PCore.getEnvironmentInfo().getOperatorName()</caption>
     * const operatorName = PCore.getEnvironmentInfo().getOperatorName();
     *
     * @returns {string} user name
     */
    getOperatorName(): string;
    /**
     * Returns operator work group
     *
     * @example <caption>PCore.getEnvironmentInfo().getOperatorWorkGroup()</caption>
     * const operatorWorkGroup = PCore.getEnvironmentInfo().getOperatorWorkGroup();
     *
     * @returns {string} work group name
     */
    getOperatorWorkGroup(): string;
    /**
     * Returns operator identifier
     *
     * @example <caption>PCore.getEnvironmentInfo().getOperatorIdentifier()</caption>
     * const operatorIdentifier = PCore.getEnvironmentInfo().getOperatorIdentifier();
     *
     * @returns {string} identifier
     */
    getOperatorIdentifier(): string;
    /**
     * Returns operator image insKey
     *
     * @example <caption>PCore.getEnvironmentInfo().getOperatorImageInsKey()</caption>
     * const operatorImgInsKey = PCore.getEnvironmentInfo().getOperatorImageInsKey();
     *
     * @returns {string} image insKey
     */
    getOperatorImageInsKey(): string;
    /**
     * Returns application label
     *
     * @example <caption>PCore.getEnvironmentInfo().getApplicationLabel()</caption>
     * const applicationLabel = PCore.getEnvironmentInfo().getApplicationLabel();
     *
     * @returns {string} application label
     */
    getApplicationLabel(): string;
    getPortalName(): string;
    /**
     * Returns application name
     *
     * @example <caption>PCore.getEnvironmentInfo().getApplicationName()</caption>
     * const applicationLabel = PCore.getEnvironmentInfo().getApplicationName();
     *
     * @returns {string} application name
     */
    getApplicationName(): string;
    /**
     * Returns useLocale defined
     *
     * @example <caption>PCore.getEnvironmentInfo().getUseLocale()</caption>
     * const useLocale = PCore.getEnvironmentInfo().getUseLocale();
     *
     * @returns {string} useLocale
     */
    getUseLocale(): string;
    /**
     * Return Access group
     *
     * @example <caption>PCore.getEnvironmentInfo().getAccessGroup()</caption>
     * const accessGroup = PCore.getEnvironmentInfo().getAccessGroup();
     */
    getAccessGroup(): string;
    /**
     * Returns timeZone defined
     *
     * @example <caption>PCore.getEnvironmentInfo().getTimeZone()</caption>
     * const timeZone = PCore.getEnvironmentInfo().getTimeZone();
     *
     * @returns {string} timezone
     */
    getTimeZone(): string;
    /**
     * Returns theme overrides defined
     *
     * @example <caption>PCore.getEnvironmentInfo().getTheme()</caption>
     * const theme = PCore.getEnvironmentInfo().getTheme();
     *
     * @returns {object} theme
     */
    getTheme(): any;
    /**
     * updates theme overrides defined
     * @param {object} theme - object with overrides to the theme defenition
     * @example <caption>PCore.getEnvironmentInfo().setTheme(theme)</caption>
     * PCore.getEnvironmentInfo().setTheme(theme);
     * @returns {undefined}
     */
    setTheme(theme: any): any;
    /**
     * Returns theme branding info defined
     *
     * @example <caption>PCore.getEnvironmentInfo().getBrandingInfo()</caption>
     * const theme = PCore.getEnvironmentInfo().getBrandingInfo();
     *
     * @returns {object} theme branding info
     * @private
     */
    getBrandingInfo(): any;
    /**
     * updates theme branding info defined
     * @param {object} brandingInfo - object with overrides to the theme branding info
     * @example <caption>PCore.getEnvironmentInfo().setBrandingInfo(brandingInfo)</caption>
     * PCore.getEnvironmentInfo().setBrandingInfo(brandingInfo);
     * @returns {undefined}
     * @private
     */
    setBrandingInfo(brandingInfo: any): any;
    /**
     * Returns cookie compliance method value defined on currently rendered portal.
     *
     * @example <caption>PCore.getEnvironmentInfo().getCookieComplianceMethod()</caption>
     * const cookieComplianceMethod = PCore.getEnvironmentInfo().getCookieComplianceMethod();
     *
     * @returns {string} current cookie compliance method selected
     * @private
     */
    getCookieComplianceMethod(): CookieComplianceMethod;
    /**
     * Sets cookie compliance method value for current portal.
     * @param {CookieComplianceMethod} cookieComplianceMethod - selected compliance method
     *
     * @example <caption>PCore.getEnvironmentInfo().setCookieComplianceMethod(ccm)</caption>
     * PCore.getEnvironmentInfo().setCookieComplianceMethod(ccm);
     *
     * @returns {undefined}
     * @private
     */
    setCookieComplianceMethod(cookieComplianceMethod: CookieComplianceMethod): void;
    /**
     * Use this API to change user's locale info on portal
     * to load localized application content.
     * This API must be called when portal is being loaded.
     * This API only changes locale in the portal but does not user's defined locale.
     * @param {String} locale - User locale info that will be set on portal Example: de_DE, en_GB
     * @example <caption>In this example API sets user's locale to de_DE when portal is loading</caption>
     * PCore.getEnvironmentInfo().setLocale('de_DE')
     *
     * @returns {undefined}
     */
    setLocale(locale: string): void;
    getLocale: () => string;
    /**
     * Returns array containing all global environmental keys
     *
     * @example <caption>PCore.getEnvironmentInfo().getEnvironmentKeys()</caption>
     * const environmentKeys = PCore.getEnvironmentInfo().getEnvironmentKeys();
     *
     * @returns {Array} array containing all global environmental keys
     */
    getEnvironmentKeys(): string[];
    /**
     *This API obtains the system configured size limit in MB for attachments.
     *If the size limit is not configured in the system, then the default value of the size limit is 5.
     *
     * @returns {string} the size limit.
     *
     * @example In this example, the API returns the system configured size limit for attachments.
     *
     * const maxAttachmentSize = PCore.getEnvironmentInfo().getMaxAttachmentSize();
     *
     */
    getMaxAttachmentSize(): string;
    /**
     *This API obtains the datapage to get the  operators list.
     *
     * @returns {string} the operator datapage name.
     *
     * @example In this example, the API returns the datapage name to get the  operators list.
     *
     * const defaultOperatorDP = PCore.getEnvironmentInfo().getDefaultOperatorDP();
     *
     */
    getDefaultOperatorDP(): string;
    /**
     *This API obtains the datapage to get the  document url list.
     *
     * @returns {string} the document datapage name.
     *
     * @example In this example, the API returns the datapage name to get the  document url list.
     *
     * const documentUrlDP = PCore.getEnvironmentInfo().getDocumentUrlDP();
     *
     */
    getDocumentUrlDP(): string;
    /**
     *This API obtains the datapage to get the  case instance list.
     *
     * @returns {string} the case instance datapage name.
     *
     * @example In this example, the API returns the datapage name to get the case instance list.
     *
     * const caseInstanceListDP = PCore.getEnvironmentInfo().getCaseInstanceListDP();
     *
     */
    getCaseInstanceListDP(): string;
    /**
     * Returns the base locale
     *
     * @example <caption>PCore.getEnvironmentInfo().getBaseLocale()</caption>
     * const applicationLabel = PCore.getEnvironmentInfo().getBaseLocale();
     * //Returns en_EN if the base locale is set to en_EN during application creation.
     * @returns {string} application name
     * @private
     */
    getBaseLocale(): string;
    /**
     * Description: Constellation UI can be rendered in three different modes
     * 1. FULL_PORTAL - which includes portal rendering of the constellation
     * 2. EMBED - It is a mashup scenario, where cases or views will be rendered
     * 3. HYBRID - Constellation redered in the legacy sections or harnesses
     * 4. PREVIEW - Constellation rendered during authoring time
     * This API returns the rederingMode value, which can be any value from the above four
     * @example <caption>PCore.getEnvironmentInfo().getRenderingMode()</caption>
     * const renderingMode = PCore.getEnvironmentInfo().getRenderingMode();
     * @returns {string} renderingMode
     */
    getRenderingMode(): string;
    /**
     * Returns a csv list of built-on app names
     *
     * @example <caption>PCore.getEnvironmentInfo().getBuiltOnAppNames()</caption>
     * const builtOnAppNames = PCore.getEnvironmentInfo().getBuiltOnAppNames();
     *
     * @returns {string} user name
     * @private
     */
    getBuiltOnAppNames(): string;
    /**
     * This API set the previewMode to true
     * @example <caption>PCore.getEnvironmentInfo().setPreviewMode()</caption>
     * @private
     */
    setPreviewMode(): void;
    /**
     * This API sets the defaultCasePage value
     * @example <caption>PCore.getEnvironmentInfo().setDefaultCasePage("pyEmbedAssignment")</caption>
     * @private
     */
    setDefaultCasePage(pageName: string): void;
    /**
     * This API gets the defaultCasePage value
     * @example <caption>PCore.getEnvironmentInfo().getDefaultCasePage()</caption>
     * @returns {string} pageName value which has been already set
     * @private
     */
    getDefaultCasePage(): string;
    /**
     * This API sets the DisableAssignmentHeader value
     * @example <caption>PCore.getEnvironmentInfo().disableAssignmentHeader(true)</caption>
     * @private
     */
    disableAssignmentHeader(value: boolean): void;
    /**
     * This API gets the DisableAssignmentHeader value
     * @example <caption>PCore.getEnvironmentInfo().isAssignmentHeaderDisabled()</caption>
     * @returns {boolean} disableAssignmentHeader value which has been already set
     * @private
     */
    isAssignmentHeaderDisabled(): boolean;
    /**
     * This API gets the name of default portal assigned to an operator
     * @example <caption>if Operator has WebPortal as their default portal, PCore.getEnvironmentInfo().getDefaultPortal() will return "WebPortal"</caption>
     * @returns {String} default portal name set to the operator
     */
    getDefaultPortal(): string;
    /**
     * This API exposes configured overrides for features
     * @example <caption>, PCore.getEnvironmentInfo().getFeatureMap() will return feature override object</caption>
     * @private
     * @returns {object} default is empty object
     */
    getFeatureMap(): any;
    /**
     * This API is to store keyMapping for launchpad
     * @example <caption>PCore.getEnvironmentInfo().setKeyMapping({"pxCreateDateTime" : "CreateDateTime"})</caption>
     * @private
     */
    setKeyMapping(keyMap: any): any;
    /**
     * This API gets the corresponding launchpad identifier for the specified constellation identifer.
     * If corresponding launchpad identifier is missing it will return null
     * @param {String} keyValue - Specific constellation identifier for which we obtain corresponding launchpad identifier
     * @example <caption>PCore.getEnvironmentInfo().getKeyMapping("pzInsKey") (i.e. mapping of Constellation identifer with launchpad identifier ex. pzInskey to ID)</caption>
     * @returns {String} Launchpad identifier if available else null
     */
    getKeyMapping(keyValue: string): any;
    setCoexistenceMeta(data: any): {
        appType: string;
        isCoexistence: boolean;
    };
    getCoexistenceMeta(): {
        appType: string;
        isCoexistence: boolean;
    };
    isCoexistenceAppOfType(type: string): boolean;
    /**
     * Returns list of cases added in application cases and data
     * @example <caption>PCore.getEnvironmentInfo().getCaseTypeList()</caption>
     * const caselist = PCore.getEnvironmentInfo().getCaseTypeList();
     *
     * @returns {object} theme
     * @private
     */
    getCaseTypeList(): string | any[];
    /**
     * Returns userSettings
     *
     * @example <caption>PCore.getEnvironmentInfo().getUserSettings</caption>
     * const userSettings = PCore.getEnvironmentInfo().getUserSettings();
     *
     * @returns {object} userSettings
     */
    getUserSettings(): string;
}
declare const _default: EnvironmentInfo;
export default _default;
