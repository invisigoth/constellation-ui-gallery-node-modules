import { MessagesConfigObject } from './types';
/**
 * Provides APIs for accessing and manipulating the messages from Redux store.
 * These APIs can be used for different purposes e.g. validation messages, nextwork failure messages etc.
 * @module MessageManager
 */
export declare const MESSAGES_PATH: {
    CONTENT_FIELDS_PATH: string[];
    FIELD_MESSAGES_PATH: string[];
    PAGE_MESSAGES_PATH: string[];
    HTTP_MESSAGES_PATH: string[];
    CASE_MESSAGE_PATH: string[];
};
/**
 * @typedef {object} MessagesConfigObject
 * @property {string} type - (optional) type of the message e.g. error or info
 * @property {string} property - (required) property name e.g. firstName
 * @property {string} pageReference - (required) page reference of the property
 * @property {string} category - (required) category type of the messages e.g. property, PAGE or HTTP
 * @property {string} context - (required) context where messages gets displayed e.g. app or app/primary_2 or app/primary_2/workarea_1
 * @function
 */
/**
 * this function helps to get corresponding message path based on property and category params
 * @function getMessagesPath
 * @private
 * @param {string} property - property name
 * @param {string} pageReference - page reference of the property
 * @param {string} category - category of message
 * @param {boolean} isListEntry - is list entry
 * @returns {string} path
 */
export declare const getMessagesPath: (property?: string, pageReference?: string, category?: string, isListEntry?: boolean) => string[];
/**
 * this function helps to retrieve all error messages from context object
 * @function getValidationErrorMessages
 * @public
 * @property {string} context - (required) context where messages are stored
 * @returns {Array} - error messages
 *
 * @example <caption>Example for retrieving error messages.</caption>
 * context - required
 * getValidationErrorMessages('app/primary_2');
 */
export declare const getValidationErrorMessages: (context: string) => any[];
/**
 * this function helps to retrieve messages from context object
 * @function getMessages
 * @public
 * @param {MessagesConfigObject} config {@link MessagesConfigObject} object which has information to process the messages information
 * @returns {object} - messages object
 *
 * @example <caption>Example for retrieving property messages.</caption>
 * property - required
 * context - required
 * type - optional
 * category - not required
 * getMessages({
 *    type: 'error',
 *    property: '.firstName',
 *    context: 'app/primary_2'
 * });
 *
 * @example <caption>Example for retrieving http messages.</caption>
 * category - required
 * context - required
 * type - optional
 * getMessages({
 *    type: 'error',
 *    category: 'HTTP'
 *    context: 'app/primary_2'
 * });
 *
 * @example <caption>Example for retrieving page messages.</caption>
 * category - required
 * context - required
 * type - optional
 * getMessages({
 *    type: 'error',
 *    category: 'PAGE'
 *    context: 'app/primary_2'
 * });
 */
export declare const getMessages: (config: MessagesConfigObject) => any;
/**
 * this function helps to clear validation messages on property,
 * http messages on context/page.
 *
 * @function clearMessages
 * @public
 * @param {MessagesConfigObject} config {@link MessagesConfigObject} object which has information to process the messages information
 * @example <caption>Example for clearing property messages.</caption>
 * clearMessages({
 *    type: 'error',
 *    property: '.firstName',
 *    context: 'app/primary_2'
 * });
 *
 * @example <caption>Example for clearing http messages.</caption>
 * clearMessages({
 *    type: 'error',
 *    category: 'HTTP'
 *    context: 'app/primary_2'
 * });
 *
 * @example <caption>Example for clearing page messages.</caption>
 * clearMessages({
 *    type: 'info',
 *    category: 'PAGE'
 *    context: 'app/primary_2'
 * });
 *
 *
 * @returns {void}
 */
export declare const clearMessages: (config: MessagesConfigObject) => void;
/**
 * this function helps to add validation messages on property,
 * http messages on context/page.
 * @function addMessages
 * @public
 * @param {MessagesConfigObject} config {@link MessagesConfigObject} object which has information to process the messages information
 * @example <caption>Example for add http messages.</caption>
 * addMessages({
 *    messages: [
 *      {
 *        type: 'error',
 *        message: 'Validation Error'
 *      }
 *    ],
 *    category: 'HTTP'
 *    context: 'app/primary_2'
 * });
 *
 * @example <caption>Example for add page messages.</caption>
 * addMessages({
 *    messages: [
 *      {
 *        type: 'info',
 *        message: 'Info Message'
 *      }
 *    ],
 *    category: 'PAGE'
 *    context: 'app/primary_2'
 * });
 *
 * @example <caption>Example for add property messages.</caption>
 * addMessages({
 *    messages: [
 *      {
 *        type: 'info',
 *        message: 'Info Message'
 *      }
 *    ],
 *    property: '.lastName'
 *    context: 'app/primary_2'
 * });
 *
 *
 * @returns {void}
 */
export declare const addMessages: (config: MessagesConfigObject) => void;
export declare const getAllMessagesPaths: (validationMessages: any, currentPath: [string], allPaths: any[]) => any[];
/**
 * this function helps to retrieve messages for Rootcontainer from root context or active container context
 * @function getRootContainerHttpMessages
 * @private
 * @param {boolean} isNonPortalRootContainer - if renderMode is other than portal then true else false
 * @param {string} activeContainerItemName - (optional) active container item name
 * @returns {object} - messages object
 *
 * @example <caption>Example for retrieving http messages.</caption>
 * isNonPortalRootContainer - required
 * activeContainerItemName - optional
 * getRootContainerHttpMessages(true,'app/primary_1');
 */
export declare const getRootContainerHttpMessages: (isNonPortalRootContainer: boolean, activeContainerItemName: string) => any;
export declare const clearContextMessagesInActiveWorkArea: (context: string) => void;
declare const MessageManager: {
    addMessages: (config: MessagesConfigObject) => void;
    getValidationErrorMessages: (context: string) => any[];
    getMessages: (config: MessagesConfigObject) => any;
    clearMessages: (config: MessagesConfigObject) => void;
    getRootContainerHttpMessages: (isNonPortalRootContainer: boolean, activeContainerItemName: string) => any;
    clearContextMessagesInActiveWorkArea: (context: string) => void;
};
export default MessageManager;
