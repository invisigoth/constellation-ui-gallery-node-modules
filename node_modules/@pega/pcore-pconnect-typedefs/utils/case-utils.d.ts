import { CaseInfo, CaseAction } from '../case/types';
import { C11nEnv } from '../interpreter/c11n-env';
/**
 * Function returns true if the current assignment is in create stage else false using the caseInfo object of DX API response
 * @param {object} caseInfo - Case info object of DX API response
 *
 * @returns {boolean} - Returns true if the current assignment is in create stage else false
 */
declare const isAssignmentInCreateStage: (caseInfo: CaseInfo) => boolean;
declare const isAssignmentInManualStage: (caseInfo: CaseInfo) => boolean;
/**
 * Check if the current assignment is assigned to passed user  and return true if it is assigned else false based in the DX API response of create work action.
 * @param {string} currentOperatorIdentifier - Current operator id
 * @param {object} caseInfo - Case info object of DX API response
 *
 * @returns {boolean} - Returns true if the current assignment is assigned to created operator else false
 */
declare const didOperatorHasAssignment: (currentOperatorIdentifier: string, caseInfo: CaseInfo) => boolean;
/**
 * Traverses through the assignments list node and returns the action ID of the assignment.
 * @param {Array} assignments All the assignments of the case<br>
 * @param {string} assignmentID The work object's assignment ID<br>
 * For example: "ASSIGN-WORKLIST OPB1HW-SPACETRA-WORK RA-14011!REQUEST_FLOW_0"
 * @returns {string} FlowAction ID of the assignment
 * For example: "EnterRequest_0"
 */
declare const getAssignmentActionID: (assignments: [CaseAction], assignmentID: string) => string;
declare const getLastActiveItem: (targetContainer: {
    accessedOrder: [];
    items: [];
}) => {
    semanticURL: string;
};
/**
 * [isLocalAction]
 * Description : Checks if the active action is a local action or not. Returns true for a local action else false.
 * @param {object} caseInfo        Case info object of current context in the Redux store.
 * @returns {boolean} Returns true for a local action else false.
 */
declare const isLocalAction: (caseInfo: CaseInfo) => boolean;
/**
 * [isCaseWideAction]
 * Description : Checks if the active action is a case wide action or not. Returns true for a casewide action else false.
 * @param {string} context        Data context in the Redux store.
 * @param {string} pageReference  Page reference in the context.
 */
declare const isCaseWideAction: (context: string, pageReference: string) => boolean;
/**
 * Description : Checks if the active action is a perform action
 * @param {string} context Data context in the redux store
 * @returns {boolean} Returns true for a perform action
 * @private
 */
declare const isPerform: (context: string) => boolean;
/**
 * Description : Checks if the active action is an assignment
 * @param {string} context Data context in redux store
 * @param {string} pageReference Page reference in the context
 * @returns {boolean} Returns true for a assignment else false.
 */
declare const isAssignment: (context: string, pageReference: string) => boolean;
/**
 * Checks if current case is child case or not
 * @param {object} caseInfo   Case info object
 *
 * @returns {boolean}         Returns true if child case else false
 */
declare const isChildCase: (caseInfo: CaseInfo) => boolean;
/**
 * Description : Returns actionID by checking assignments and assignmentId
 * @param {string} assignments Assignments in case info
 * @param {string} assignmentID Assignment Id in case info
 * @param {string} localActionID Localaction Id in case info
 * @returns {string} Returns Localaction Id in case info else will return FlowAction ID of the assignment
 */
declare const getActionId: (assignments: [CaseAction], assignmentID: string, localActionID: string) => any;
declare const getContainerDataForFinishAssignment: (containerItemID: string, c11nEnv: C11nEnv, options: {
    isTriggeredFromDifferentContext: boolean;
}) => {
    assignmentID: any;
    caseID: any;
    assignments: any;
    localActionID: any;
    caseActions: any;
    caseInfo: any;
    businessID: any;
};
export { didOperatorHasAssignment, isAssignmentInCreateStage, isAssignmentInManualStage, getAssignmentActionID, getLastActiveItem, getActionId, getContainerDataForFinishAssignment, isCaseWideAction, isChildCase, isLocalAction, isPerform, isAssignment };
