/**
 * @description
 * Exposes utility APIs in the Constellation Core that publish and subscribe events
 */
declare class PubSubUtils {
    /**
     * Notifies the subscription item(which can be uniquely identified by subscriptionItemName)
     * whenever a specific type of event occurs
     *
     * @example <caption>Example for subscribe()</caption>
     * Example usage - PCore.getPubSubUtils().subscribe(eventType,subscriptionItem,subscriptionItemName);
     * // notifies the subscriptionItem whenever an event of type eventType occurs
     * @param {string} eventType - The type of event
     * @param {Function} subscriptionItem - The item that needs to be notified
     * @param {string} subscriptionItemName - A unique ID or name assigned by the user to identify the subscription item.
     * @param {boolean} subscribeOnce - The flag that determines if the subscription item should be notified only once.
     * @param {string} contextName - The name of the context containing the event whose subscription item must be notified. eq., app/primary_1
     * @function
     * @public
     */
    static subscribe(eventType: string, subscriptionItem: Function, subscriptionItemName?: string, subscribeOnce?: boolean, contextName?: string): void;
    /**
     * Notifies the subscription item(which can be uniquely identified by subscriptionItemName) only once
     * whenever a specific type of event occurs
     *
     * @example <caption>Example for subscribeOnce()</caption>
     * Example usage - PCore.getPubSubUtils().subscribeOnce(eventType,subscriptionItem,subscriptionItemName);
     * // notifies the subscriptionItem only once whenever an event of type eventType occurs
     * @param {string} eventType - The type of event
     * @param {Function} subscriptionItem - The subscription item that must be notified.
     * @param {string} subscriptionItemName - The unique name or ID used to identify the subscription item.
     * @function
     * @public
     */
    static subscribeOnce(eventType: string, subscriptionItem: Function, subscriptionItemName?: string): void;
    /**
     * Invokes all items subscribed to a specific type of event and
     * passes the specified payload to the subscribed items
     *
     * @example <caption>Example for publish</caption>
     * Example usage - PCore.getPubSubUtils().publish(eventType,payload);
     * // invokes all items subscribed to the event type and passes the payload to the items
     *
     * @param {string} eventType - The type of event whose subscribed events must be invoked.
     * @param {object} payload - The information that must be passed to the subscribed items.
     * @function
     * @public
     */
    static publish(eventType: string, payload?: any): void;
    /**
     * Unsubscribes a subscription item belonging to a specific type of event.
     *
     * @example <caption>Example for unsubscribe()</caption>
     * Example usage - PCore.getPubSubUtils().unsubscribe(eventType,subscriptionItemName);
     * // Unsubscribes a subscription item belonging to a specific type of event.
     * @param {string} eventType - The type of event
     * @param {string} subscriptionItemName - The unique ID or name used to identify the subscription item.
     * @param {string} contextName - The name of the context containing the event whose subscription item must be unsubscribed. eq., app/primary_1
     * @function
     * @public
     */
    static unsubscribe(eventType: string, subscriptionItemName: string, contextName?: string): void;
    /**
     * Unsubscribes all subscription items belonging to a specific type of event.
     *
     * @private
     * @param {string} eventType - The type of event
     */
    static unsubscribeAllWithEventType(eventType: string): void;
    /**
     * Deletes the subscription items of all events under the given context.
     *
     * @example <caption>Example for cleanContextSubscribers()</caption>
     * Example usage - PCore.getPubSubUtils().cleanContextSubscribers("app/primary_1");
     * // Cleares all the subsciption-item of all the event which fall under app/primary_1
     * @param {string} contextName - The name of the context containing the events whose subscription items must be deleted. eq., app/primary_1
     * @function
     * @public
     */
    static cleanContextSubscribers(contextName: string): void;
}
export default PubSubUtils;
