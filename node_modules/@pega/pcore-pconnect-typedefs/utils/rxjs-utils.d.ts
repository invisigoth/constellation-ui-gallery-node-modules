import { Observable } from 'rxjs';
/**
 * this function is a wrapper around catchError
 * --> helps to log the error and returns error action object
 *
 * @param {string} msg message for the error.
 * @param {object} context context for the error
 * @returns {*} returns the error action object.
 */
export declare const logAndCatchError: (msg: any, context?: string, actionMgrID?: string) => import("rxjs").OperatorFunction<unknown, unknown>;
/**
 * this function is a wrapper around takeUntil
 * --> helps to cancel the original request if CANCEL_ACTION was triggered
 *
 * @param {*} action$ observable stream
 * @param {*} reqPayload request Payload
 * @param {*} comparator function to compare properties between cancel request and normal requqest payload
 * @returns {*} returns outer observable
 */
export declare const continueRequestUntil: (action$: any, reqPayload: any, comparator: any) => import("rxjs").MonoTypeOperatorFunction<unknown>;
/**
 * --> helps to throttle based on time and distinct payload
 *
 * @param {*} delay number of milliseconds for debounce
 * @param {*} comparator function to compare properties between prev request and next requqest payload
 * @returns {*} returns 1) empty observable within delay time. OR
 *                      2) actual value if delay time crosses.
 */
export declare const throttleUntilChanged: (delay: number, comparator?: any) => (source: any) => Observable<unknown>;
