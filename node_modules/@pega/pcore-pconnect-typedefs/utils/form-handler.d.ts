/**
 * Returns the property name without period if it exists
 * @param {string} propertyName property name to be normalized
 */
export declare const getNormalizedPropertyName: (propertyName: string) => string;
export declare const getFullPropertyReference: (property?: string, pageReference?: string) => string;
/**
 * Removes the remove FormFields from the formFieldsMap when
 * container item get deleted
 * @param {string} contextName context name to be removed from object
 */
export declare const removeFormFieldsFromMap: (contextName: string) => void;
export declare const addPageFieldToForm: (contextName: string, propertyName: string, value: string) => void;
/**
 * Adds the fields to the formFieldsMap object
 * of its respective context
 * @param {string} contextName context to add in object
 * @param {string} propertyName property name added under the context
 * @param {*} value value of the property
 */
export declare const setFormFieldAsEditable: (contextName: string, propertyName: string, value: any) => void;
/**
 * Sets the error flag to true for the field
 * @param {string} contextName context name containing error property
 * @param {string} propertyName name of the property which has error
 * @param {string} pageReference page reference of the property
 */
export declare const markAsErrorField: (contextName: string, propertyName: string, pageReference: string) => void;
/**
 * Sets the error flag to false for the field
 * @param {string} contextName context name containing error property
 * @param {string} propertyName property to be set valid
 * @param {string} pageReference page reference of the property
 */
export declare const removeErrorFieldProperty: (contextName: string, propertyName: string, pageReference: string) => void;
/**
 * Removes the field from form map
 * @param {string} contextName context name containing the property
 * @param {string} propertyName property to be removed
 * @param {string} pageReference page reference of the property
 */
export declare const removeFormFieldFromMap: (contextName: string, propertyName: string, pageReference: string) => void;
/**
 * Adds the field from form map
 * @param {string} contextName context name containing the property
 * @param {string} propertyName property to be added
 * @param {string} pageReference page reference of the property
 */
export declare const addFormFieldFromMap: (contextName: string, propertyName: string, pageReference: string) => void;
/**
 * Returns the validation object
 */
export declare const getFormFieldsMap: () => any;
export declare const getEditableFormFieldsReferenceList: (context: string, options?: {}) => {
    formInputs: any[];
    attachments: object[];
    formPageFields: any[];
};
/**
 * this function provides the values for the formfields present in the given context
 * @param {*} context - context of form
 * @param {*} options - optional parameters like ignoreFieldsInsideList
 * @returns {*} contentObject
 */
export declare const getFormContent: (context: string, options?: {}) => {};
/**
 * Checks whether form is valid or not
 * based on the validation values for form fields
 * @param {string} context context of form fields to be validated
 * @returns {boolean} boolean
 */
export declare const isFormValid: (context: string) => boolean;
/**
 * Checks whether form has active suggestion
 * @private
 * @param {string} context context of form fields
 * @returns {boolean} boolean
 */
export declare const isFormHasSuggestions: (context: string) => boolean;
/**
 * returns all the fields in the form which are visible
 * @param {string} context context
 */
export declare const getVisibleFormFields: (context: string) => any[];
/**
 * returns all the fields in the form which are hidden
 * @param {string} context context
 */
export declare const getHiddenFormFields: (context: string) => any[];
/**
 * returns all the fields in the form which are readonly
 * @param {string} context context
 */
export declare const getReadOnlyFormFields: (context: string) => any[];
/**
 * returns all the fields in the form which are editable
 * @param {string} context context
 * @returns {Array} editable fields information in an array -
[{
    "name": "<field full path>",
    "label": "<field label>",
    "type": "<field type>"
}]
 */
export declare const getEditableFields: (context: string) => any[];
