/**
 * this function helps to get Parent context name from context
 *
 * @param {string} context -- base context
 * @returns {string} returns -- parent context name
 */
export declare const getParentContextName: (context: string) => string;
/**
 * this function helps to build context name
 *
 * @param {string} target -- container target name
 * @param {string} baseContext -- base context
 * @param {boolean} returnExistingContext if true, return the existing context
 * @returns {string} returns -- new context name
 */
export declare const buildContextName: (target: string, baseContext: string, returnExistingContext?: boolean) => string;
/**
 * this function helps to build transient context name
 * @private
 * @param {string} id unique id to be added as transient item
 * @param {string} baseContext base context to start build from
 * @returns {string} newly built contextName
 */
export declare const buildTransientContextName: (id: string, baseContext: string) => string;
/**
 * this function returns the transient context for the target container
 * @private
 * @param {string} id transient item unique id
 * @param {string} baseContext base context to start search from
 * @returns {string} returns context if exists else empty string
 */
export declare const getTransientContext: (id: string, baseContext: string) => string;
/**
 * this function helps to get Target name from context
 *
 * @param {string} context -- base context
 * @returns {string} returns -- target name
 */
export declare const getTargetFromContext: (context: string) => string;
/**
 * Creates a context name for the modal in the format `app/primary_3/secondary_1'. Here `app/primary_3` is the parent context.
 * If the modal is opened from peek panel (tertiary), the context name will be in the format: `app/tertiary_1/secondary_1'
 * For skip new use case the format will be `app/secondary_1'
 * @param {string} parentContext - Parent context from where modal is opened
 * @param {string} context - new context for the secondary (modal)
 */
export declare const buildModalContext: (parentContext: string, context: string) => string;
/**
 * Return parent context for the modal, the context from where the modal is opened. For E.g.: `app/primary_1` and `app/tertiary_1`.
 * For skip new use case we don't have any parent context
 * @param {string} context - modal context
 */
export declare const getParentContext: (context: string) => string;
/**
 * Get container from context name, this method is used in modal use cases. E.g: `app/primary_3/secondary_1' will return `app/secondary_1'
 * @param {string} context - modal context
 */
export declare const getContainerIdFromContext: (context: string) => string;
