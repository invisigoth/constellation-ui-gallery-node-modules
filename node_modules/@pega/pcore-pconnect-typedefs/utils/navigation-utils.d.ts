/**
 * @description
 * Exposes APIs to maintain the state of UI components
 */
declare class NavigationUtils {
    userSettings: any;
    constructor();
    /**
     * This function returns the normalized form for the key
     * @private
     * @param {string} key string to normalize
     * @returns {string} normalized string
     */
    getNormalizedKey(key: string): string;
    /**
     * This API updates the state of a specified UI component. The updated state is stored in a browser session.
     * @description This will save the state in browser session
     * @param {string} key -- The ID of the UI component whose state must be updated
     * @param {object} state -- The data that must be set as the state of the UI component
     * @function
     * @example <caption>In this example, the API updates the state of a UI component whose key is on8ttl-c11ngall-work-d-2001-caseview.</caption>
     * PCore.getNavigationUtils().setComponentState(key, object)
     * PCore.getNavigationUtils().setComponentState("on8ttl-c11ngall-work-d-2001-caseview", {
     *  active: 0
     * });
     */
    setComponentState: (key: string, state: any) => void;
    /**
     * This API obtains the state of a specified UI component
     * @description This API returns the state of the UI component as a Java Script object
     * @param {string} key -- The ID of the UI component whose state must be retrieved
     * @returns {object} -- the saved state with the corresponding key <br> Eg : {active:0}
     * @function
     * @example <caption>In this example, the API obtains the state of the UI component whose key is on8ttl-c11ngall-work-d-2001-caseview</caption>
     * PCore.getNavigationUtils().getComponentState(key)
     * PCore.getNavigationUtils().getComponentState("on8ttl-c11ngall-work-d-2001-caseview");
     */
    getComponentState: (key: string) => any;
    /**
     * This API remove the state of a specified UI component
     * @param {string} key -- The ID of the UI component whose state must be removed
     * @function
     * @example <caption>In this example, the API remove the state of the UI component whose key is on8ttl-c11ngall-work-d-2001-caseview</caption>
     * PCore.getNavigationUtils().removeComponentState(key)
     * PCore.getNavigationUtils().removeComponentState("on8ttl-c11ngall-work-d-2001-caseview")
     */
    removeComponentState: (key: string) => void;
    /**
     * This API makes get request to obtain the saved state of the userSettings
     * @private
     * @function
     * @example <caption>In this example, the API obtains saved state of the userSettings and saves them in class reference</caption>
     * PCore.getNavigationUtils().fetchUserSettings()
     */
    fetchUserSettings: () => Promise<void>;
    /**
     * Initializes the userSettings attribute of the NavigationUtils class.
     * @function
     * @example <caption>In this example, the API initializes the userSettings attribute of the NavigationUtils class.</caption>
     * PCore.getNavigationUtils().init();
     */
    init: () => void;
    /**
     * This Api obtains the value of a specified property in the userSettings attribute.
     * @param {string} path -- The location of the property whose value must be obtained.
     * @returns {*} -- The value of the property from userSettings attribute <br> Eg : {Case:{summaryPanelExpanded:true}}
     * @function
     * @example <caption>In this example, the API returns the value of the 'prop1' property in the userSettings attribute.</caption>
     * PCore.getNavigationUtils().getUserSettings('prop1');
     */
    getUserSettings: (path: string) => any;
    /**
     * This API specifies or updates values of properties in the userSettings attribute.
     * @param {string} path -- The path of the UI component whose state must be updated
     * @param {*} value -- The value that must be assigned to the property.
     * @returns {Promise} -- A promise that resolves to the updated user settings as an object <br> Eg : new Promise().then((res) => console.log(res)})
     * @function
     * @example <caption>In this example, the API sets the value of the 'prop1' property to true in the userSettings attribute.</caption>
     * PCore.getNavigationUtils().setUserSettings('prop1', true);
     */
    setUserSettings: (path: string, value: string) => Promise<any>;
}
declare const _default: NavigationUtils;
export default _default;
