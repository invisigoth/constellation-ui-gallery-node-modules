/**
 * @description
 * Exposes APIs to load the script and css files.
 */
declare class AssetLoader {
    loaderObj: {
        [key: string]: Function;
    };
    staticServerURL: string | null;
    appStaticUrl: string | null;
    pegaOnlyUrl: boolean;
    loadedAssets: {
        [key: string]: boolean;
    };
    componentsConfig: any;
    appAlias: string;
    appAliasWithoutServlet: string;
    b2sJWT: string | null;
    constructor();
    getTypes: {
        SCRIPT: string;
        STYLE: string;
    };
    /**
     * Returns the static content url
     * @description This exposes the method to fetch static content url
     *
     * @example <caption>Example for getStaticServerUrl()</caption>
     * Example can be seen in C11n getImagePath method
     * Example usage - AssetLoader.getStaticServerUrl()
     * // returns -- Static content url string
     *
     * @see {@link getStaticServerUrl} for further information.
     * @see {@link getImagePath} for example.
     * @returns {object} the Asset Loader Object
     * @function
     */
    getStaticServerUrl(): string;
    /**
     * Returns the theme schema json
     * @description This exposes the method to fetch theme schema json
     *
     * @example <caption>Example for getThemeSchemaJSON()</caption>
     * Example usage - AssetLoader.getThemeSchemaJSON()
     * // returns -- Theme schema json
     *
     * @see {@link getThemeSchemaJSON} for further information.
     * @returns {object} the Asset Loader Object
     * @function
     * @private
     */
    getThemeSchemaJSON(): Promise<any>;
    /**
     * Returns the Constellation service url - no terminating /
     * @description This exposes the method to fetch the Constellation service url
     *
     * @example <caption>Example for getConstellationSErviceUrl()</caption>
     * Example can be seen in C11n getImagePath method
     * Example usage - AssetLoader.getConstellationServiceUrl()
     * // returns -- Constellation service url string
     *
     * @see {@link getConstellationServiceUrl} for further information.
     * @see {@link getImagePath} for example.
     * @returns {object} the Asset Loader Object
     * @function
     */
    getConstellationServiceUrl(): string;
    /**
     * This method is used to set the appAlias for the current request.
     * @description This exposes the method set the app alias for the current request.
     * @example <caption>Example for setAppAlias()</caption>
     * Example can be seen in bootstrap-utils setAppAlias method
     * @param {string} appAlias name
     * @see {@link setAppAlias} for further information.
     * @function
     */
    setAppAlias(appAlias: string): void;
    setAppAliasWithoutServlet(appAliasWithoutServlet: string): void;
    /**
     * Returns the appAlias for the current application
     * @description This exposes the method to get the app alias for the current request.
     * @example <caption>Example for getAppAlias()</caption>
     * Example can be seen in C11n getImagePath method
     * Example usage - AssetLoader.getAppAlias()
     * // returns -- appAlias string for the current request.
     * @see {@link getAppAlias} for further information.
     * @see {@link getImagePath} for example.
     * @returns {string} the app alias
     * @function
     */
    getAppAlias(): string;
    /**
     * This exposes a method to call the Constellation service to fetch the corresponding component config.json that satisfies the specified properties.
     * This call is authenticated by the service, using the token issued for the Constellation service (B2S JWT).
     * @example <caption>Example for getSvcComponentsConfig()</caption>
     * // In this example, the API retrieves an operator image and creates a DOMString containing a URL representing the image Blob object.
     * const templateDefinitionConfigJson = await AssetLoader
     *      .getSvcComponentsConfig([{ field: 'name', value: ‘OneColumn’ }])
     *      .then((response) => {
     *         if (response?.data?.components?.[0]) {
     *           return response.data.components[0];
     *         }
     *         throw new Error('templateDefinition for OneColumn not found!');
     *      })
     *      .catch(() => {
     *         throw new Error('templateDefinition for OneColumn not found!');
     *      });
     * @param {Array} criteriaToMatch of name-value pairs specifying the search criteria
     * @param {object} options of additional information required such as:
     *  -alternateDesignSystemURL {String} - Contains the URL for an alternative design system, used for fetching additional config-ext.json values
     * @returns {object} - Contains an attribute data that maps to an array of config objects matching the criteria. In the event of an alternateDesignSystemURL specified in the options,
     * and only one config object is obtained via the initial fetch call, the alternative design system's config-ext.json will be embedded in an alternateDesignSystemConfig attribute within
     * the single config of the returned componentData. Errors will be stored inside the alternateDesignSystemConfig attribute as well in the case of an unsuccessful fetch.
     * @function
     */
    getSvcComponentsConfig(criteriaToMatch: [{
        [key: string]: string;
    }], options?: {}): Promise<{
        data: any;
    }>;
    getSvcComponentsConfigSeparatedUrls(criteriaToMatch: [{
        [key: string]: string;
    }], params: any, options: any): Promise<{
        data: {
            components: [];
        };
    }>;
    mergeComponentList: (cmptCfgList?: any[]) => any[];
    fetchSDKComponent(params: any): Promise<any>;
    loadAndFilterPegaComponentsConfig(criteriaToMatch: any, builtOnApps: any): Promise<any[]>;
    loadPegaComponentsConfig(): Promise<any>;
    loadAndCustomerComponentsConfig(params: any): Promise<any>;
    checkForBuiltOnSupport(builtOnApps: any, allowedApplicationsFromConfig: any): any;
    getSvcComponentsConfigCombinedUrl(criteriaToMatch: any, params: any, options: any): Promise<{
        data: any;
    }>;
    getSvcComponentsConfigADS(criteriaToMatch: any, params: any, options: any): Promise<any>;
    /**
     * This exposes a method to call the Constellation service to fetch an image. This call is authenticated
     * by the service, using the token issued for the Constellation service (B2S JWT).
     * @example <caption>Example for getSvcImage()</caption>
     * // In this example, the API retrieves an operator image and creates a DOMString containing a URL representing the image Blob object.
     * const operatorImg = await AssetLoader
     *       .getSvcImage('DATA-CONTENT-IMAGE USER@CONSTELLATION.COM!PNG!/OPERATORIMAGES/')
     *       .then((data) => {
     *          const url = window.URL.createObjectURL(data);
     *          return url;
     *       })
     *       .catch(() => {
     *          console.error('Unable to load the image!');
     *       });
     * // returns -- Promise that resolves to the image (blob) specified as the key
     * @param {string} key Identifier to the image
     * @returns {Promise} Promise that resolves to the image (blob) specified as the key
     * @function
     */
    getSvcImage(key: any): Promise<Blob>;
    /**
     * This API gets the localization instance from the constellation service for a given user locale and an instance key. This call is authenticated
     * by the service, using the token issued for the Constellation service (B2S JWT).
     * @example <caption>Example for getSvcLocale('en_US','WORK-!VIEW!PYCASESUMMARY.json')</caption>
     * // In this example, the API gets the localeJson for the en_US locale and for the view PyCaseSummary in the Work- class.
     * // This API call returns a Promise which when resolved gives the localeJson.
     * const localeJson = await AssetLoader.getSvcLocale('en_US', 'WORK-!VIEW!PYCASESUMMARY.json')
     *       .then((data) => {
     *          // data is the response from the constellation service which is the localeJson
     *       });
     * @param   {string} locale     locale for which we need locale JSON
     * @param   {string} key        Identifier to the JSON files
     * @returns {Promise}           Promise that resolves to a localeJson
     * @function
     */
    getSvcLocale(locale: any, key: any): Promise<Response>;
    /**
     * This exposes a method to call the Constellation service to fetch a custom component. This call is authenticated
     * by the service, using the token issued for the Constellation service (B2S JWT).
     * @example <caption>Example for getSvcComponent()</caption>
     * // In this example, the API retrieves the JS implementation for the WeightInput component.
     * const WeightInputDefinition = await AssetLoader
     *      .getSvcComponent('WeightInput.js')
     *      .then((response) => {
     *         return response;
     *       })
     *       .catch(() => {
     *         console.error('Unable to retrieve the component!');
     *       });
     * // returns -- Promise that resolves to the corresponding JS implementation for the component
     * @param {string} name Name of the component whose JS implementation we want to fetch
     * @returns {Promise} Promise that resolves to the corresponding JS implementation for the component
     * @function
     */
    getSvcComponent(name: any): Promise<string>;
    /**
     * This exposes a method to call the Constellation service to fetch a custom component and attach the component script in document HEAD. This call is authenticated
     * by the service, using the token issued for the Constellation service (B2S JWT).
     * @example <caption>Example for loadSvcComponent()</caption>
     * // In this example, the API retrieves the JS implementation for the WeightInput component and attached to document HEAD in a <script /> tag.
     * const WeightInputDefinition = await AssetLoader
     *      .loadSvcComponent('WeightInput')
     *      .then((componentName) => {
     *         return componentName;
     *       })
     *       .catch(() => {
     *         console.error('Unable to retrieve the component!');
     *       });
     * // returns -- Promise that resolves to the corresponding JS implementation for the component
     * @param {string} name Name of the component whose JS implementation we want to fetch
     * @returns {Promise} Promise that resolves to the component name
     * @function
     */
    loadSvcComponent(name: string): Promise<unknown>;
    /**
    * Sets the urls to fetch pega static content and customer static content.
    * @description This sets static server urls as passed in its argument
    *
    * @example <caption>Example for initServer()</caption>
    * Example can be seen in loadLibs,setStaticServerUrl methods in ui_bootstrap
    * Example usage - AssetLoader.initServer('https://mirror.pegacloud.net/prweb')
    * This initiates server with url - https://mirror.pegacloud.net/prweb as static content url
    *
    * @param {string} url url to fetch pega static content
    * @param {string} appUrl Service url to fetch app static content
    * @param {string=} b2sJWT Authorization header token (Optional)
    * This is used to access protected resources
  
    * @see {@link setStaticServerUrl} for further information.
    * @see {@link loadLibs} for example.
    * @function
    */
    initServer(url: string, appUrl: string, b2sJWT: string): void;
    /**
     * Registers the custom loader to the Asset Loader Class.
     * @description register custom loader to the Asset Loader Class.
     * This can be used to register custom loaders.
     *
     * @example <caption>Example for register() depicting how to register
     * a custom loader viz. font-loader to use loadWebFonts function </caption>
     * Example usage - AssetLoader.register('font-loader', loadWebFonts)
     *
     * @param {string} name name of the loader like Font-Loader etc.,
     * @param {Function} loaderFn loader function, function
     * must return Promise with assets.
     *
     * @function
     */
    register(name: string, loaderFn: Function): void;
    /**
     * Returns the loader associated/registered with loader name.
     * @description returns custom loader if defined else defaults to default loader.
     *
     * @example <caption>Example for register()</caption>
     * Example usage - AssetLoader.getLoader('font-loader')
     * which returns the loadWebFonts method/API
     *
     * Example can be seen in component-loader loadComponents method
     * @param {string} name name of the loader like Font-Loader etc.,
     *
     * @returns {Function} returns the loader
     * @default defaults to in-build js/css loader
     *
     * @see {@link loadComponents} for example usage.
     *
     * @function
     */
    getLoader(name?: string): Function;
    /**
     * Loads the assets from asset dependencies list.
     * @description loads asset dependencies as individual promises
     * @param options
     * It reads the dependency from assets map and process the assets mapped in it.
     * Once all scripts loaded successfully through Promise.all, it will call render.
     *
     * @example <caption>Example for loadAssets()</caption>
     * Example usage - AssetLoader.loadAssets('https://mirror.pegacloud.net/assets/react.prod.js')
     * which loads the react prod file into html
     *
     * Example can be seen in history-epic showHistory method
     * and processViewResponse method in util
     *
     * @param {*} assets assets list eq., section...
     * @returns {Promise<object>} promise Object for the resolved Assets
     *
     * @see {@link processViewResponse} for further information.
     * @see {@link showHistory} for example usage.
     *
     * @function
     */
    loadAssets(assets: [], options: any): Promise<void> | Promise<[]>;
    /**
     * This exposes a method to call the Constellation app static service to fetch assets from isolations. This call is authenticated
     * by the service, using the token issued for the Constellation service (B2S JWT).
     * @example <caption>Example for getAssetsFromIsolations()</caption>
     * // In this example, the API retrieves logo image and creates a DOMString containing a URL representing the image Blob object.
     * const operatorImg = await AssetLoader
     *       .getAssetsFromIsolations('image/sample.png')
     *       .then((data) => {
     *          const url = window.URL.createObjectURL(data);
     *          return url;
     *       })
     *       .catch(() => {
     *          console.error('Unable to load the image!');
     *       });
     * // returns -- Promise that resolves to the image (blob) specified as the key
     * @param {string} assetPath path to the image
     * @returns {Promise} Promise that resolves to the image (blob) specified as the key
     * @function
     * @private
     */
    getAssetsFromIsolations(assetPath: string): Promise<Blob>;
}
declare const _default: AssetLoader;
export default _default;
