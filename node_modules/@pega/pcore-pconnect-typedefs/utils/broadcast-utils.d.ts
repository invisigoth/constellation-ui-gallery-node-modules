interface AssignmentParameters {
    payload: {
        data: {
            caseInfo: {
                assignments: {
                    ID: string;
                }[];
            };
        };
    };
}
declare class BroadcastUtils {
    broadcastChannel: BroadcastChannel | null;
    callback: Function | null;
    isReverseCoexistenceCase: boolean;
    broadcastEventToIframe: boolean;
    isDirtyDialogActive: boolean;
    onCreateCallback: Function | null;
    openAssignmentParams: AssignmentParameters[] | null;
    static readonly OPEN_ASSIGNMENT_ACTION: string;
    static readonly DIRTY_POPUP_C11N: string;
    static readonly HANDLE_INFINITY_DISCARD: string;
    static readonly OPEN_ASSIGNMENT_MODAL: string;
    static readonly DISPLAY_DIRTY_POPUP: string;
    static readonly LOAD_PREVIEW: string;
    static readonly UPDATE_SEMANTIC_URL: string;
    static readonly OPEN_WORK_ITEM: string;
    static readonly OPEN_WORK_BY_HANDLE: string;
    constructor();
    private readonly getGlobalObject;
    private readonly getUniqueId;
    private readonly setUniqueId;
    private readonly initBroadcastChannel;
    private readonly openAssignment;
    private readonly destroyBroadcastChannel;
    subscribeEvents: () => void;
    unsubscribeEvents: () => void;
    init: (includeEvents?: boolean) => void;
    destroy: () => void;
    setCallBackFunction: (callbackFunction: Function) => void;
    setReverseCoexistenceCaseLoaded: (value: boolean) => void;
    setIsDirtyDialogActive: (value: boolean) => void;
    getBroadCastChannel: () => BroadcastChannel | null;
    getCallBackFunction: () => Function;
    isReverseCoexistenceCaseLoaded: () => boolean;
    postDirtyPopupMessage: ({ callBackFunction }: {
        callBackFunction: Function;
    }) => void;
    handleDiscard: () => void;
    postCreateCaseMessage: (key: any, callback: any, paramsForCallback: any) => void;
}
declare const _default: BroadcastUtils;
export default _default;
