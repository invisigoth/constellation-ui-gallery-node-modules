/**
 * @description
 * Exposes APIs to to manager defer loaded components
 */
import { DeferLoadComponentObj } from './types';
declare class DeferLoadManager {
    components: {
        [contextName: string]: {
            [uniqueId: string]: DeferLoadComponentObj;
        };
    };
    constructor();
    /**
     * Checks whether context is initialised or not
     * @param {string} uniqueId component identifier
     * @param {string} contextName Component context e.g. app/primary_1
     * @returns { boolean } Returns boolean whether context is initialised or not
     */
    _checkComponent(uniqueId: string, contextName: string): boolean;
    /**
     * Initialise component cache with deferred component information
     * @param {string} viewName The name of the view
     * @param { string } caseKey case key used for refresh endpoint
     * @param {string} pageReference Page reference
     * @param { string } contextName Component context e.g. app/primary_1
     * @param {*} uniqueId component identifier
     */
    start(viewName: string, caseKey: string, pageReference: string, contextName: string, uniqueId: string): void;
    /**
     * Stops listening to the cascade event
     * @param {string} uniqueId component identifier
     * @param {string} contextName Component context e.g. app/primary_1
     */
    stop(uniqueId: string, contextName: string): void;
    /**
     * Removes component from the cache
     * @param {string} uniqueId component identifier
     * @param {string} contextName Component context e.g. app/primary_1
     */
    remove(uniqueId: string, contextName: string): void;
    /**
     * Removes component context from cache
     * @param {string} contextName Component context e.g. app/primary_1
     */
    removeContext(contextName: string): void;
    /**
     * Mark component as cascadable
     * @param {string} contextName Component context e.g. app/primary_1
     */
    enableCascade(contextName: string): void;
    /**
     * Activates the component
     * @param {string} uniqueId component identifier
     * @param {string} contextName Component context e.g. app/primary_1
     */
    activate(uniqueId: string, contextName: string): void;
    /**
     * Deactivates the component
     * @param {string} uniqueId component identifier
     * @param {string} contextName Component context e.g. app/primary_1
     */
    deactivate(uniqueId: string, contextName: string): void;
    /**
     * Refresh all active views associated to the component
     * @param {string} contextName Component context e.g. app/primary_1
     */
    refreshActiveComponents(contextName: string): void;
    /**
     * Refreshes view associated to the component
     * @param {string} uniqueId component identifier
     * @param {string} contextName Component context e.g. app/primary_1
     */
    refreshComponent(uniqueId: string, contextName: string): void;
}
declare const _default: DeferLoadManager;
export default _default;
