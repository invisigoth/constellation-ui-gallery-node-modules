import '../globals';
declare class Processor {
    #private;
    /**
     * [getActionHandlers]
     * Description : Returns the array of action handlers for all actions authored for a behaviour.
     * "behaviours": [
     *    {
     *      "behaviour": "onChange",
     *      "actions": [
     *        {
     *          "action": "refresh"
     *        }
     *      ]
     *    }
     * ]
     * @param   {Array}     actions     Array of actions.
     * @param   {string}    behaviour   Behaviour for which actions are authored. Eg onChange is a behaviour for which "refresh" action can be authored.
     * @param   {string}    eventType   Event type
     * @returns {Array}                 Array of action handlers.
     */
    static getActionHandlers: (actions: any[], behaviour: string, eventType: string) => any[];
    /**
     * Checks whether given element is editable or
     * not.
     *
     * @param {HTMLElement} target target element
     * @returns {boolean} boolean
     */
    static isEditable: (target: HTMLElement) => boolean;
    /**
     * checks whether given element supports end user input values
     * @param {*} target target element
     * @returns {boolean} boolean
     */
    static isNonKeyInput: (target: any) => boolean;
    /**
     *
     * Abstract function to handle the actions performed
     * in the view.
     * @param {object} config contains the action cofig.
     * @param {*} c11nEnv c11n_env object.
     */
    static buildActionObject: (config: object, c11nEnv: any) => actionObject;
    /**
     * Returns the full reference
     *
     * @param {*} component c11n_env object
     * @returns {string} full path.
     */
    static getFullRef: (component: any) => string;
    /**
     * Handles the change event triggerred by component.
     * Incase of React, every keystoke it is being called.
     * Going to dispatch the event to store to handle the update
     * of the values.
     *
     * Also clear the error messages of that field component by calling clearMessages on messageManager
     *
     * @param {*} component this c11nEnv object
     * @param {Event} event DOM Event object
     */
    static changeHandler: (component: Component, event: Event | browserEvent) => void;
    /**
     * handles the blur event, and triggers FIELD_CHANGE event
     * so that ChangeObserver can listen for it.
     * In case e is Object (not event), then it will treat as
     * explicit event trigger by infra to handle complex values.
     * Like more than one property eg., DataRange Control, Autocomplete etc.,
     * @param {*} c11nEnv DOM Event object
     * @param {*} event Property need to be updated eq., .FirstName
     */
    static blurHandler: (c11nEnv: any, event: any) => void;
    /**
     * handles the changes and blur events
     * @param {*} component c11n_env object
     * @param {Event} event target event
     */
    static eventHandler: (component: any, event: Event) => void;
    /**
     * pauses the queue
     */
    static pause: () => void;
    /**
     * resumes the queue processing
     */
    static resume: () => void;
    /**
     * checks if the queue is empty or not
     * @returns {boolean} boolean
     */
    static isQueueEmpty: () => boolean;
    /**
     * clears queue items
     */
    static clearQueue: () => void;
    /**
     * returns the action queue
     */
    static getActionsQueue: () => any[];
    static EVENTS_MAP: {
        click: string;
        change: string;
        hover: string;
        blur: string;
    };
}
export default Processor;
