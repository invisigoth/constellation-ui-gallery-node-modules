import '../globals';
import { C11nEnv } from '../interpreter/c11n-env';
/**
 * Provides the basic APIs to handle actions in the Constellation infrastructure
 */
declare class ActionsApi {
    /**
     * Constructor - <strong>Not for use outside of Core! Included for reference only.</strong>
     * @param {object} c11nEnv The context object that is used for this instance of the ActionsApi
     */
    private readonly c11nEnv;
    constructor(c11nEnv: C11nEnv);
    MSG_CLASSNAME_REQUIRED: string;
    MSG_CLASSNAME_STRING: string;
    MSG_CONTAINERITEMID_REQUIRED: string;
    MSG_CONTAINERITEMID_STRING: string;
    MSG_PAGENAME_REQUIRED: string;
    MSG_PAGENAME_STRING: string;
    MSG_INSIGHTID_REQUIRED: string;
    MSG_DASHBOARDID_REQUIRED: string;
    MSG_ACTIVE_SUGGESTION_UNATTENDED: string;
    /**
     * Returns should delete case in create stage or not
     * @param {boolean} isFormContextDirty - boolean flag for form dirty.
     * @param {boolean} isFirstAssignment - boolean flag for first assignment.
     * @param {boolean} isCoexistenceUIKITApp - boolean flag for uikit app.
     * @returns {boolean} Returns true If the assignment is in create stage, first assignment and context is not dirty
     * @function
     * @private
     */
    shouldDeleteCaseInCreateStage: (isFormContextDirty: boolean, isFirstAssignment: boolean, isCoexistenceUIKITApp: boolean) => boolean;
    /**
     * Returns payload for SAVE_AND_CLOSE action
     * @param {string} containerItemID - Id of the container item.
     *
     * For example: "app/modal_1"
     * @param {boolean} saveOnly - Optional parameter which determines whether to only save the assignment.
     * @returns {object} Payload required for SAVE_AND_CLOSE action
     * @function
     * @private
     */
    getSaveActionPayload: (containerItemID: string, saveOnly?: boolean) => object;
    /**
     * Create a promise for an actionsApi action and return an object containing the promise
     * and the ActionManager actionMgrID associated with that promise
     * @param {string} theActionType the action type for which we're creating a promise
     * @param {object} actionConfig the payload of the action being registered
     * @param {boolean} enableLoadingIndicator if true (the default), call the IsLoadingManager's enableLoadingIndicator
     * while registering the promise with the ActionManager. If false, do not call enableLoadingIndicator
     * @returns {object} object with actionMgrID and promise keys: { actionMgrID: <theID>, promise: <thePromise> }
     * @function
     * @private
     */
    actionsApiPromise: (theActionType: string, actionConfig?: actionObject, enableLoadingIndicator?: boolean) => {
        actionMgrID: string;
        promise: Promise<object>;
    };
    /**
     * Displays the create view of a data object to be created.
     * <br>
     *
     * @example <caption>Example for showDataObjectCreateView()</caption>
     * Example usage -
     * getPConnect().getActionsApi().showDataObjectCreateView('OZR2SN-ReactApp-Data-Person', 'Create').then(() => {
     *  // showDataObjectCreateView success handling
     * }).catch(() => {
     *  // showDataObjectCreateView failure handling
     * })
     *
     * @param {string} className The name of the class that provides the type that the data object should belong to.
     *
     * @param {string} viewName (Optional) The name of the create view that is to be displayed for the data object.
     *
     * @returns {Promise<object>} A Promise associated with the action.
     * <br><br>
     */
    showDataObjectCreateView(className: string, viewName?: string): Promise<object>;
    /**
     * Cancels creation of data object by showing cancel alert popup in case any changes were made.
     * If no changes were made it removes the container item in which create view of DataType is loaded
     * <br>
     *
     * @example <caption>Usage example</caption>
     * In this example, the success callback is called if the creation of the data object is canceled.
     * const cancelCreateDataObjectPromise = getPConnect().getActionsApi().cancelDataObject("app/modal_3");
     * cancelCreateDataObjectPromise.then(() => {
     *  // cancel creation of data object success handling
     * }).catch(() => {
     *  // cancel creation of data object failure handling
     * });
     *
     * @param {string} containerItemID The ID of the container item containing the create view of the data object.
     * <br><br>
     * @returns {Promise<object>} A Promise associated with the action.
     *
     */
    cancelDataObject(containerItemID: string): Promise<object> | object;
    /**
     * Creates a data object whose create view is loaded in the specified container item.
     * <br>
     *
     * @example <caption>In this example, the success callback is called if the data object is created.</caption>
     *
     * const createDataObjectPromise = getPConnect().getActionsApi().createDataObject("app/modal_3");
     * createDataObjectPromise.then(() => {
     *  // create data object success handling
     * }).catch(() => {
     *  // create data object failure handling
     * });
     *
     * @param {string} containerItemID The ID of the container item containing the create view of the data object.
     * <br><br>
     * @returns {Promise<object>} A Promise associated with the action.
     *
     */
    createDataObject(containerItemID: string): Promise<object>;
    /**
     * Deletes data object of specific type with object containing primary keys
     * <br>
     *
     * @example <caption>In this example, the success callback is called if the data object is deleted.</caption>
     *
     * getPConnect().getActionsApi().deleteDataObject('OEDUS1-ReactApp-Data-Person', { pyGUID: '3ba585e8-f3e2-4404-8a15-692992de53b4' }).then(() => {
     *  // deleteDataObject success handling
     * }).catch(() => {
     *  // deleteDataObject failure handling
     * });
     *
     * @param {string} className The name of the class that provides the type that the data object should belong to.
     *
     * @param {string} keys Object of the primary keys with values for the data object.
     *
     * @returns {Promise<object>} A Promise associated with the action.
     */
    deleteDataObject(className: string, keys: string): Promise<object>;
    /**
     * Displays the edit view of a data object to be updated.
     * <br>
     *
     * @example <caption>Example for getDataObjectView()</caption>
     * Example usage -
     * getPConnect().getActionsApi().getDataObjectView('OZR2SN-ReactApp-Data-Person', {pyGUID: "61a8e531-afcb-41f7-bd72-9809e1a3cbe9"}).then(() => {
     *  // getDataObjectView success handling
     * }).catch(() => {
     *  // getDataObjectView failure handling
     * })
     *
     * @param {string} className The name of the class that provides the type that the data object should belong to.
     * @param {object} keyProperties The object which contains the key properties of the dataObject
     * @param {object} options - (Optional) Javascript object contains the view information
     * @param {string} options.viewName (Optional) The name of the edit view that is to be displayed for the data object.
     *
     * @returns {Promise<object>} A Promise associated with the action.
     */
    getDataObjectView(className: string, keyProperties: {
        [key: string]: object;
    }, options?: {
        viewName: string;
    }): Promise<object>;
    /**
     * Updates a data object whose edit view is loaded in the specified container item.
     * <br>
     *
     * @example <caption>Example for updateDataObject()</caption>
     * Example usage -
     * const updateDataObjectPromise = getPConnect().getActionsApi().updateDataObject("app/modal_3", {pyGUID:"61a8e531-afcb-41f7-bd72-9809e1a3cbe9"});
     * updateDataObjectPromise.then(() => {
     *    updateDataObject success handling
     * }).catch(() => {
     *    updateDataObject failure handling
     * });
     *
     * @param {string} containerItemID The ID of the container item containing the edot view of the data object.
     * Example: "app/modal_3"
     * @param {string} keys The keys of the dataRecord to be updated
     * Example: {pyGUID:"b1715d32-7d7b-4d41-97ce-ced87b7c8fb0"}
     * @returns {Promise<object>} A Promise associated with the action.
     *
     */
    updateDataObject(containerItemID: string, keys: {
        [key: string]: any;
    }): Promise<object>;
    /**
     *
     * Creates a work object for the given <strong>className</strong> and displays the assignment.
     *
     * @example <caption>Example for createWork()</caption>
     * Example usage -
     *  const options = {
     *   flowType: "pyStartCase",
     *   containerName: "primary",
     *   startingFields: {
     *    FirstName: "Adam",
     *    LastName: "Smith",
     *    Vehicle: {
     *      Make: "Honda",
     *      Model: "Accord"
     *    }
     *  }
     * };
     *  const createWorkPromise = getPConnect().getActionsApi().createWork("OPB1HW-SpaceTra-Work-RequestApproval", options); <br>
     * createWorkPromise.then(() => {
     *   // create work success handling
     * }).catch(() => {
     *   // create work failure handling
     * });
     *
     * <br>
     * @param {string} className - Name of the case class
     * @param {object} options   - Javascript object contains the flowType, and containerName information
     * in the creation of the work object.
     * @param {string} options.flowType      Flow type
     * @param {string} options.containerName Name of the containter
     * @param {boolean} options.openCaseViewAfterCreate - The flag that determines if we can auto-navigate to new case view
     * or stay on the same page upon case creation.
     * Note:
     * - The default value is true.
     * - Set openCaseViewAfterCreate to true if we can auto-navigate to the new case view upon case creation.
     * - Set openCaseViewAfterCreate to false if we shouldn't navigate to the new case view and stay on the same page upon case creation.
     * @param {object} options.modalOptions - JavaScript object that contains the properties required to customize the modal display.
     * @param {boolean} options.modalOptions.dockable - The flag that determines where the modal is positioned in the screen.
     * Note:
     * - The default value is false
     * - Set dockable to true if the modal should be displayed at the bottom right corner of the screen.
     * - Set dockable to false if the modal should be displayed at the center of the screen.
     *
     * <br><br>
     * @param {object} options.startingFields - Optional, object containing fields to be set while creating a case
     * @param {string} options.channelName (Optional) Channel name
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    createWork(className: string, options?: {
        flowType: string;
        containerName: string;
        openCaseViewAfterCreate: boolean;
        modalOptions: {
            dockable: boolean;
        };
        startingFields: object;
        channelName: string;
    }): Promise<object>;
    /**
     * Open the work object associated with the given workID
     * <br>
     *
     * @example <caption>Example for openWorkByHandle()</caption>
     * Example usage -
     * const openWorkPromise = getPConnect().getActionsApi().openWorkByHandle("OPB1HW-SPACETRA-WORK RA-10001", "OPB1HW-SpaceTra-Work-RequestApproval"); <br>
     * openWorkPromise.then(() => {
     *  // open work by handle success handling
     * }).catch(() => {
     *  // open work by handle failure handling
     * });
     *
     * <br>
     * // The success callback is called if the work object is opened successfully.
     *
     * @param {string} workID The work object to be opened<br>
     * Example: "OPB1HW-SPACETRA-WORK RA-10001"<br><br>
     *
     * @param {string} className Name of the case class<br>
     * Example: "OPB1HW-SpaceTra-Work-RequestApproval"
     * <br><br>
     * @param {object} options - The JavaScript object that contains the properties required for opening the work object. <br>
     * @param {string} options.targetContainer The name of the container that the work object will be opened in.
     * @param {string} options.channelName (Optional) Channel name
     *
     * <br><br>
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     *
     */
    openWorkByHandle(workID: string, className: string, options?: {
        targetContainer?: string;
        channelName?: string;
    }): Promise<object>;
    /**
     * Open the given assignment and associated with the given container target
     * <br>
     * @example <caption>Example for openAssignment()</caption>
     * Example usage -
     * const openAssignmentPromise = getPConnect().getActionsApi().openAssignment(
     *      "ASSIGN-WORKLIST OPB1HW-SPACETRA-WORK RA-43001!REQUEST_FLOW_0",
     *      "OPB1HW-SpaceTra-Work-RequestApproval",
     *      { containerName: "primary" }
     *  ); <br>
     * openAssignmentPromise.then(() => {
     *  // open assignment success handling
     * }).catch(() => {
     *  // open assignment failure handling
     * });
     *
     * <br>
     * // The success callback is called if the assignment is opened successfully.
     *
     * @param {string} assignmentID - The ID of the assignment to be opened.<br>
     * Example: "ASSIGN-WORKLIST OPB1HW-SPACETRA-WORK RA-43001!REQUEST_FLOW_0"
     * <br><br>
     * @param {string} className - Name of the case class<br>
     * Example: "OPB1HW-SpaceTra-Work-RequestApproval"
     * <br><br>
     * @param {object} options - Javascript object containing containerName <br>
     * @param {string} options.containerName Name of the container
     * @param {string} options.channelName (Optional) Channel name
     *
     * <br>
     * Example:<br>
     * { containerName: "primary" }
     * <br><br>
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    openAssignment(assignmentID: string, className: string, options?: {
        isActionFromToDoList: any;
        isChild: any;
        context: any;
        viewType: any;
        skipBrowserSemanticUrlUpdate: any;
        containerName: string;
        channelName: string;
    }): Promise<object>;
    /**
     * Finish the assignment (from the component's <strong>caseData.ID</strong>) that is
     * associated with the given case (from the component's <strong>caseData.caseID</strong>) and
     * the given Flow Container ID.
     *
     * <br>
     * @example <caption>Example for finishAssignment()</caption>
     * Example usage -
     * const finishAssignmentPromise = getPConnect().getActionsApi().finishAssignment("app/primary_1/workarea_1"); <br>
     * finishAssignmentPromise.then(() => {
     *  // finish assignment success handling
     * }).catch(() => {
     *  // finish assignment failure handling
     * });
     *
     * <br>
     * // The success callback is called if the assignment is submitted successfully.
     *
     * @param {string} containerItemID - Id of the container <br>
     * For example: "app/primary_1/workarea_1"
     * @param {object} options - The Javascript object that contains optional properties that provide additional information for submitting the assignment
     * For example: "{"outcomeID": 'Book a Hotel'}"
     * @param {string} options.outcomeID - The ID generated for an outcome of the assignment that must be submitted.
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    finishAssignment(containerItemID: string, options?: {
        isTriggeredFromDifferentContext?: boolean;
        outcomeID: string;
    }): Promise<object>;
    /**
     * Open the next urgent assignment for the user
     * <br>
     * @example <caption>Example for getNextWork()</caption>
     * Example usage -
     * const getNextWorkPromise = getPConnect().getActionsApi().getNextWork()
     *  <br>
     * getNextWorkPromise.then(() => {
     *  // open Next Work success handling
     * }).catch(() => {
     *  // open Next Work failure handling
     * });
     *
     * <br>
     * // The success callback is called if the next Work is opened successfully.
     *
     * <br>
     * Example:<br>
     * { containerName: "primary" }
     * <br><br>
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    getNextWork(): Promise<object>;
    /**
     * Open's the stage associated with the case using the stageID.
     *
     * <br>
     * @example <caption>Example for openStage()</caption>
     * Example usage -
     * const openStagePromise = getPConnect().getActionsApi().openStage("PRIM3"); <br>
     * openStagePromise.then(() => {
     *  // open stage success handling
     * }).catch(() => {
     *  // open stage failure handling
     * });
     *
     * <br>
     * // The success callback is called if the assignment is submitted successfully.
     *
     * @param {string} stageID - Id of the Stage <br>
     * For example: "PRIM3"
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    openStage(stageID: string): Promise<object>;
    submitBulkAction(containerItemID: string | string[]): Promise<object>;
    openBulkAction(actionID: string, options: {
        type?: string;
        target?: string;
        name?: string;
        selectedList?: any;
    }): Promise<object>;
    cancelBulkAction(containerItemID: string): Promise<object>;
    /**
     * This API performs the approval action for the approval step configured in a case.
     * <br>
     * @example <caption>Example for approveCase()</caption>
     * Example usage -
     * const approveCasePromise = getPConnect().getActionsApi().approveCase("app/primary_1/workarea_1"); <br>
     * approveCasePromise.then(() => {
     *  // approve case success handling
     * }).catch(() => {
     *  // approve case failure handling
     * });
     *
     * <br>
     * // The success callback is called if the approve case action is successfully.
     *
     * @param {string} containerItemID - Id of the container <br>
     * For example: "app/primary_1/workarea_1"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    approveCase(containerItemID: string): Promise<object>;
    /**
     * This API performs the reject action for the approval step configured in a case.
     * <br>
     * @example <caption>Example for rejectCase()</caption>
     * Example usage -
     * const rejectCasePromise = getPConnect().getActionsApi().rejectCase("app/primary_1/workarea_1"); <br>
     * rejectCasePromise.then(() => {
     *  // reject case success handling
     * }).catch(() => {
     *  // reject case failure handling
     * });
     *
     * <br>
     *
     * // The success callback is called if the reject case action is successfully.
     *
     * @param {string} containerItemID  Id of the container<br>
     * For example: "app/primary_7/workarea_1"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    rejectCase(containerItemID: string): Promise<object>;
    /**
     * This API performs the resolve duplicate action for the search duplicate cases automation step configured in a case.
     * <br>
     * @example <caption>Example for resolveDuplicateCase()</caption>
     * Example usage - In this example, the API performs the resolve duplicate action for the search duplicate cases automation
     * step configured in the app/primary_1/workarea_1 container.
     * const resolveDuplicateCasePromise = getPConnect().getActionsApi().resolveDuplicateCase("app/primary_1/workarea_1"); <br>
     * resolveDuplicateCasePromise.then(() => {
     *  // resolve duplicate case success handling
     * }).catch(() => {
     *  // resolve duplicate case failure handling
     * });
     *
     * <br>
     * // The success callback is called if the resolve duplicate case action is successful.
     *
     * @param {string} containerItemID - The ID of the container item that provides the current context of the case <br>
     * For example: "app/primary_1/workarea_1"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    resolveDuplicateCase(containerItemID: string): Promise<object>;
    /**
     * This API performs the ignore duplicate action for the search duplicate cases automation step configured in a case.
     * <br>
     * @example <caption>Example for ignoreDuplicateCase()</caption>
     * Example usage - In this example, the API performs the ignore duplicate action for the search duplicate
     * cases automation step configured in the app/primary_1/workarea_1 container
     * const ignoreDuplicateCasePromise = getPConnect().getActionsApi().ignoreDuplicateCase("app/primary_1/workarea_1"); <br>
     * ignoreDuplicateCasePromise.then(() => {
     *  // ignore duplicate case success handling
     * }).catch(() => {
     *  // ignore duplicate case failure handling
     * });
     *
     * <br>
     * // The success callback is called if the ignore duplicate case action is successful.
     *
     * @param {string} containerItemID - The ID of the container item that provides the current context of the case <br>
     * For example: "app/primary_1/workarea_1"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    ignoreDuplicateCase(containerItemID: string): Promise<object>;
    /**
     * Opens the local action configure as Case Wide, Stage Wide or Assignment level.
     *
     * <br>
     * @example <caption>Example for openLocalAction()</caption>
     * Example usage -
     * const localActionPromise = getPConnect().getActionsApi().openLocalAction("EditDetails", { type : "Case" }); <br>
     * localActionPromise.then(() => {
     *  // local action success handling
     * }).catch(() => {
     *  // local action failure handling
     * });
     *
     * <br>
     * // The success callback is called if the local action is launched successfully.
     *
     * @param { string } actionID  - Id of the local action
     * Example: "EditDetails"
     * <br>
     * @param {object} options - Javascript object containing caseID, assignmentID, actionTitle and type properties necessary for opening local action <br>
     *
     * @param {string} [options.caseID] - Id of the case pointing to pzInsKey value. Will be used if provided else will get it using current context <br>
     * @param {string} [options.assignKey] - Id of the assignment. Will be used if provided else will get it using current context <br>
     * @param {string} [options.actionTitle] - Title of the local action. Used as modal header title when local action is displayed in modal dialog <br>
     * @param {string} [options.containerName] - is used to launch the local action in a modal or in workarea<br>
     * @param {string} [options.name] - name of the local action<br>
     * @param {string} [options.type] - Type of the local action, Type can be "Assignment" or "Case" or "Stage" or "Express"<br>
     * @param {Array} [options.refreshConditions] - refreshConditions should be an array of objects containing the field name and event.
     * Assignment, Stage and Case are the scopes that determine whether it is a Casewide local action or stagewide local action or assignment level local action. <br>
     * Express type is used when we need to call the local actions from the different context<br>
     * <br>
     * Example:<br>
     {
     *    "name": "Edit Details",
     *     "type": “stage,
     *     "containerName": "modal"
     * },
     * {
     *      "name": "Transfer assignment",
     *      "type": “Assignment,
     *      "containerName": "modal"
     *  },
     *  {
     *      "name": "Change stage",
     *      "type": “Case,
     *      "containerName": “workarea”
     *  },
     *  {
     *      "name": "Transfer assignment",
     *      "type": “express”,
     *      "containerName": “workarea”
     *      “assignKey”:”ASSIGN-WORKLIST ON8TTL-C11NGALL-WORK D-206014!VEHICLEDETAILS_FLOW”
     *      “caseID”:”"ON8TTL-C11NGALL-WORK D-206014”
     *      "refreshConditions": [{field: ".Prop1", event: "Changes"}]
     *  },
     * {
     *    caseID: "ORG-MYAPP-WORK W-102",
     *    assignmentID: "",
     *    actionTitle: "Edit Details",
     *    type: "Assignment" / "Case" / "Stage" / "Express"
     * }
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    openLocalAction(actionID: string, options: {
        target: any;
        caseID?: string;
        assignKey?: string;
        actionTitle?: string;
        containerName?: string;
        name?: string;
        type?: string;
        refreshConditions?: any[];
    }): Promise<object>;
    /**
     * Opens the process action that is configured.
     * <br>
     * @example <caption>Example for openProcessAction()</caption>
     * Example usage -
     * const processActionPromise = getPConnect().getActionsApi().openProcessAction("VendorAddition_Flow", { type: "Case" }); <br>
     * processActionPromise.then(() => {
     *  // open process action success handling
     * }).catch(() => {
     *  // open process action failure handling
     * });
     *
     * <br>
     * // The success callback is called if the process action is launched successfully.
     *
     * @param { string } actionID - Action Id <br>
     * Example: "VendorAddition_Flow"
     * <br>
     * @param {object} options - Javascript object containing container target in which the process action will be shown <br>
     * @param {string} [options.caseID] - Id of the case pointing to pzInsKey value. Will be used if provided else will get it using current context <br>
     * @param {string} [options.actionTitle] - Title of the local action. Used as modal header title when local action is displayed in modal dialog <br>
     * @param {string} options.type - Type of the process action. Type can be "Case" or "Stage" <br>
     *
     * <br>
     * Example:<br>
     * {
     *    caseID: "ORG-MYAPP-WORK W-102",
     *    actionTitle: "Vendor Addition",
     *    type: "Case" / "Stage"
     * }
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    openProcessAction(actionID: string, options: {
        assignKey: any;
        target: any;
        name: any;
        caseID?: string;
        actionTitle?: string;
        type: string;
    }): Promise<object>;
    /**
     * Navigate to the given step in the context of the given container
     * <br>
     *
     * @example <caption>Example for navigateToStep()</caption>
     * Example usage -
     * navigateToStepPromise = getPConnect().getActionsApi().navigateToStep("Step1", "app/primary_1/workarea_1"); <br>
     * navigateToStepPromise.then(() = > {
     *  // navigate to step success handling
     * }).catch(() => {
     *  // navigate to step failure handling
     * });
     *
     * <br>
     * // The success callback is called if the action is successful.
     *
     * @param {string} stepID - ID of the step or "previous" to go to previous step <br>
     * For example: "Step1", "previous"
     * @param {string} containerItemID - Id of the container item <br>
     * For example: "app/primary_1/workarea_1"
     *
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    navigateToStep(stepID: string, containerItemID: string): Promise<object>;
    /**
     * Cancel the assignment that is associated with the current component's
     * caseID (from <strong>caseData.caseID</strong>).
     *
     * <br><br>
     * This action will also perform necessary actions related to the cancellation (e.g., release any locks). <br><br>
     *
     * @example <caption>Example for cancelAssignment()</caption>
     * Example usage -
     * const cancelAssignmentPromise = getPConnect().getActionsApi().cancelAssignment("app/primary_1/workarea_1"); <br>
     * cancelAssignmentPromise.then(() => {
     *  // cancel assignment success handling
     * }).catch(() => {
     *  // cancel assignment failure handling
     * });
     *
     * <br>
     * // The success callback is called if the API is executed successfully.
     *
     * @param {string} containerItemID - Id of the container item <br>
     * For example: "app/primary_1/workarea_1"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    cancelAssignment(containerItemID: string): Promise<object>;
    /**
     * Cancel the local action that is associated with the current component's
     * caseID (from <strong>caseData.caseID</strong>).
     *
     * <br><br>
     *
     * There are different usecases the way this action works when the Edit Action and Local Actions are launched. <br>
     * <ol>
     * <li>
     * If Edit Action or local Action is launched, form is not dirty and action is fired from modal dialog.
     *     The case will be deleted by calling deleteCaseInCreateStage API.
     * </li>
     * <li>
     * If Edit Action or local Action is launched and the form is dirty and action is fired from modal dialog, then an event EVENT_SHOW_CANCEL_ALERT is dispatched.
     *     This EVENT_CANCEL_ALERT is used to show an alert dialog. An alert dailog with a message and 2 buttons is shown.
     *     (Go back and Discard) is shown.
     * </li>
     * </ul>
     *
     * @example <caption>Example for cancelLocalAction()</caption>
     * Example usage -
     * const cancelLocalAction = getPConnect().getActionsApi().cancelLocalAction("app/modal_3"); <br>
     * cancelLocalAction.then(() => {
     *  // cancel create stage assignment success handling
     * }).catch(() => {
     *  // cancel create stage assignment failure handling
     * });
     *
     * <br>
     * // The success callback is called if the API is executed successfully.
     *
     * @param {string} containerItemID - Id of the container item <br>
     * <br><br>
     *
     * For example: "app/modal_3"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    cancelLocalAction(containerItemID: string): Promise<object> | object;
    /**
     * Cancel the assignment that is associated with the current component's
     * caseID (from <strong>caseData.caseID</strong>).
     *
     * <br><br>
     *
     * There are different usecases the way this action works when the assignment is in create stage. <br>
     * <ol>
     * <li>
     * If the current assignment is first assignment in create stage, form is not dirty and action is fired from modal dialog.
     *     The case will be deleted by calling deleteCaseInCreateStage API.
     * </li>
     * <li>
     * If the current assignment is in create stage and the form is dirty and action is fired from modal dialog, then an event EVENT_SHOW_CANCEL_ALERT is dispatched.
     *     This EVENT_SHOW_CANCEL_ALERT is used to show an alert dialog. An alert dailog with a message and 2 buttons is shown.
     *     (Go back and Discard) is shown.
     * </li>
     * </ul>
     *
     * @example <caption>Example for cancelCreateStageAssignment()</caption>
     * Example usage -
     * const cancelCreateStageAssignmentPromise = getPConnect().getActionsApi().cancelCreateStageAssignment("app/modal_3"); <br>
     * cancelCreateStageAssignmentPromise.then(() => {
     *  // cancel create stage assignment success handling
     * }).catch(() => {
     *  // cancel create stage assignment failure handling
     * });
     *
     * <br>
     * // The success callback is called if the API is executed successfully.
     *
     * @param {string} containerItemID - Id of the container item <br>
     * <br><br>
     *
     * For example: "app/modal_3"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    cancelCreateStageAssignment(containerItemID: string): Promise<object>;
    /**
     * Saves the opened assignment.
     *
     * @example <caption>Usage example</caption>
     * In this example, the success callback is called if the opened assignment is saved successfully.
     *
     * const saveAssignmentPromise = getPConnect().getActionsApi().saveAssignment("app/modal_1");
     * saveAssignmentPromise.then(() => {
     *  // saveAssignment success handling
     * }).catch(() => {
     *  // saveAssignment failure handling
     * });
     *
     * <br>
     *
     * @param {string} containerItemID - The ID of the container item that contains information about the opened assignment. <br>
     * <br><br>
     * Example: "app/modal_1"
     * @returns {Promise<object>} A Promise associated with the action.
     */
    saveAssignment(containerItemID: string): Promise<object>;
    /**
     * Save the current work object opened in the modal dialog.
     *
     * @example <caption>Example for saveAndClose()</caption>
     * Example usage -
     * const saveAndClosePromise = getPConnect().getActionsApi().saveAndClose("app/modal_1"); <br>
     * saveAndClosePromise.then(() => {
     *  // save and close success handling
     * }).catch(() => {
     *  // save and close failure handling
     * });
     *
     * <br>
     * // The success callback is called if the case is saved successfully.
     *
     * @param {string} containerItemID - Id of the container item <br>
     * <br><br>
     * For example: "app/modal_1"
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    saveAndClose(containerItemID: string): Promise<object>;
    /**
     * Deletes the case that is currently in the create stage.
     * <br>
     * @example <caption>Usage example</caption>
     * In this example, the success callback is called if the case that is currently in the create stage is deleted successfully.
     *
     * const deleteCaseInCreateStagePromise = getPConnect().getActionsApi().deleteCaseInCreateStage("app/modal_1"); <br>
     * deleteCaseInCreateStagePromise.then(() => {
     *  // delete case in create stage success handling
     * }).catch(() => {
     *  // delete case in create stage success handling
     * });
     * <br>
     *
     * @param {string} containerItemID - The ID of the container item that contains information about the case that is currently in the create stage.
     * <br><br>
     * Example: "app/modal_1"
     *
     * @param {boolean} ignoreCaseDeletion - The flag that determines if a case will be deleted in the create stage.
     * <br>
     * The default value is false.
     * Set ignoreCaseDeletion to true if the case should not be deleted in the create stage
     * Set ignoreCaseDeletion to false if the case should be deleted in the create stage.
     *
     * @returns {Promise<object>} A Promise associated with the action.
     */
    deleteCaseInCreateStage(containerItemID: string, ignoreCaseDeletion?: boolean): Promise<object>;
    /**
     * Fetches the recent items
     * <br>
     * @example <caption>Example for getRecents()</caption>
     * Example usage -
     * const recentsPromise = getPConnect().getActionsApi().getRecents(15); <br>
     * recentsPromise.then((data) => {
     *  // recents success handling
     * }).catch(() => {
     *  // recents failure handling
     * });
     *
     * <br>
     * // The success callback is called if the API is successful.
     *
     * @param {number} maxResultsToFetch - Maximum number of results to be fetch <br>
     * <br><br>
     * For example: 15
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    getRecents(maxResultsToFetch: number): Promise<object>;
    /**
     * Invoke a Logout REST API using fetch function of the service broker.
     *
     * @example <caption>Example for logout()</caption>
     * Example usage -
     * const logoutPromise = getPConnect().getActionsApi().logout(); <br>
     * logoutPromise.then(() => {
     *   // logout success handling
     * }).catch(() => {
     *   // logout failure handling
     * });
     *
     * <br>
     * //  the callbackFunction is called if the API successfully obtains a logout response.
     *
     * @returns {Promise<object>} A promise for the pre-processed logout response.
     * @private
     */
    logout(): Promise<object>;
    /**
     * Invoke a REST API using fetch function of the service broker.
     *
     * @example <caption>Example for invoke()</caption>
     * Example usage -
     *
     * invokePromise = getPConnect().getActionsApi().invoke(url, options); <br>
     * invokePrmoise.then(() => {
     *   // invoke success handling
     * }).catch(() => {
     *   // invoke failure handling
     * });
     *
     * <br>
     * // invokes the URL with the options provided, and returns a response
     *
     * @param {string} url - The URL for the request.<br><br>
     * Examples of <strong>url</strong> include:
     * <br>/prweb/api/v1/messages?filterFor=DATA-PORTAL $SpaceTra
     * <br>
     * <br>/prweb/api/v1/data/D_pxOperatorDetails?OperatorId=user%40c11ngallery.com
     * @param {object} [opts={}] - The HTTP methods that are used in the request body to fetch the REST API
     * @returns {Promise<object>} A promise for the pre-processed response.
     */
    invoke(url: string, opts?: {
        method?: string;
        body?: object;
    }): Promise<object>;
    /**
     * This API displays a preview of a case item inside the preview panel.
     *
     * @example <caption>Example for showCasePreview()</caption>
     * Example usage - getPConnect().getActionsApi().showCasePreview(pzInsKey, configObj);
     * // Show the preview of a case item(identified by unique key called pzInsKey) inside preview panel with the extra configuration object provided
     *
     * @param {string} pzInsKey - Unique identifier of the case item.<br><br>
     * Examples of <strong>pzInsKey</strong> include:
     * <br>OPB1HW-SPACETRA-WORK 20RA-2
     * @param {object} configObj - Optional, object containing extra infomation like case class name which might be required.
     *
     */
    showCasePreview(pzInsKey: string, configObj?: object): void;
    /**
     * This API displays a preview of a data item inside the preview panel.
     *
     * @example <caption>Example for showDataPreview()</caption>
     * Example usage - getPConnect().getActionsApi().showDataPreview(ataContext, dataContextParameters, options);
     * // Show the preview of a data item (identified by dataContext and the dataContextParameters) inside preview panel with the extra configuration object provided
     *
     * @param {string} dataContext - Name of the data context<br><br>
     * Examples of <strong>dataContext</strong> include:
     * <br>D_EmployeeDetails
     * @param {string} dataContextParameters - Parameters required for the data context<br><br>
     * Examples of <strong>dataContextParameters</strong> include:
     * <br>{ pyGUID: "0759409f-4146-439c-aa25-57d4f495fee5" }
     * @param {object} options - Optional, object containing extra infomation like containerName which might be required.
     *
     */
    showDataPreview(dataContext: string, dataContextParameters: string, options?: object): Promise<object>;
    /**
     * This API loads a view with data from server based on the context of a case <br>
     *
     * @example <caption>Example for loadView()</caption>
     * In this example, the API loads the pyReview view with data from a server based on the context of the case whose ID is ON8TTL-C11NGALL-WORK C-7001.
     * Example usage -
     * const loadViewPromise = getPConnect().getActionsApi().loadView(“ON8TTL-C11NGALL-WORK C-7001”,”pyReview”); <br>
     * loadViewPromise.then(() => {
     *   // load view success handling
     * }).catch(() => {
     *   // load view failure handling
     * });
     *
     * <br>
     * @param {string} caseId Unique identifier of the case associated with a context
     * @param {string} viewName Name of the view which must be loadedwith data.
     * @param {object} config Object to pass context and container information
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    loadView(caseId: string, viewName: string, config: object): Promise<object>;
    /**
     *
     * Displays the page of a class.
     *
     * @example <caption>Example for showPage()</caption>
     * Example usage -
     * const showPagePromise = getPConnect().getActionsApi().showPage("pyHome", "Data-Portal"); <br>
     * showPagePromise.then(() => {
     *   // show page success handling
     * }).cath(() => {
     *   // show page failure handling
     * });
     *
     * <br>
     * // obtains and displays the view metadata and class name of a page.
     *
     * @param {string} pageName - Name of the page
     * Some examples:<br><br>
     * page = "pyHome"<br>
     * @param {string} className - Class name to which the page belongs to
     * Some examples:<br><br>
     * className: "Data-Portal"
     * <br><br>
     * @param {object} options - Javascript object containing containerName <br>
     * @param {string} options.containerName Name of the container
     * @param {string} options.skipSemanticUrl - Flag to skip semantic url evaluation logic
     * <br>
     * Example:<br>
     * { containerName: "primary" }
     * <br><br>
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    showPage(pageName: string, className: string, options?: {
        containerName: string;
        skipSemanticUrl: string;
    }): Promise<object>;
    /**
     * This API performs  loading the insight with semantic url.
     * <br>
     * @example <caption>Example for showInsight()</caption>
     * Example usage -
     * const showInsight = getPConnect().getActionsApi().showInsight("sample_insightID"); <br>
     * showInsight.then(() => {
     *  // show insight  success handling
     * }).catch(() => {
     *  // show insight  failure handling
     * });
     *
     * <br>
     * // The success callback is called if the  showInsight action is successfully.
     *
     * @param {string} insightID - Id of the Insight <br>
     * For example: "d68f3f66-5ff3-443d-9ef9-544051fb74a4"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     * @function
     * @private
     */
    showInsight(insightID: string, options?: {
        skipSemanticUrl?: boolean;
    }): Promise<object>;
    /**
     * This API performs  loading the dashboard with semantic url.
     * <br>
     * @example <caption>Example for showDashboard()</caption>
     * Example usage -
     * const showDashboard = getPConnect().getActionsApi().showDashboard("sample_dashboardID"); <br>
     * showDashboard.then(() => {
     *  // show dashboard  success handling
     * }).catch(() => {
     *  // show dashboard  failure handling
     * });
     *
     * <br>
     * // The success callback is called if the  showDashboard action is successfully.
     *
     * @param {string} dashboardID - Id of the dashboard <br>
     * For example: "d68f3f66-5ff3-443d-9ef9-544051fb74a4"
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     * @function
     * @private
     */
    showDashboard(dashboardID: string, options?: {
        skipSemanticUrl?: boolean;
    }): Promise<object>;
    /**
     *
     * Displays the data of a page based on the data context.
     *
     * @example <caption>Example for showData()</caption>
     * Example usage -
     * const showDataPromise = getPConnect().getActionsApi().showData("EmployeeDetails", "D_EmployeeDetails", {pyGUID: "0759409f-4146-439c-aa25-57d4f495fee5"}); <br>
     * showDataPromise.then(() => {
     *   // show data success handling
     * }).cath(() => {
     *   // show data failure handling
     * });
     *
     * <br>
     *
     * @param {string} pageName - The name of the view in which the data must be displayed.
     * @param {string} dataContext - The name of page type data page whose data must be displayed.
     * @param {object} dataContextParameters - The parameters associated with the data page.
     * @param {object} options - The JavaScript object containing the properties to display the data.<br>
     * @param {string} options.containerName - The name of the container that displays the data.
     * @param {string} options.skipSemanticUrl - The flag that determines if the semantic URL evaluation logic must be skipped.
     * <br>
     * * Note:
     * - The default value is false
     * - If the value is false, the semantic URL evaluation logic will not be skipped.
     * - If the value is true, the semantic URL evaluation logic will be skipped.
     *
     * <br><br>
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    showData(pageName: string, dataContext: string, dataContextParameters: object, options?: {
        containerName: string;
        skipSemanticUrl: boolean;
    }): Promise<object>;
    /**
     * Run a changeHandler for the given component context of the component through the Action Processor
     *
     * @example <caption>Example for changeHandler()</caption>
     * Example usage - getPConnect().getActionsApi().changeHandler(pConnObject, event);
     * // handles the change event triggered by the UI component.
     *
     * @param {object} pConn PConnect object associated with handler being run
     * @param {object} event The Document Object Model (DOM)event object associated with the change
     */
    changeHandler(pConn: Component, event: Event): void;
    /**
     * Run an eventHandler for the given component context of the component through the Action Processor
     *
     * @example <caption>Example for eventHandler()</caption>
     * Example usage - getPConnect().getActionsApi().eventHandler(pConnObject, event);
     * // handles the event triggered by the UI component.
     *
     * @param {object} pConn PConnect object associated with handler being registered
     * @param {object} event The Document Object Model (DOM)eventobject associated with the event.
     */
    eventHandler(pConn: object, event: Event): void;
    /**
     * This API runs validations on the control and triggers FIELD_CHANGE event
     * so that ChangeObserver can listen for it.
     *
     * @example <caption>Example for triggerFieldChange()</caption>
     * Example usage - getPConnect().getActionsApi().triggerFieldChange(propName, value, skipValidation);
     * // the API validates and invokes the FIELD_CHANGE event as triggered by the specified control.
     *
     * @param {string} propName name of the control on which the FIELD_CHANGE event must be invoked
     * @param {any} value value of the control that will be validated and passed when invoking the FIELD_CHANGE event
     * @param {boolean} skipValidation true/false value stating if client side validation needs to run or not
     */
    triggerFieldChange(propName: string, value: any, skipValidation?: boolean): void;
    /**
     * This API dispatches the SET_PROPERTY event on a specified control to store a specified value in the Redux Store.
     * This API also deletes the error messages of the control by calling the clearMessages API in the MessageManager module.
     *
     * @example <caption>Example for updateFieldValue()</caption>
     * Example usage - getPConnect().getActionsApi().updateFieldValue(propName, value);
     * // the API stores the value passed in the Redux Store as triggered by the control.
     *
     * @param {string} propName name of the control whose value must be stored in the Redux Store
     * @param {any} value value of the control to be stored in the Redux Store
     * @param {object} options - Javascript object containing removePropertyFromChangedList, isArrayDeepMerge details
     * @param {boolean} options.removePropertyFromChangedList - removePropertyFromChangedList - pass true to delete entry in changedPropertyList
     * @param {boolean} options.isArrayDeepMerge - flag to decide whether to deep merge the objects or values inside array or not
     * @param {boolean} options.skipDirtyValidation - flag to decide whether the property has to considered in Dirty Validation. Default is false. If passed as true Dirty Validation will be skipped on the respected property.
     * @param {boolean} options.isListEntry - removePropertyFromChangedList - pass true to delete entry in the List
     */
    updateFieldValue(propName: string, value: any, options?: {
        removePropertyFromChangedList?: boolean;
        isArrayDeepMerge?: boolean;
        skipDirtyValidation?: boolean;
        isListEntry?: boolean;
        contextPageReference?: object | null;
    }): void;
    /**
     * Activates the modal container item of the passed container item id
     * <br>
     * @example <caption>Example for activateModalContainerItem()</caption>
     * Example usage - getPConnect().activateModalContainerItem({
     *   context: "app/primary_1",
     *   isModalAction: true
     * }).then(successCallback);
     *
     * // The success callback is called if the case is deleted successfully.
     *
     *
     * @param {object} actionInfo - Javascript object containing container properties like context and isModalAction<br>
     * Example:<br>
     * {
     *   context: "app/primary_1",
     *   isModalAction: true
     * }
     *
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     *
     * @function
     * @private
     */
    activateModalContainerItem(actionInfo: {
        context: string;
    }): Promise<object>;
    refreshCaseView(caseID: string, viewID: string, pageReference: string, options?: ActionAPIOptions): Promise<object>;
    /**
     * Displays the view to add/update a record in Embedded data type.
     * <br>
     *
     * @example <caption>Example for openEmbeddedDataModal()</caption>
     * In this example, the success callback is called if the modal is opened successfully
     * getPConnect().getActionsApi().openEmbeddedDataModal('Create', pConnObject, '.Employees', 1, 'CREATE').then(() => {
     *  // openEmbeddedDataModal success handling
     * }).catch(() => {
     *  // openEmbeddedDataModal failure handling
     * })
     *
     * @param {string} viewName The name of the view
     * @param {Object} component PConnect object associated with the Embedded data table
     * @param {string} targetProperty The property associated to Embedded data
     * @param {number} index The index of the new row
     * @param {string} action CREATE/EDIT action
     * @returns {Promise<object>} A Promise associated with the action.
     * <br><br>
     */
    openEmbeddedDataModal(viewName: string, component: Component, targetProperty: string, index: number, action: string): Promise<object>;
    /**
   * Submits the view and add/update a record to Embedded data type.
   * <br>
   *
   * @example <caption>Example for submitEmbeddedDataModal()</caption>
   * In this example, the success callback is called if a row is added/edited successfully
   * getPConnect().getActionsApi().submitEmbeddedDataModal('app/modal_3').then(() => {
   *  // submitEmbeddedDataModal success handling
   * }).catch(() => {
   *  // submitEmbeddedDataModal failure handling
   * })
   *
  @param {string} containerItemID - The ID of the container item containing the add/edit view of the Embedded data type.
   * @returns {Promise<object>} A Promise associated with the action.
   * <br><br>
   */
    submitEmbeddedDataModal(containerItemID: string): Promise<object>;
    /**
     * Fill the assignment form for the user with logical sample data based on the name and type of field using AI
     * <br>
     * @example <caption>Example for fillFormWithAI()</caption>
     * Example usage -
     * const fillFormWithAIPromise = getPConnect().getActionsApi().fillForWithAI('app/primary_1/workarea_1')
     *  <br>
     * fillFormWithAIPromise.then(() => {
     *  // fillFormWithAI success handling
     * }).catch(() => {
     *  // fillFormWithAI failure handling
     * });
     *
     * <br>
     * // The success callback is called if the form is filled successfully using fillFormWithAI
     *
     * <br>
     * @param {string} containerItemID - ID of the container <br>
     * For example: "app/primary_1/workarea_1"
     * <br><br>
     * @returns {Promise<object>} A promise associated with the action (and stored in ActionManager)
     */
    fillFormWithAI(containerItemID: string): Promise<object>;
}
export default ActionsApi;
