/**
 * The <strong>Action Manager</strong> object provides access to methods
 * that are used by Actions (ex: as found in Actions-Api or ContainerManager)
 * to track promises that are returned by the action.
 */
declare class ActionManager {
    /**
     * Constructor - <strong>Not for use outside of Core! Included for reference only.</strong>
     */
    constructor();
    /**
     * Returns a unique (for this session) actionMgrId that should
     * be provided in the payload to StateManager.dispatch so the
     * ActionManager can use it
     * @returns {number} the next actionMgrID
     * @private
     */
    getNextActionMgrId(): any;
    /**
     * Registers the given Promise with the given actionMgrID
     * @param {object} theActionMgrID the actionMgrID that is associated with the given Promise
     * @param {object} thePromise the Promise associated with the given actionMgrID
     * @param {Function} theResolve the function called when the promise resolves
     * @param {Function} theReject the function called when the promise rejects
     * @param {string} theActionType the type of action associated with this Promise
     * @param {object} actionConfig the action config which has the context information
     * @param {boolean} enableLoadingIndicator a boolean flag which tells if the actions need a loading indicator or not
     * @returns {string} returns the registered ID if register succeeded or null if it failed (ex: ID already been used)
     * @private
     */
    register(theActionMgrID: string, thePromise: Promise<any>, theResolve: any, theReject: any, theActionType?: string, actionConfig?: any, enableLoadingIndicator?: boolean): string;
    /**
     * Create a promise for an action and return an object containing the promise
     * and the ActionManager actionMgrID associated with that promise
     * @param {string} theActionType the action type for which we're creating a promise
     * @param {string} theActionMgrID (optional) the Action Manager ID associated with the promise. If provided,
     * the given ID is used when then promise is registered with the ActionManager. If not provided, we get the
     * ID and use the ID we get.
     * @returns {object} object with actionMgrID and promise keys: { actionMgrID: <theID>, promise: <thePromise> }
     * @function
     */
    actionManagerPromise: (theActionType: any, theActionMgrID?: any) => {
        actionMgrID: any;
        promise: Promise<unknown>;
    };
    /**
     * resolve the promise associated with the given ID
     * @param {string} theActionMgrID the ID of the Action Manager entry that should be resolved
     * @param {string} data metadata info about the view
     * @param {boolean} allowDispatch flag that dictates if Reset_Loading redux action should be dispatched or not
     * @returns {string} returns the resolved ID if resolve was called or null if problem was encountered
     * @private
     */
    resolveActionByID(theActionMgrID: any, data?: any, allowDispatch?: boolean): any;
    /**
     * reject the promise associated with the given ID
     * @param {string} theActionMgrID the ID of the Action Manager entry that should be resolved
     * @returns {string} returns the rejected ID if reject was called or null if problem was encountered
     * @param {boolean} allowDispatch flag that dictates if Reset_Loading redux action should be dispatched or not
     * @param {object} error that gives the type of information about the error
     * @private
     */
    rejectActionByID(theActionMgrID: any, allowDispatch?: boolean, error?: any): any;
}
declare const ActionManagerInstance: ActionManager;
export { ActionManagerInstance };
