export declare const addPageInstructionReferences: (contextName: any, reference: any) => void;
/**
 * This function helps in retrieving the reference lists for the context passed
 * @param {*} contextName - context name - e.g. app/primary_1
 * @returns {object} page instructions
 */
export declare const getPageInstructionReferences: (contextName: any) => any;
/**
 * This function helps in clearing the reference lists for the context passed
 * @param {*} contextName - context name - e.g. app/primary_1
 * @returns {void}
 */
export declare const clearPageInstructionReferences: (contextName: any) => void;
/**
 * This function sets isVisible flag for target related  pageInstructions
 * @param {*} c11nEnv - c11Env object
 * @param {boolean} isVisible - isVisible flag
 * @returns {void}
 */
export declare const setVisibility: (c11nEnv: any, isVisible?: boolean) => void;
/**
 * This function helps in retrieving the instruction for the context passed
 * @param {*} contextName - context name - e.g. app/primary_1
 * @returns {array} page instructions
 */
export declare const getInstructions: (contextName: any) => any[];
/**
 * This function helps in retrieving the changed instruction for the context passed
 * @param {*} contextName - context name - e.g. app/primary_1
 * @returns {object} page instructions
 */
export declare const getChangedInstructions: (contextName: any) => any[];
/**
 * This function helps in clearing the instruction for the context passed
 * @param {*} contextName - context name - e.g. app/primary_1
 * @returns {void}
 */
export declare const clearInstructions: (contextName: any) => void;
export declare const isPropertyDirtyPageInstruction: (context: string) => boolean;
export declare const initDefaultPageInstructions: (c11nEnv: any, property: any, propertyNames: any, uniqueField: any) => void;
export declare const replacePage: (c11nEnv: any, property: any, payload: any) => void;
/**
 * merge page instructions from one context to another context
 *@param {string} fromContext- context name
 *@param {string} toContext- context name
 *@param {string} pageReference- page reference
 *@param {boolean} skipStateUpdate- flag to skip updating redux state
 * @returns {void}
 */
export declare const mergeInstructions: (fromContext: any, toContext: any, pageReference: any, skipStateUpdate: any) => void;
/**
 * This function helps in providing entry point to get list action api's
 * @param {*} c11nEnv - c11Env object
 */
export declare const listActions: (c11nEnv: any) => {
    insert: (payload: any, index: any, pageRef: any, options?: {}) => void;
    update: (payload: any, index: any, options: any) => void;
    updateProperty: (propertyName: string, value: string, options?: any) => void;
    deleteEntry: (index: any, pageRef: any) => void;
    reorder: (fromIndex: any, toIndex: any) => void;
    setSelectedRows: (payload: any, options?: {}) => Promise<unknown>;
    getSelectedRows: (withPayload?: boolean) => Promise<any>;
    clearSelectedRows: () => Promise<unknown>;
    setVisibility: (isVisible: any) => void;
    initDefaultPageInstructions: (property: any, propertyNames: any, uniqueField: any) => void;
    deleteAll: (property: any) => void;
    replacePage: (property: any, payload: any) => void;
};
