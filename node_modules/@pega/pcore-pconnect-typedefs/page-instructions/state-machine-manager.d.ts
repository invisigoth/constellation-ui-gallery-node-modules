declare class StateMachineManager {
    constructor();
    getStateMachine(context: any, pageReference: any, target: any): any;
    isStateMachineExist(context: any, pageReference: any, target: any): boolean;
    getUnConnectedStateMachines(context: any): any;
    setStateMachine(context: any, target: any, pageReference: any, stateMachine: any): void;
    buildPageInstructionsByContext(context: any, isOnlyChanged: any): any[];
    buildClientChangeList(context: any): {};
    getStateMachinesByContext(context: any): any;
    clearStateMachines(context: any): void;
    removeStateMachine(context: any, target: any): void;
    getStateMachineObjByPath(stateMachineTarget: any, context: any, processList: any): {
        stateMachineTarget?: undefined;
        stateMachine?: undefined;
        index?: undefined;
    } | {
        stateMachineTarget: any;
        stateMachine: any;
        index: any;
    };
    executeStateMachine(context: any, propertyPath: any, value: any, processList?: boolean, options?: {}): boolean;
    /**
     * This will help us to subscribe a callback when pageList property is update in the redux because of server changes.
     * @private
     */
    registerForServerChanges(): void;
    /**
     * This will help us to un-subscribe all the existing callbacks.
     * @private
     */
    unRegisterForServerChanges(): void;
}
declare const _default: StateMachineManager;
export default _default;
