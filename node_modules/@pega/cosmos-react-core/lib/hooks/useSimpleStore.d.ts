type Listener<T> = (state: T) => void;
type SetStateArg<T> = ((currentState: T) => T) | T;
export interface SimpleStore<T> {
    readonly subscribe: (listener: Listener<T>) => void;
    readonly unsubscribe: (listener: Listener<T>) => void;
    readonly getStore: () => T;
    readonly setStore: (arg: SetStateArg<T>) => T;
}
export declare const createSimpleStore: <T extends Record<string, unknown>>(initialStore: T) => SimpleStore<T>;
declare function useSimpleStore<T extends Record<string, unknown>>(store: SimpleStore<T>): [T, SimpleStore<T>['setStore']];
declare function useSimpleStore<T extends Record<string, unknown>, U = T>(store: SimpleStore<T>, selector: (store: T) => U, eqFn?: (prev: U, next: U) => boolean): [U, SimpleStore<T>['setStore']];
export default useSimpleStore;
//# sourceMappingURL=useSimpleStore.d.ts.map