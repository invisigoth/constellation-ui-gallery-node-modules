{"version":3,"file":"useSimpleStore.js","sourceRoot":"","sources":["../../src/hooks/useSimpleStore.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAY5C,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,YAAe,EACC,EAAE;IAClB,IAAI,YAAY,GAAG,YAAY,CAAC;IAChC,MAAM,SAAS,GAAG,IAAI,GAAG,EAAe,CAAC;IAEzC,OAAO;QACL,SAAS,EAAE,QAAQ,CAAC,EAAE;YACpB,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC;QACD,WAAW,EAAE,QAAQ,CAAC,EAAE;YACtB,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;QACD,QAAQ,EAAE,GAAG,EAAE,CAAC,YAAY;QAC5B,QAAQ,EAAE,CAAC,GAAmB,EAAE,EAAE;YAChC,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;gBAC7B,YAAY,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC;aAClC;iBAAM;gBACL,YAAY,GAAG,GAAG,CAAC;aACpB;YAED,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;YACtD,OAAO,YAAY,CAAC;QACtB,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAYF,oDAAoD;AACpD,SAAS,cAAc,CACrB,KAAqB,EACrB,WAAgC,GAAG,CAAC,EAAE,CAAC,GAAG,EAC1C,OAA8C,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;IAC3D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;QAAE,OAAO,IAAI,KAAK,IAAI,CAAC;IAEvE,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;QAAE,OAAO,KAAK,CAAC;IAE9C,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC;IAED,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAErE,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,QAAQ,GAAgB,QAAQ,CAAC,EAAE;YACvC,QAAQ,CAAC,aAAa,CAAC,EAAE;gBACvB,MAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAErC,OAAO,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC;YACpE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE1B,OAAO,GAAG,EAAE;YACV,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAU,CAAC;AAC1C,CAAC;AAED,eAAe,cAAc,CAAC","sourcesContent":["import { useEffect, useState } from 'react';\n\ntype Listener<T> = (state: T) => void;\ntype SetStateArg<T> = ((currentState: T) => T) | T;\n\nexport interface SimpleStore<T> {\n  readonly subscribe: (listener: Listener<T>) => void;\n  readonly unsubscribe: (listener: Listener<T>) => void;\n  readonly getStore: () => T;\n  readonly setStore: (arg: SetStateArg<T>) => T;\n}\n\nexport const createSimpleStore = <T extends Record<string, unknown>>(\n  initialStore: T\n): SimpleStore<T> => {\n  let currentStore = initialStore;\n  const listeners = new Set<Listener<T>>();\n\n  return {\n    subscribe: listener => {\n      listeners.add(listener);\n    },\n    unsubscribe: listener => {\n      listeners.delete(listener);\n    },\n    getStore: () => currentStore,\n    setStore: (arg: SetStateArg<T>) => {\n      if (typeof arg === 'function') {\n        currentStore = arg(currentStore);\n      } else {\n        currentStore = arg;\n      }\n\n      listeners.forEach(listener => listener(currentStore));\n      return currentStore;\n    }\n  };\n};\n\nfunction useSimpleStore<T extends Record<string, unknown>>(\n  store: SimpleStore<T>\n): [T, SimpleStore<T>['setStore']];\n\nfunction useSimpleStore<T extends Record<string, unknown>, U = T>(\n  store: SimpleStore<T>,\n  selector: (store: T) => U,\n  eqFn?: (prev: U, next: U) => boolean\n): [U, SimpleStore<T>['setStore']];\n\n// A hook to \"connect\" local state to a shared store\nfunction useSimpleStore<T extends Record<string, unknown>, U = T>(\n  store: SimpleStore<T>,\n  selector: (store: T) => U | T = val => val,\n  eqFn: (prev: U | T, next: U | T) => boolean = (prev, next) => {\n    if (!Array.isArray(prev) || !Array.isArray(next)) return prev === next;\n\n    if (prev.length !== next.length) return false;\n\n    return prev.every((value, i) => value === next[i]);\n  }\n) {\n  const [state, setState] = useState(() => selector(store.getStore()));\n\n  useEffect(() => {\n    const listener: Listener<T> = newState => {\n      setState(previousState => {\n        const nextState = selector(newState);\n\n        return eqFn(previousState, nextState) ? previousState : nextState;\n      });\n    };\n\n    store.subscribe(listener);\n\n    return () => {\n      store.unsubscribe(listener);\n    };\n  }, []);\n\n  return [state, store.setStore] as const;\n}\n\nexport default useSimpleStore;\n"]}