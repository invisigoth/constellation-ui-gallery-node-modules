import { useEffect, useState } from 'react';
export const createSimpleStore = (initialStore) => {
    let currentStore = initialStore;
    const listeners = new Set();
    return {
        subscribe: listener => {
            listeners.add(listener);
        },
        unsubscribe: listener => {
            listeners.delete(listener);
        },
        getStore: () => currentStore,
        setStore: (arg) => {
            if (typeof arg === 'function') {
                currentStore = arg(currentStore);
            }
            else {
                currentStore = arg;
            }
            listeners.forEach(listener => listener(currentStore));
            return currentStore;
        }
    };
};
// A hook to "connect" local state to a shared store
function useSimpleStore(store, selector = val => val, eqFn = (prev, next) => {
    if (!Array.isArray(prev) || !Array.isArray(next))
        return prev === next;
    if (prev.length !== next.length)
        return false;
    return prev.every((value, i) => value === next[i]);
}) {
    const [state, setState] = useState(() => selector(store.getStore()));
    useEffect(() => {
        const listener = newState => {
            setState(previousState => {
                const nextState = selector(newState);
                return eqFn(previousState, nextState) ? previousState : nextState;
            });
        };
        store.subscribe(listener);
        return () => {
            store.unsubscribe(listener);
        };
    }, []);
    return [state, store.setStore];
}
export default useSimpleStore;
//# sourceMappingURL=useSimpleStore.js.map