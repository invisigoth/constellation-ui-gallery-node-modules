{"version":3,"file":"Tree.js","sourceRoot":"","sources":["../../../src/components/Tree/Tree.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAkD,MAAM,OAAO,CAAC;AACnF,OAAO,MAAM,MAAM,mBAAmB,CAAC;AA8BvC,MAAM,CAAC,MAAM,kBAAkB,GAAG,MAAM,CAAC,EAAE,CAAA,EAAE,CAAC;AAE9C,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAAC,EAAE,CAAA;;;;;;;IAOnC,kBAAkB;;;CAGrB,CAAC;AAEF,MAAM,mBAAmB,GAA8B,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;IAC3E,OAAO,CACL,8BACG,IAAI,EACJ,OAAO,IACP,CACJ,CAAC;AACJ,CAAC,CAAC;AAaF,IAAI,QAAsC,CAAC;AAE3C,MAAM,QAAQ,GAAG,CAAC,EAChB,aAAa,EACb,KAAK,EACL,KAAK,EACL,YAAY,EAAE,YAAY,EAC1B,GAAG,SAAS,EACE,EAAE,EAAE;IAClB,OAAO,CACL,KAAC,kBAAkB,OAAK,aAAa,YACnC,KAAC,YAAY,OACP,SAAS,EACb,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,KAAK,IAAI,KAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,YAAY,GAAI,GAC1F,GACiB,CACtB,CAAC;AACJ,CAAC,CAAC;AAEF,QAAQ,GAAG,UAAU,CAAC,SAAS,gBAAgB,CAC7C,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,SAAS,EAAkC,EAC5E,GAAsB;IAEtB,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1D,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CACxB,KAAC,cAAc,OAAK,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,YAC1E,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CACjB,eAAC,QAAQ,OACH,IAAI,EACR,GAAG,EAAE,IAAI,CAAC,EAAE,EACZ,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,YAAY,EAC1B,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAC,GACa,CAClB,CAAC,CAAC,CAAC,IAAI,CAAC;AACX,CAAC,CAAC,CAAC;AAEH,MAAM,IAAI,GAAG,UAAU,CAAC,SAAS,IAAI,CACnC,EAAE,YAAY,GAAG,mBAAmB,EAAE,GAAG,SAAS,EAA8B,EAChF,GAAqB;IAErB,OAAO,KAAC,QAAQ,OAAK,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,YAAY,GAAI,CAAC;AACrF,CAAC,CAA8F,CAAC;AAEhG,eAAe,IAAI,CAAC","sourcesContent":["import { forwardRef, PropsWithoutRef, Ref, ComponentType, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { BaseProps, NoChildrenProp, ForwardProps, OmitStrict } from '../../types';\n\nexport type TreeNode = {\n  /** The id of the Node. Used as the key for the li element wrapping the Node. */\n  id: string;\n  /** Child nodes. */\n  nodes?: TreeNode[];\n  /** Props to apply to the li. */\n  listItemProps?: ForwardProps;\n\n  [key: string]: unknown;\n};\n\nexport interface TreeProps<T extends TreeNode = TreeNode> extends BaseProps, NoChildrenProp {\n  /** An array of ParentNodes and Nodes that compose the layout of the Tree. */\n  nodes: T[];\n  /** A function that allows custom styling and behavior for all Nodes. */\n  nodeRenderer?: ComponentType<\n    {\n      depth: number;\n      subTree?: ReactNode;\n      hasParentSibling: TreeItemProps['hasParentSibling'];\n    } & OmitStrict<T, 'listItemProps'>\n  >;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLUListElement>;\n}\n\nexport const StyledTreeListItem = styled.li``;\n\nexport const StyledTreeList = styled.ul`\n  &,\n  & & {\n    list-style: none;\n    position: relative;\n  }\n\n  ${StyledTreeListItem} {\n    position: relative;\n  }\n`;\n\nconst DefaultNodeRenderer: TreeProps['nodeRenderer'] = ({ data, subTree }) => {\n  return (\n    <>\n      {data}\n      {subTree}\n    </>\n  );\n};\n\ninterface TreeItemProps extends TreeNode {\n  nodeRenderer: NonNullable<TreeProps['nodeRenderer']>;\n  depth: number;\n  hasParentSibling: boolean;\n}\n\ninterface TreeListProps extends Pick<TreeProps, 'nodes' | 'ref'> {\n  nodeRenderer: NonNullable<TreeProps['nodeRenderer']>;\n  depth: number;\n}\n\nlet TreeList: ComponentType<TreeListProps>;\n\nconst TreeItem = ({\n  listItemProps,\n  depth,\n  nodes,\n  nodeRenderer: NodeRenderer,\n  ...restProps\n}: TreeItemProps) => {\n  return (\n    <StyledTreeListItem {...listItemProps}>\n      <NodeRenderer\n        {...restProps}\n        depth={depth}\n        nodes={nodes}\n        subTree={nodes && <TreeList depth={depth + 1} nodes={nodes} nodeRenderer={NodeRenderer} />}\n      />\n    </StyledTreeListItem>\n  );\n};\n\nTreeList = forwardRef(function TreeListFunction(\n  { nodes, depth, nodeRenderer, ...restProps }: PropsWithoutRef<TreeListProps>,\n  ref?: TreeProps['ref']\n) {\n  const hasParentSibling = nodes.some(node => !!node.nodes);\n  return nodes.length > 0 ? (\n    <StyledTreeList {...restProps} ref={ref} role={depth === 0 ? 'tree' : 'group'}>\n      {nodes.map(node => (\n        <TreeItem\n          {...node}\n          key={node.id}\n          depth={depth}\n          nodeRenderer={nodeRenderer}\n          hasParentSibling={hasParentSibling}\n        />\n      ))}\n    </StyledTreeList>\n  ) : null;\n});\n\nconst Tree = forwardRef(function Tree(\n  { nodeRenderer = DefaultNodeRenderer, ...restProps }: PropsWithoutRef<TreeProps>,\n  ref: TreeProps['ref']\n) {\n  return <TreeList {...restProps} ref={ref} depth={0} nodeRenderer={nodeRenderer} />;\n}) as <T extends TreeNode = TreeNode>(props: TreeProps<T> & ForwardProps) => JSX.Element | null;\n\nexport default Tree;\n"]}