import type { TreeNode } from './Tree';
declare const helpers: {
    getNode<T extends TreeNode = TreeNode>(nodes: T[], id: T["id"]): T | undefined;
    getParentNode<T_1 extends TreeNode = TreeNode>(nodes: T_1[], id: T_1["id"]): T_1 | undefined;
    mapTree<T1 extends TreeNode = TreeNode, T2 extends TreeNode = T1>(nodes: T1[], fn: (node: T1, index: number, nodes: T1[]) => T2): T2[];
    forEachNode<T_2 extends TreeNode = TreeNode>(nodes: T_2[], fn: (node: T_2, index: number, nodes: T_2[]) => void): void;
    mapNode<T1_1 extends TreeNode = TreeNode, T2_1 extends TreeNode = T1_1>(nodes: T1_1[], id: T1_1["id"], fn: (node: T1_1, index: number, array: T1_1[]) => T2_1): (T1_1 | T2_1)[];
    flatten<T_3 extends TreeNode = TreeNode>(nodes: T_3[], ancestors?: T_3[] | undefined): (T_3 & {
        ancestors?: T_3[] | undefined;
    })[];
    getAncestors<T_4 extends TreeNode = TreeNode>(nodes: T_4[], id: T_4["id"], ancestors?: T_4[]): T_4[];
    appendTo<T_5 extends TreeNode = TreeNode>(nodes: T_5[], id: T_5["id"], newNodes: T_5[]): T_5[];
    expandTo<T_6 extends TreeNode = TreeNode>(nodes: T_6[], id: T_6["id"], collapseOthers?: boolean): T_6[];
    getFirstChildNode<T_7 extends TreeNode = TreeNode>(nodes: T_7[], id: T_7["id"]): T_7 | undefined;
    getAdjacentNode<T_8 extends TreeNode = TreeNode>(nodes: T_8[], id: T_8["id"]): T_8 | undefined;
    getNextNode<T_9 extends TreeNode = TreeNode>(nodes: T_9[], id: T_9["id"]): T_9 | undefined;
    getDeepestNode<T_10 extends TreeNode = TreeNode>(nodes: T_10[], id: T_10["id"]): T_10 | undefined;
    getPreviousNode<T_11 extends TreeNode = TreeNode>(nodes: T_11[], id: T_11["id"]): T_11 | undefined;
};
export default helpers;
//# sourceMappingURL=helpers.d.ts.map