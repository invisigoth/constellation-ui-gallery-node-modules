import type { MouseEvent, KeyboardEvent } from 'react';
import type { Action, PropsWithDefaults } from '../../types';
import type { TreeProps, TreeNode } from './Tree';
export interface StandardTreeNode extends TreeNode {
    /** A set of nested tree nodes. */
    nodes?: StandardTreeNode[];
    /** The display text of the tree node. */
    label: string;
    /** The name of the Cosmos Icon to render as a visual, next to the label. */
    icon?: string;
    /**
     * If true, the node's children will be displayed.
     * @default false
     */
    expanded?: boolean;
    /**
     * If true, the node will render a loading indicator in place of any children.
     * @default false
     */
    loading?: boolean;
    /** A set of actions attached to the node. */
    actions?: Action[];
    /** Click handler for the tree node. */
    onClick?: (id: TreeNode['id'], e: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void;
    /** URL or DOM id to navigate to. This will render the tree node as a link. */
    href?: string;
}
export interface StandardTreeProps extends TreeProps<StandardTreeNode> {
    /** The id of the currently active tree node. */
    currentNodeId?: TreeNode['id'];
    /**
     * If true, a vertical line will render alongside nested nodes.
     * @default false
     */
    lined?: boolean;
    /** Callback function for click events on tree nodes. This will only be called on parent nodes if selectableParents is true. It will always be called on leaf nodes. */
    onNodeClick?: (id: TreeNode['id'], e: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void;
    /** Callback function for toggling tree nodes between expanded/collapsed states. This is only ever called on parent nodes. */
    onNodeToggle?: (id: TreeNode['id'], e?: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void;
    /**
     * If true, parent tree nodes can be selected independently from being toggled expanded/collapsed.
     * @default true
     */
    selectableParents?: boolean;
}
export interface StandardTreeContextProps extends StandardTreeProps {
    firstNodeId?: TreeNode['id'];
    lastNodeId?: TreeNode['id'];
    focusedNodeId?: TreeNode['id'];
    changeFocusedNodeId: (id: TreeNode['id'], type?: 'up' | 'down' | 'left' | 'right') => void;
}
export type StandardTreePropsWithDefaults = PropsWithDefaults<StandardTreeContextProps, 'lined'>;
//# sourceMappingURL=StandardTree.types.d.ts.map