import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { transparentize } from 'polished';
import * as warnSolidIcon from '../Icon/icons/warn-solid.icon';
import Icon, { registerIcon } from '../Icon';
import { useConsolidatedRef, useElement, useI18n } from '../../hooks';
import Tooltip from '../Tooltip';
import { defaultThemeProp } from '../../theme';
import { tryCatch } from '../../utils';
import { StyledCount } from '../Badges/Count';
import BareButton from '../Button/BareButton';
registerIcon(warnSolidIcon);
const activeStyle = (color) => css `
  ::after {
    display: block;
    background-color: ${color};
  }
`;
const StyledErrorIcon = styled(Icon)(({ theme }) => css `
    color: ${theme.base.palette.urgent};
  `);
StyledErrorIcon.defaultProps = defaultThemeProp;
const getHorizontalStyles = ({ selected, theme }) => {
    const primaryColor = theme.base.palette.interactive;
    const lightenedColor = tryCatch(() => transparentize(0.3, primaryColor)) ?? '';
    const { spacing } = theme.base;
    return css `
    align-items: center;
    display: flex;
    flex-direction: row;
    height: calc(4 * ${spacing});
    padding: 0 calc(2 * ${spacing});
    border: none;
    text-decoration: none;

    span:first-of-type {
      color: ${selected ? primaryColor : theme.base.palette['foreground-color']};
      display: inline-block;

      ::before {
        content: attr(data-content);
        display: block;
        font-weight: bold;
        height: 0;
        overflow: hidden;
        visibility: hidden;
      }
    }

    &:first-child {
      margin-left: 0;
    }

    ::after {
      background: ${selected ? primaryColor : lightenedColor};
      display: ${selected ? 'block' : 'none'};
      content: '';
      position: absolute;
      height: 0.125rem;
      bottom: 0;
      left: 0;
      right: 0;
    }

    &:hover&:not(:disabled) {
      ${activeStyle(lightenedColor)}
      text-decoration: none;
    }

    &:focus,
    &:not([disabled]):focus {
      ${activeStyle(lightenedColor)}
      box-shadow: ${theme.base.shadow['focus-inset']};
      text-decoration: none;
    }

    ${StyledCount} {
      margin-inline-start: calc(0.5 * ${spacing});
    }
  `;
};
const getVerticalStyles = ({ selected, theme }) => {
    const borderColor = theme.base.palette['border-line'];
    const primaryColor = theme.base.palette.interactive;
    const lightenedColor = tryCatch(() => transparentize(0.5, primaryColor)) ?? '';
    const { spacing } = theme.base;
    return css `
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-style: solid;
    color: ${theme.base.palette['foreground-color']};
    border-width: 0.0625rem 0;
    border-color: ${borderColor};
    height: calc(5.5 * ${spacing});
    margin-top: -0.0625rem;
    padding: 0 calc(2 * ${spacing});
    text-decoration: none;

    &:first-child {
      border-top: 0.0625rem solid ${borderColor};
    }

    ::after {
      content: '';
      position: absolute;
      display: ${selected ? 'block' : 'none'};
      top: 0;
      bottom: 0;
      right: 0;
      width: 0.25rem;
      background: ${primaryColor};
    }

    &:hover&:not(:disabled) {
      ${activeStyle(lightenedColor)}
      text-decoration: none;
    }

    &:focus,
    &:not([disabled]):focus {
      ${activeStyle(primaryColor)}
      box-shadow: inset 0 0 0 0.0625rem ${primaryColor};
      text-decoration: none;
    }
  `;
};
export const StyledTab = styled(BareButton)(({ theme, tabType, selected }) => css `
    position: relative;
    background: none;
    cursor: pointer;
    white-space: nowrap;

    ${selected &&
    css `
      font-weight: bold;
    `}

    & + & {
      margin-inline-start: 0;
    }

    &:focus {
      outline: none;
    }

    &:disabled {
      cursor: not-allowed;
      opacity: ${theme.base['disabled-opacity']};
    }

    ${tabType === 'horizontal'
    ? getHorizontalStyles({ theme, selected })
    : getVerticalStyles({ theme, selected })}

    ${StyledErrorIcon} {
      margin-inline-end: calc(0.5 * ${theme.base.spacing});
    }
  `);
StyledTab.defaultProps = defaultThemeProp;
const Tab = forwardRef(function Tab({ selected, content, count, type, disabled, errors, ...restProps }, ref) {
    const t = useI18n();
    const [tabEl, setTabEl] = useElement();
    const tabRef = useConsolidatedRef(ref, setTabEl);
    return (_jsxs(StyledTab, { ref: tabRef, selected: selected, tabType: type, disabled: disabled, ...restProps, children: [_jsxs("span", { children: [!!errors && (_jsxs(_Fragment, { children: [_jsx(StyledErrorIcon, { name: 'warn-solid' }), _jsx(Tooltip, { target: tabEl, hideDelay: 'none', showDelay: 'none', children: t('tab_error_tooltip', [content]) })] })), _jsx("span", { "data-content": content, children: content })] }), count] }));
});
export default Tab;
//# sourceMappingURL=Tab.js.map