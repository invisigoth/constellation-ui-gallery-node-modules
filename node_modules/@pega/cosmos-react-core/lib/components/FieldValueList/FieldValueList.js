import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import Grid from '../Grid';
import { StyledLabel } from '../Label';
import { useBreakpoint, useConsolidatedRef, useTestIds } from '../../hooks';
import { defaultThemeProp } from '../../theme';
import ShowMoreLess from '../ShowMoreLess';
import { withTestIds } from '../../utils';
import NoValue from '../NoValue/NoValue';
import { getFieldValueListTestIds, getFieldValueItemTestIds } from './FieldValueList.test-ids';
export const StyledFieldName = styled.dt `
  word-break: break-word;
`;
export const StyledFieldValue = styled.dd `
  word-break: break-word;
`;
export const StyledFieldValueList = styled.dl(({ variant, theme }) => {
    return css `
    width: 100%;

    ${variant === 'value-comparison' &&
        css `
      dt {
        width: 100%;
      }
      dd {
        text-align: end;
        padding-inline-start: calc(2 * ${theme.base.spacing});
      }
      ${StyledLabel} {
        max-width: unset;
      }
      dd:not(:last-of-type),
      dt:not(:last-of-type) {
        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};
        padding-bottom: calc(0.5 * ${theme.base.spacing});
      }
    `}
  `;
});
StyledFieldValueList.defaultProps = defaultThemeProp;
export const StyledStackedFieldValue = styled.div ``;
export const FieldValueItem = withTestIds(({ testId, name, value, variant = 'inline' }) => {
    const testIds = useTestIds(testId, getFieldValueItemTestIds);
    const displayValue = typeof value === 'string' ? _jsx(ShowMoreLess, { lines: 3, children: value }) : value;
    const labelAndValue = (_jsxs(_Fragment, { children: [_jsx(StyledLabel, { "data-testid": testIds.name, as: StyledFieldName, children: name }), _jsx(StyledFieldValue, { "data-testid": testIds.value, children: value ? displayValue : _jsx(NoValue, {}) })] }));
    return variant === 'stacked' ? (_jsx(StyledStackedFieldValue, { "data-testid": testIds.root, children: labelAndValue })) : (_jsx(_Fragment, { children: labelAndValue }));
}, getFieldValueItemTestIds);
const FieldValueList = forwardRef(function FieldValueList({ testId, fields, variant = 'inline', ...restProps }, ref) {
    const testIds = useTestIds(testId, getFieldValueListTestIds);
    const fieldValueListRef = useConsolidatedRef(ref);
    const isXSContentWidthOrAbove = useBreakpoint('xs', {
        breakpointRef: fieldValueListRef,
        themeProp: 'content-width'
    });
    return (_jsx(Grid, { "data-testid": testIds.root, ...restProps, ref: fieldValueListRef, container: {
            cols: ['inline', 'value-comparison'].includes(variant) && isXSContentWidthOrAbove
                ? '16ch minmax(0, 1fr)'
                : 'minmax(0, 1fr)',
            colGap: variant !== 'value-comparison' ? 2 : 0,
            rowGap: variant !== 'value-comparison' ? 1 : 0.5
        }, as: StyledFieldValueList, variant: variant, children: fields.map(({ id, name, value, variant: fieldVariant }) => {
            return (_jsx(FieldValueItem, { name: name, value: value, variant: (fieldVariant ?? variant) === 'stacked' || !isXSContentWidthOrAbove
                    ? 'stacked'
                    : 'inline' }, id ?? name));
        }) }));
});
export default withTestIds(FieldValueList, getFieldValueListTestIds);
//# sourceMappingURL=FieldValueList.js.map