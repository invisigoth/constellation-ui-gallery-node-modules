{"version":3,"file":"ListToolbar.types.js","sourceRoot":"","sources":["../../../src/components/ListToolbar/ListToolbar.types.ts"],"names":[],"mappings":"","sourcesContent":["import { MouseEvent, Ref, ComponentType, ReactNode } from 'react';\n\nimport { FormControlProps } from '@pega/cosmos-react-core/lib/components/FormControl';\n\nimport { SearchInputProps } from '../SearchInput';\nimport { MenuGroupProps, MenuProps } from '../Menu';\nimport { Action, BaseProps, ExcludeStrict, HeadingTag, TestIdProp } from '../../types';\nimport { AvatarProps } from '../Avatar';\n\nexport interface ViewProps {\n  /** Unique, stable identifier of this view. */\n  id: string;\n  /** Label text of this view. */\n  text: string;\n  /** Flag indicating whether this view is currently selected. */\n  selected: boolean;\n  /** A count to assist with number of associated items. */\n  count?: number;\n  /** A visual to assist identifying an item. */\n  visual?: Pick<AvatarProps, 'name' | 'icon' | 'imageSrc' | 'status'>;\n}\n\nexport interface ViewGroupProps {\n  /** Label text of the group. */\n  text: MenuGroupProps['label'];\n  /** Array of items belonging to the group. */\n  items: ViewProps[];\n}\n\nexport interface ViewSelectorProps {\n  /** A list of pre-defined data views. */\n  views: (ViewProps | ViewGroupProps)[];\n  /** Called when a view is selected. */\n  onViewSelect: MenuProps['onItemClick'];\n  /** Determines which view is the default. */\n  defaultId?: string;\n  /** Determines which view is the default in the app. */\n  appDefaultId?: string;\n}\n\nexport interface QueryOption {\n  /** A count representing the number of applied conditions within the query option. */\n  count?: number;\n}\n\nexport interface QueryOptionDialogProps extends QueryOption {\n  /** A component to render the content portion of the query option dialog. */\n  renderer: ComponentType;\n  /**\n   * Called when the user explicitly or implicitly cancels(closes) the query dialog.\n   * Returning false will block the dialog from closing.\n   */\n  onCancel: () => boolean | void;\n  /**\n   * Called when the user explicitly applies the query option conditions.\n   * Returning false will block the dialog from closing.\n   */\n  onSubmit: () => boolean | void;\n}\n\n/** Optionally provide query option presets. */\nexport interface PresetMenuProps extends QueryOption {\n  /** Mode defining whether menu selection is single or multi mode. */\n  mode?: ExcludeStrict<MenuProps['mode'], 'action'>;\n  /** Items of the menu. */\n  items: { id: string; text: string; selected: boolean; icon?: string }[];\n  /** Callback invoked on item selection. Passes the item id as an argument. */\n  onItemClick: MenuProps['onItemClick'];\n}\nexport type QueryOptionId = 'filter' | 'sort' | 'group';\n\nexport interface ListToolbarProps extends BaseProps, TestIdProp {\n  /** Renders a simple text name of table */\n  name: string;\n  /**\n   * Uses specific heading tag for header.\n   * @default h3\n   */\n  headingTag?: HeadingTag;\n  /** Renders a simple view heading text or view selection menu. */\n  viewSelector?: ViewSelectorProps;\n  /** Props related to list used as a form control. */\n  formControlProps?: Pick<FormControlProps, 'required'>;\n  /** Props related to new item creation button. */\n  createNew?: {\n    /** Label of the new item creation button. */\n    label?: string;\n    /** Callback that will render a Create new button and is fired when that button is clicked. */\n    onClick: (e: MouseEvent) => void;\n  };\n  /** Props related to the Search Input. */\n  search?: SearchInputProps;\n  /** Total returned results related for a given search. Optional indication of a selected item count. */\n  count?: {\n    total?: number;\n    /**\n     * If true renders + next to total number.\n     * @default false\n     */\n    totalHasMore?: boolean;\n    selected?: number;\n  };\n  /** Additional actions region */\n  additionalActions?: ReactNode;\n  /** Custom Rendering or available presets for filtering. */\n  filter?: QueryOptionDialogProps | PresetMenuProps;\n  /** Custom Rendering or available presets for sorting. */\n  sort?: QueryOptionDialogProps | PresetMenuProps;\n  /** Custom Rendering or available presets for grouping. */\n  group?: QueryOptionDialogProps | PresetMenuProps;\n  /** Top level dataset actions. */\n  actions?: Action[];\n  /** Ref for the actions button element. */\n  actionsButtonRef?: Ref<HTMLButtonElement>;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLDivElement>;\n}\n"]}