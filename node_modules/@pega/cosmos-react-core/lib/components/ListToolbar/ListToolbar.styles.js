import styled, { css } from 'styled-components';
import Flex from '../Flex';
import { StyledSearchInput } from '../SearchInput';
import Text, { StyledText } from '../Text';
import { defaultThemeProp } from '../../theme';
import { calculateFontSize } from '../../styles';
import { StyledButton } from '../Button';
import FormDialog from '../Dialog/FormDialog';
export const StyledSearchForm = styled.div `
  ${StyledSearchInput} {
    flex-grow: 1;
    max-width: min(100%, 40ch);
  }
`;
export const StyledViewSelector = styled.button(({ theme, required }) => {
    const fontSizes = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    const { urgent } = theme.base.palette;
    const hitAreaMouse = theme.base['hit-area']['mouse-min'];
    const hitAreaFinger = theme.base['hit-area']['finger-min'];
    return css `
    flex-shrink: initial;
    white-space: initial;
    ${StyledText} {
      font-size: ${fontSizes[theme.components.text.h3['font-size']]};
      font-weight: ${theme.components.text.h3['font-weight']};
      line-height: ${hitAreaMouse};
      word-break: break-word;
      @media (pointer: coarse) {
        line-height: ${hitAreaFinger};
      }
    }

    ${StyledText}::after {
      display: ${required ? 'inline-block' : 'none'};
      content: '\\00a0*';
      vertical-align: top;
      color: ${urgent};
    }
  `;
});
StyledViewSelector.defaultProps = defaultThemeProp;
export const StyledListToolbar = styled.div ``;
StyledListToolbar.defaultProps = defaultThemeProp;
export const StyledListToolbarDialog = styled(FormDialog)(({ theme }) => {
    return css `
    min-width: min(${theme.base['content-width'].lg}, calc(100% - 2rem));
    max-width: calc(100vw - 4 * ${theme.base.spacing});
  `;
});
StyledListToolbarDialog.defaultProps = defaultThemeProp;
export const StyledListToolbarContent = styled(Flex)(({ theme }) => {
    return css `
    ${StyledButton} + ${StyledButton} {
      margin-inline-start: 0;
    }
    border-radius: calc(0.25 * ${theme.base['border-radius']});
  `;
});
StyledListToolbarContent.defaultProps = defaultThemeProp;
export const StyledHeadingText = styled(Text)(({ theme, required }) => {
    const { urgent } = theme.base.palette;
    const hitAreaMouse = theme.base['hit-area']['mouse-min'];
    const hitAreaFinger = theme.base['hit-area']['finger-min'];
    return css `
    position: relative;
    line-height: ${hitAreaMouse};
    word-break: break-word;
    ${required &&
        css `
      padding-inline-end: calc(1.5 * ${theme.base.spacing});
    `}
    @media (pointer: coarse) {
      line-height: ${hitAreaFinger};
    }
    &::after {
      display: ${required ? 'inline' : 'none'};
      content: '\\00a0*';
      vertical-align: top;
      color: ${urgent};
      position: absolute;
      inset-inline-end: 0;
      inset-block-start: 0;
    }
  `;
});
StyledHeadingText.defaultProps = defaultThemeProp;
export const StyledCountMeta = styled(Text)(({ theme }) => {
    const hitAreaMouse = theme.base['hit-area']['mouse-min'];
    const hitAreaFinger = theme.base['hit-area']['finger-min'];
    return css `
    line-height: ${hitAreaMouse};

    @media (pointer: coarse) {
      line-height: ${hitAreaFinger};
    }
  `;
});
StyledCountMeta.defaultProps = defaultThemeProp;
export const StyledContainer = styled(Flex) `
  @media (pointer: coarse) {
    overflow: hidden;

    ${StyledHeadingText}, ${StyledViewSelector} ${StyledText} {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }
`;
//# sourceMappingURL=ListToolbar.styles.js.map