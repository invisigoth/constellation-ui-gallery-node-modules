import { FunctionComponent, ReactNode, Ref } from 'react';
import { BaseProps, ForwardProps, NoChildrenProp, TestIdProp } from '../../types';
export interface MetaListProps extends BaseProps, NoChildrenProp, TestIdProp {
    /** Array of nodes or text to be rendered in the list. */
    items: ReactNode[];
    /**
     * If true, MetaList items that extend past the MetaList's container will wrap to a new line.
     * @default true
     */
    wrapItems?: boolean;
    /** Ref for the wrapping element. */
    ref?: Ref<HTMLUListElement>;
}
export declare const StyledMetaList: import("styled-components").StyledComponent<"ul", import("styled-components").DefaultTheme, {
    wrapItems: boolean;
}, never>;
export declare const StyledMetaListItem: import("styled-components").StyledComponent<"li", import("styled-components").DefaultTheme, {
    wrapItems: boolean;
}, never>;
declare const _default: FunctionComponent<MetaListProps & ForwardProps> & {
    getTestIds: (testIdProp?: string | undefined) => import("../../types").TestIdsRecord<readonly []>;
};
export default _default;
//# sourceMappingURL=MetaList.d.ts.map