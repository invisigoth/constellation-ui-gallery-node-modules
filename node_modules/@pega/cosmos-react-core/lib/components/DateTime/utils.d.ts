import { TranslationFunction, TranslationPack } from '../../i18n';
import { ExcludeStrict } from '../../types';
import { DateTimeFormat, DateTimeVariant } from './DateTime.types';
import { ClockFormat } from './Input/utils';
type DateTimeFormatOptions = {
    locale: string;
    format: DateTimeFormat;
    timeZone?: string;
    clockFormat?: ClockFormat;
    calendarType?: string;
} & ({
    variant: ExcludeStrict<DateTimeVariant, 'quarteryear'>;
    t?: TranslationFunction<TranslationPack>;
} | {
    variant: 'quarteryear';
    t: TranslationFunction<TranslationPack>;
});
export declare function formatDateTime(value: Date, { t, locale, format, variant, clockFormat, calendarType, timeZone }: DateTimeFormatOptions): string;
interface DurationFormatOptions {
    locale: string;
    significantUnits: 4 | 3 | 2 | 1;
    unitDisplay?: Intl.NumberFormatOptions['unitDisplay'];
}
export declare function formatDuration(valueInMs: number, { locale, significantUnits, unitDisplay }: DurationFormatOptions): string;
/**
 * @returns Current date and time value adjusted for local time zone.
 */
export declare const getAdjustedUTCDateTime: () => Date;
export {};
//# sourceMappingURL=utils.d.ts.map