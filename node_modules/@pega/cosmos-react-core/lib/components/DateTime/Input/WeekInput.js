import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useRef } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../../theme';
import { useConfiguration, useConsolidatedRef, useFocusWithin, useI18n, useOuterEvent, useTestIds } from '../../../hooks';
import { cap, withTestIds } from '../../../utils';
import FormField from '../../FormField';
import Button from '../../Button';
import Icon, { registerIcon } from '../../Icon';
import * as calendarIcon from '../../Icon/icons/calendar.icon';
import Flex from '../../Flex';
import { StyledFormControl } from '../../FormControl';
import DatePicker from '../Picker/DatePicker';
import Dialog from '../../Dialog/Dialog';
import { getWeekInputTestIds } from '../DateTime.test-ids';
import { parseToDate, getWeekYear, getWeek, generatePickerButtonAriaLabel, convertWeekYearToDate } from './utils';
import StyledDateTime, { BareInput, StyledDialogContent, StyledInputContainer } from './DateTime.styles';
import usePickerButton from './usePickerButton';
import PartInput from './PartInput';
import useAutoFocusNextInput from './useAutoFocusNextInput';
registerIcon(calendarIcon);
export const StyledWeekInput = styled(StyledDateTime)(props => {
    const { theme: { base } } = props;
    return css `
    padding-inline-end: 0;

    ${StyledInputContainer} > ${BareInput}:first-of-type {
      margin-inline-start: ${base.spacing};
    }
  `;
});
StyledWeekInput.defaultProps = defaultThemeProp;
const convertToCallbackParameter = (date, parts) => {
    if ([parts.week, parts.year].every(Boolean)) {
        const { year, month, day } = convertWeekYearToDate(parts) ?? {};
        date.setUTCFullYear(Number(year), Number(month), Number(day));
        return {
            valueAsISOString: date.toISOString(),
            valueAsTimestamp: date.getTime()
        };
    }
    if ([parts.week, parts.year].every(p => !p)) {
        return {
            valueAsISOString: undefined,
            valueAsTimestamp: undefined
        };
    }
    return {
        valueAsISOString: '',
        valueAsTimestamp: NaN,
        state: 'incomplete'
    };
};
const WeekInput = forwardRef(function WeekInput(props, ref) {
    const { testId, value, min, max, id, label, labelHidden, status, info, required, readOnly, disabled, onChange, onFocus, onBlur, autoFocus, additionalInfo, ...restProps } = props;
    const testIds = useTestIds(testId, getWeekInputTestIds);
    const { locale } = useConfiguration();
    const t = useI18n();
    const containerRef = useConsolidatedRef(ref);
    const date = value !== undefined ? parseToDate(value) : undefined;
    const [weekInputRef, yearInputRef] = [
        useRef(null),
        useRef(null)
    ];
    useAutoFocusNextInput([weekInputRef, yearInputRef]);
    const pickParts = () => {
        return {
            week: weekInputRef.current?.value || undefined,
            year: yearInputRef.current?.value || undefined
        };
    };
    const currentlySelectedDate = () => {
        const dateParts = convertWeekYearToDate(pickParts());
        if (dateParts) {
            const year = Number(dateParts.year);
            const month = Number(dateParts.month);
            const day = Number(dateParts.day);
            const current = date ?? new Date();
            return new Date(current.setUTCFullYear(year ?? current.getUTCFullYear(), month ?? current.getUTCMonth(), day ?? current.getUTCDate()));
        }
    };
    const inputContainerRef = useRef(null);
    const onFocusChange = (focused) => {
        const callbackParam = convertToCallbackParameter(date ? new Date(date) : new Date(), pickParts());
        if (onFocus && focused)
            onFocus(callbackParam);
        if (!focused) {
            if (inputContainerRef.current)
                inputContainerRef.current.scrollTop = 0;
            onBlur?.(callbackParam);
        }
    };
    const [open, setOpen, , setPopoverRef, buttonEl, setButtonEl] = usePickerButton();
    const onInputChange = () => {
        onChange?.(convertToCallbackParameter(date ? new Date(date) : new Date(), pickParts()));
        buttonEl?.setAttribute('aria-label', generatePickerButtonAriaLabel(currentlySelectedDate(), 'week', locale, t, open));
    };
    // autoclose picker on focusing out
    useOuterEvent('focusin', [containerRef], e => {
        if (containerRef.current?.contains(e.relatedTarget))
            setOpen(false);
    });
    const displayNames = new Intl.DisplayNames(locale, {
        style: 'long',
        type: 'dateTimeField'
    });
    const WeekNumberInput = (_jsx(PartInput, { "data-testid": testIds.controlWeek, placeholder: t('week_placeholder'), "aria-label": displayNames.of('weekOfYear'), value: date ? getWeek(date) : undefined, onChange: onInputChange, size: 2, maxLength: 2, min: 1, max: 53, readOnly: readOnly, ref: weekInputRef, autoFocus: autoFocus }, 'week'));
    const YearInput = (_jsx(PartInput, { "data-testid": testIds.controlYear, placeholder: t('year_placeholder'), "aria-label": displayNames.of('year'), value: date ? getWeekYear(date) : undefined, onChange: onInputChange, size: 4, maxLength: 4, min: 1, readOnly: readOnly, ref: yearInputRef }, 'year'));
    useFocusWithin([containerRef], onFocusChange);
    const Picker = (_jsxs(_Fragment, { children: [_jsx(Button, { "data-testid": testIds.openClosePicker, variant: 'simple', icon: true, ref: setButtonEl, onClick: () => setOpen(cur => !cur), "aria-label": generatePickerButtonAriaLabel(currentlySelectedDate(), 'week', locale, t, open), readOnly: readOnly, disabled: disabled, children: _jsx(Icon, { name: 'calendar' }) }), open && buttonEl && (_jsx(Dialog, { ref: setPopoverRef, target: buttonEl, ariaLabel: t('choose_week'), children: _jsx(Flex, { container: { direction: 'column' }, as: StyledDialogContent, children: _jsx(DatePicker, { testId: testIds.root, selected: currentlySelectedDate(), onChange: selected => {
                            weekInputRef.current.value =
                                (selected && getWeek(selected).toString().padStart(2, '0')) || '';
                            yearInputRef.current.value = (selected && getWeekYear(selected).toString()) || '';
                            setOpen(false);
                            setTimeout(() => buttonEl?.focus());
                            onInputChange();
                        }, min: min, max: max, mode: 'week' }) }) }))] }));
    const Comp = (_jsxs(Flex, { "data-testid": testIds.root, as: StyledWeekInput, forwardedAs: StyledFormControl, container: { alignItems: 'center', wrap: 'nowrap' }, status: status, readOnly: readOnly, disabled: disabled, ref: containerRef, onClick: (e) => {
            if (e.target === containerRef.current)
                weekInputRef.current?.focus();
        }, ...restProps, children: [_jsxs(Flex, { ref: inputContainerRef, as: StyledInputContainer, container: { alignItems: 'center', wrap: 'wrap' }, children: [cap(displayNames.of('weekOfYear')), " ", WeekNumberInput, ",", YearInput] }), !readOnly && Picker] }));
    return label ? (_jsx(FormField, { as: 'fieldset', labelAs: 'legend', ...{
            testId: testIds,
            label,
            labelHidden,
            id,
            info,
            status,
            required,
            disabled,
            additionalInfo
        }, ref: ref, children: Comp })) : (Comp);
});
export default withTestIds(WeekInput, getWeekInputTestIds);
//# sourceMappingURL=WeekInput.js.map