import { FC, Ref, MouseEventHandler, ChangeEvent } from 'react';
import { BaseProps, ForwardProps, NoChildrenProp, TestIdProp } from '../../types';
import { FormFieldProps } from '../FormField';
import { FormControlProps } from '../FormControl';
export interface ColorPickerProps extends BaseProps, NoChildrenProp, TestIdProp {
    /** label for the color picker control */
    label: FormControlProps['label'];
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not passed, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /**
     * Color picker value in hex
     * @default '#000000'
     */
    value?: FormControlProps['value'];
    /**
     * Show color swatch without hex value display.
     * @default false
     */
    swatchOnly?: boolean;
    /** Indicate if the field is required. The browser defaults to false. */
    required?: FormControlProps['required'];
    /** Disable the control. */
    disabled?: FormControlProps['disabled'];
    /** Visually hides the label region. */
    labelHidden?: FormControlProps['labelHidden'];
    /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */
    info?: FormControlProps['info'];
    /** Set visual state based on a validation state. */
    status?: FormControlProps['status'];
    /** Makes the input non editable and non clickable. The browser defaults to false. */
    readOnly?: FormControlProps['readOnly'];
    /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */
    name?: FormControlProps['name'];
    /** Layout field elements inline in a row. */
    inline?: FormFieldProps['inline'];
    /** Button when clicked will show additional information on the color picker */
    additionalInfo?: FormFieldProps['additionalInfo'];
    /** onChange event handler that gets called on change of value. */
    onChange?: ColorChangeHandler;
    /** onBeforeClose of the color picker */
    onBeforeClose?: () => void;
    /** Called when the underlying input element is clicked. This should be rarely if ever used. */
    onClick?: MouseEventHandler<HTMLInputElement>;
    /** Ref placed on the input element. */
    ref?: Ref<HTMLInputElement>;
}
type RGBColor = {
    r: number;
    g: number;
    b: number;
};
type HSLColor = {
    h: number;
    s: number;
    l: number;
};
type ColorResult = {
    hex: string;
    rgb: RGBColor;
    hsl: HSLColor;
};
type ColorChangeHandler = (color: ColorResult, event: ChangeEvent<HTMLInputElement>) => void;
declare const _default: FC<ColorPickerProps & ForwardProps> & {
    getTestIds: (testIdProp?: string | undefined) => import("../../types").TestIdsRecord<readonly ["control", "label", "info", "additional-info", "suggestion-accept", "suggestion-reject"]>;
};
export default _default;
//# sourceMappingURL=ColorPicker.d.ts.map