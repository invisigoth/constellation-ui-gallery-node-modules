import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { StyledProgressRing } from './Progress.styles';
const Ring = forwardRef(function Ring({ value, minValue = 0, maxValue = 100, placement, ...restProps }, ref) {
    let strokeDashoffset;
    const circumference = 18 * Math.PI;
    if (typeof value !== 'number')
        strokeDashoffset = (1 - 33 / 100) * circumference;
    else if (value > maxValue || minValue > maxValue)
        strokeDashoffset = 0;
    else if (value < minValue)
        strokeDashoffset = circumference;
    else
        strokeDashoffset = (1 - (value - minValue) / (maxValue - minValue)) * circumference;
    return (_jsx(StyledProgressRing, { ref: ref, role: 'progressbar', "aria-valuemin": minValue, "aria-valuemax": maxValue, "aria-valuenow": value, placement: placement, determinate: typeof value === 'number', ...restProps, children: _jsxs("svg", { viewBox: '0 0 20 20', children: [_jsx("circle", {}), _jsx("circle", { strokeDasharray: circumference, style: { strokeDashoffset } })] }) }));
});
export default Ring;
//# sourceMappingURL=Ring.js.map