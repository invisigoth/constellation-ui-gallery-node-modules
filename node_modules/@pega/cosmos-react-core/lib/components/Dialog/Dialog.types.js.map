{"version":3,"file":"Dialog.types.js","sourceRoot":"","sources":["../../../src/components/Dialog/Dialog.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ReactNode } from 'react';\n\nimport { OmitStrict } from '../../types';\nimport { PopoverProps } from '../Popover';\nimport { ProgressProps } from '../Progress';\n\nexport interface BaseDialogProps {\n  /**\n   * Certain uses of dialogs require a linear edge with an input like control.\n   * There an arrow is not desired.\n   * @default true\n   */\n  arrow?: PopoverProps['arrow'];\n\n  /**\n   * An element the dialog is contextually and visually associated with. Normally a triggering button.\n   * Components rendering Dialog should mount and unmount instances based on this value.\n   */\n  target: HTMLElement;\n\n  /** Content for the dialog. Avoid form control buttons within as those should be rendered by way of onCancel and onSubmit with FormDialog. */\n  children: PopoverProps['children'];\n\n  /** If there is a progress state either on opening, or after submit, you must indicate as such. A custom message is supported as well. */\n  progress?: boolean | ProgressProps['message'];\n\n  /** Optionally render the dialog element at the end of the body or within a specified element. */\n  portal?: PopoverProps['portal'];\n\n  /** Positioning strategy for solving rendering scenarios. */\n  strategy?: PopoverProps['strategy'];\n\n  /**\n   * Intended positioning placement for the dialog element.\n   * Placement may auto adjust based on screen position and other layout variables.\n   */\n  placement?: PopoverProps['placement'];\n\n  /** Reference to the dialog's root element. */\n  ref?: PopoverProps['ref'];\n}\n\nexport type DialogProps = BaseDialogProps & {\n  /** The DOM id for the dialog's visible labelling element. */\n  labelledbyId?: string;\n\n  /** Provide a contextually sufficient aria label if a visible labelling element is not present. */\n  ariaLabel?: string;\n};\n\n/** A simple callback or an object to customize a subset button properties. */\ntype FormAction =\n  | (() => void)\n  | {\n      text?: string;\n      disabled?: boolean;\n      handler: () => void;\n    };\n\nexport type FormDialogProps = BaseDialogProps & {\n  /** Called when the user presses escape or clicks away. */\n  onDismiss?: () => void;\n\n  /**\n   * Renders a standard design system cancel button.\n   * If onDismiss is not provided, onCancel will be invoked when the user presses the Escape key or clicks outside of the dialog.\n   * Invocation of this indicates the user wishes to cancel any changes and close the dialog.\n   */\n  onCancel: FormAction;\n\n  /**\n   * Renders a standard design system submit button.\n   * Invocation of this indicates the user wishes to submit any changes and close the dialog. Please consider progress states after submit.\n   */\n  onSubmit: FormAction;\n} & (\n    | {\n        /** A string to indicate context for the dialog. The dialog will be labelled by this value. */\n        heading: string;\n        ariaLabel?: never;\n      }\n    | {\n        /** Provide a contextually sufficient aria label if a visible heading is not provided. */\n        heading?: never;\n        ariaLabel: string;\n      }\n  );\n\nexport interface InfoDialogProps extends OmitStrict<BaseDialogProps, 'arrow'> {\n  /** A string or summary item like props to indicate context for the dialog. The dialog will be labelled by either the heading element or primary property. */\n  heading?:\n    | string\n    | {\n        primary: string;\n        secondary?: string;\n        visual?: ReactNode;\n      };\n\n  /** Renders a standard design system dismiss button to close the dialog when the user clicks this button, presses escape or clicks away. */\n  onDismiss: () => void;\n}\n\n/**\n * Components which render Dialog internally may need to offer some control to consuming components.\n * Use this interface to offer an imperative handle for shared control.\n */\nexport interface DialogHandleValue {\n  open: () => void;\n  close: () => void;\n}\n"]}