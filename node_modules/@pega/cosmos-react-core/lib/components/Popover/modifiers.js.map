{"version":3,"file":"modifiers.js","sourceRoot":"","sources":["../../../src/components/Popover/modifiers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Modifier } from '@popperjs/core';\n\nimport { documentIsAvailable, getScrollbarWidth, testElForOverflow } from '../../utils';\n\nexport const sameWidth: Modifier<'sameWidth', object> = Object.freeze({\n  name: 'sameWidth',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn({ state }) {\n    state.styles.popper.width = `${state.rects.reference.width}px`;\n  },\n  requires: ['computeStyles']\n});\n\nconst scrollbarSize = documentIsAvailable ? getScrollbarWidth() : 0;\n\nexport const placeAndContain: Modifier<'placeAndContain', object> = Object.freeze({\n  name: 'placeAndContain',\n  enabled: true,\n  phase: 'beforeWrite',\n  requires: ['computeStyles', 'offset'],\n  fn: ({ state }) => {\n    const [requestedPrimaryPlacement, requestedSecondaryPlacement] = state.placement.split('-') as [\n      primaryPlacement: 'top' | 'bottom' | 'left' | 'right' | 'auto',\n      secondaryPlacement?: 'start' | 'end' | undefined\n    ];\n\n    const padding = {\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0\n    };\n\n    const preventOverflowPad = state.orderedModifiers.find(({ name }) => name === 'preventOverflow')\n      ?.options?.padding;\n\n    if (typeof preventOverflowPad === 'number') {\n      padding.top = preventOverflowPad;\n      padding.bottom = preventOverflowPad;\n      padding.right = preventOverflowPad;\n      padding.left = preventOverflowPad;\n    } else if (preventOverflowPad) {\n      padding.top = preventOverflowPad.top ?? padding.top;\n      padding.bottom = preventOverflowPad.bottom ?? padding.bottom;\n      padding.right = preventOverflowPad.right ?? padding.right;\n      padding.left = preventOverflowPad.left ?? padding.left;\n    }\n\n    const vw = document.documentElement.clientWidth;\n    const vh = document.documentElement.clientHeight;\n\n    const targetRect = state.rects.reference;\n    const targetRectXStart = targetRect.x;\n    const targetRectXEnd = targetRectXStart + targetRect.width;\n    const targetRectYStart = targetRect.y;\n    const targetRectYEnd = targetRectYStart + targetRect.height;\n    const targetXMid = (targetRectXStart + targetRectXEnd) / 2;\n    const targetYMid = (targetRectYStart + targetRectYEnd) / 2;\n    const targetIsInLeftHalfOfViewport = targetXMid < vw / 2;\n    const targetIsInTopHalfOfViewport = targetYMid < vh / 2;\n\n    const offsetFromTargetX = state.modifiersData.offset?.[state.placement]?.x ?? 0;\n    const offsetFromTargetY = state.modifiersData.offset?.[state.placement]?.y ?? 0;\n\n    let popoverMaxWidth: null | number = null;\n    let popoverMaxHeight: null | number = null;\n\n    const totalScrollableChildHeight = Array.from(state.elements.popper.children).reduce(\n      (sum, el) => {\n        if (el === state.elements.arrow) {\n          return sum;\n        }\n\n        if (testElForOverflow(el)[0]) {\n          return sum + el.scrollHeight + scrollbarSize;\n        }\n\n        return sum + el.scrollHeight;\n      },\n      0\n    );\n\n    const naturalPopoverHeight = Math.max(\n      state.elements.popper.scrollHeight,\n      totalScrollableChildHeight\n    );\n\n    const naturalPopoverWidth = Math.max(\n      state.elements.popper.scrollWidth,\n      ...Array.from(state.elements.popper.children).map(el => {\n        if (el === state.elements.arrow) {\n          return -Infinity;\n        }\n\n        if (testElForOverflow(el)[1]) {\n          return el.scrollWidth + scrollbarSize;\n        }\n\n        return el.scrollWidth;\n      })\n    );\n\n    let resolvedPlacement: `${'top' | 'bottom' | 'left' | 'right' | 'auto'}${\n      | ''\n      | '-start'\n      | '-end'}` = requestedPrimaryPlacement;\n\n    if (requestedPrimaryPlacement === 'bottom') {\n      popoverMaxHeight = vh - targetRectYEnd - offsetFromTargetY - padding.bottom;\n\n      if (\n        // If the popover will overflow the viewport bottom\n        targetRectYEnd + offsetFromTargetY + naturalPopoverHeight >\n        vh\n      ) {\n        // Choose the side with most allowance\n        resolvedPlacement = targetIsInTopHalfOfViewport ? 'bottom' : 'top';\n      }\n    } else if (requestedPrimaryPlacement === 'top') {\n      popoverMaxHeight = targetRectYStart + offsetFromTargetY - padding.top;\n\n      if (\n        // If the popover will overflow the viewport top\n        targetRectYStart + offsetFromTargetY - naturalPopoverHeight <\n        0\n      ) {\n        // Choose the side with most allowance\n        resolvedPlacement = targetIsInTopHalfOfViewport ? 'bottom' : 'top';\n      }\n    } else if (requestedPrimaryPlacement === 'left') {\n      popoverMaxWidth = targetRectXStart + offsetFromTargetX - padding.left;\n\n      if (\n        // If the popover will overflow the viewport left\n        targetRectXStart + offsetFromTargetX - naturalPopoverWidth <\n        0\n      ) {\n        // Choose the side with most allowance\n        resolvedPlacement = targetIsInLeftHalfOfViewport ? 'right' : 'left';\n      }\n    } else if (requestedPrimaryPlacement === 'right') {\n      popoverMaxWidth = vw - targetRectXEnd - offsetFromTargetX - padding.right;\n\n      if (\n        // If the popover will overflow the viewport right\n        targetRectXEnd + offsetFromTargetX + naturalPopoverWidth >\n        vw\n      ) {\n        // Choose the side with most allowance\n        resolvedPlacement = targetIsInLeftHalfOfViewport ? 'right' : 'left';\n      }\n    }\n\n    if (resolvedPlacement === 'left' || resolvedPlacement === 'right') {\n      popoverMaxHeight = vh - padding.top - padding.bottom;\n    }\n\n    state.elements.popper.style.maxHeight = `${popoverMaxHeight}px`;\n\n    state.elements.popper.style.maxWidth = popoverMaxWidth !== null ? `${popoverMaxWidth}px` : '';\n\n    resolvedPlacement = `${resolvedPlacement}${\n      (requestedSecondaryPlacement ? `-${requestedSecondaryPlacement}` : '') as\n        | ''\n        | '-start'\n        | '-end'\n    }`;\n\n    if (state.placement !== resolvedPlacement) {\n      state.placement = resolvedPlacement;\n      state.reset = true;\n    }\n  }\n});\n"]}