import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useCallback, useState, useEffect } from 'react';
import FormField from '../FormField';
import { StyledFormControl } from '../FormControl';
import { hasProp, withTestIds } from '../../utils';
import { useAutoResize, useConsolidatedRef, useI18n, useTestIds, useUID } from '../../hooks';
import Text from '../Text';
import StyledTextArea from './TextArea.styles';
import { getTextAreaTestIds } from './TextArea.test-ids';
const TextArea = forwardRef(function TextArea(props, ref) {
    const uid = useUID();
    const { testId, additionalInfo, id = uid, value, defaultValue, required = false, disabled = false, readOnly = false, label, labelHidden, info, status, resizable = false, autoResize = true, maxLength, displayCharCount = false, hardStop = true, onChange: onChangeProp, onResolveSuggestion, ...restProps } = props;
    const t = useI18n();
    const testIds = useTestIds(testId, getTextAreaTestIds);
    const [textAreaRef, resizeTextArea] = useAutoResize();
    const consolidatedRef = useConsolidatedRef(textAreaRef, ref);
    const [charCount, setCharCount] = useState(0);
    const controlProp = {};
    useEffect(() => {
        if ('value' in props) {
            setCharCount(props.value ? props.value.length : 0);
        }
        else if ('defaultValue' in props) {
            setCharCount(props.defaultValue ? props.defaultValue.length : 0);
        }
    }, [props]);
    // Conditionally render component as controlled/uncontrolled
    if (hasProp(props, 'value')) {
        controlProp.value = value ?? '';
    }
    else if (hasProp(props, 'defaultValue')) {
        controlProp.defaultValue = defaultValue ?? '';
    }
    const onChange = useCallback((e) => {
        if (!hardStop || maxLength === undefined || e.target.value.length <= maxLength) {
            onChangeProp?.(e);
            setCharCount(e.target.value.length);
            resizeTextArea();
        }
    }, [onChangeProp, resizeTextArea, hardStop, maxLength]);
    const Comp = (_jsx(StyledFormControl, { ...{
            'data-testid': testIds.control,
            ref: autoResize ? consolidatedRef : ref,
            id,
            required,
            disabled,
            status,
            readOnly,
            resizable,
            maxLength: hardStop ? maxLength : undefined,
            hasSuggestion: status === 'pending' && !!onResolveSuggestion,
            ...controlProp,
            ...restProps,
            onChange,
            as: StyledTextArea
        } }));
    return label || displayCharCount ? (_jsx(FormField, { ...{
            testId: testIds,
            additionalInfo,
            label,
            labelHidden,
            id,
            readOnly,
            info,
            status,
            charLimitDisplay: displayCharCount && typeof maxLength === 'number' ? (_jsx(Text, { readOnly: readOnly, variant: 'secondary', "aria-live": maxLength >= 0 && maxLength - charCount <= 20 ? 'polite' : 'off', children: maxLength >= 0 ? t('x_of_y', [charCount || '0', maxLength]) : charCount })) : undefined,
            required,
            disabled,
            onResolveSuggestion
        }, children: Comp })) : (Comp);
});
export default withTestIds(TextArea, getTextAreaTestIds);
//# sourceMappingURL=TextArea.js.map