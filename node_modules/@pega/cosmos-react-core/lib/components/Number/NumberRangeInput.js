import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback, useImperativeHandle, useReducer, useRef } from 'react';
import { useConsolidatedRef, useI18n, useFocusWithin, useTestIds } from '../../hooks';
import { StyledRangeInputContainer } from '../Input/Input.styles';
import FormField from '../FormField';
import Flex from '../Flex';
import { withTestIds } from '../../utils';
import NumberInput from './NumberInput';
import { getNumberRangeTestIds } from './Number.test-ids';
const reducer = (prevState, { type, value }) => {
    switch (type) {
        case 'start': {
            return { ...prevState, start: value };
        }
        case 'end': {
            return { ...prevState, end: value };
        }
        default:
            return prevState;
    }
};
const NumberRangeInput = forwardRef(function NumberRangeInput({ testId, value = {}, onChange, onBlur, onFocus, label, fromLabel, toLabel, labelHidden, placeholder, disabled, readOnly, required, status, unit, showDecimal, numberOfDecimals, showGroupSeparators, min, max, step, variant, fromAdditionalInfo, toAdditionalInfo, autoFocus, handle, ...restProps }, ref) {
    const testIds = useTestIds(testId, getNumberRangeTestIds);
    const t = useI18n();
    const startValueInputRef = useRef(null);
    const endValueInputRef = useRef(null);
    const [state, dispatch] = useReducer(reducer, {
        start: value.start ?? '',
        end: value.end ?? ''
    });
    // Need to keep the value in ref also, to be able to call onBlur with newest value
    const startValueRef = useRef(state.start);
    const endValueRef = useRef(state.end);
    const onFocusChange = useCallback((focused) => {
        (focused ? onFocus : onBlur)?.({ start: startValueRef.current, end: endValueRef.current });
    }, [onBlur, value.start, value.end]);
    const containerRef = useConsolidatedRef(ref);
    useFocusWithin([containerRef], onFocusChange);
    useImperativeHandle(handle, () => ({
        clear: () => {
            if (startValueInputRef.current)
                startValueInputRef.current.value = '';
            if (endValueInputRef.current)
                endValueInputRef.current.value = '';
            startValueRef.current = '';
            endValueRef.current = '';
            dispatch({ type: 'start', value: '' });
            dispatch({ type: 'end', value: '' });
            onChange({ start: '', end: '' });
        }
    }), [onChange]);
    const commonProps = {
        status,
        placeholder,
        readOnly,
        required,
        unit,
        showDecimal,
        numberOfDecimals,
        showGroupSeparators,
        min,
        max,
        variant
    };
    return (_jsx(FormField, { testId: testIds, as: 'fieldset', ...restProps, ref: containerRef, container: { wrap: 'nowrap' }, labelHidden: labelHidden, labelAs: 'legend', label: label, disabled: disabled, required: required, readOnly: readOnly, status: status, children: _jsxs(Flex, { container: true, as: StyledRangeInputContainer, children: [_jsx(NumberInput, { testId: testIds.min, ...commonProps, value: state.start, onChange: fromValue => {
                        onChange({ start: fromValue, end: value.end ?? '' });
                        dispatch({
                            type: 'start',
                            value: fromValue ?? ''
                        });
                    }, onBlur: changedValue => {
                        dispatch({
                            type: 'start',
                            value: changedValue ?? ''
                        });
                        startValueRef.current = changedValue ?? '';
                        onChange({
                            start: changedValue ?? '',
                            end: state.end
                        });
                    }, label: fromLabel, "aria-label": `${t('range_from_numeric') + (label ? ` - ${label}` : '')}`, additionalInfo: fromAdditionalInfo, autoFocus: autoFocus, ref: startValueInputRef }), _jsx(NumberInput, { testId: testIds.max, ...commonProps, value: state.end, onChange: toValue => {
                        onChange({ start: value.start ?? '', end: toValue });
                        dispatch({
                            type: 'end',
                            value: toValue ?? ''
                        });
                    }, onBlur: changedValue => {
                        dispatch({
                            type: 'end',
                            value: changedValue ?? ''
                        });
                        endValueRef.current = changedValue ?? '';
                        onChange({
                            start: state.start,
                            end: changedValue ?? ''
                        });
                    }, label: toLabel, "aria-label": `${t('range_to_numeric') + (label ? ` - ${label}` : '')}`, additionalInfo: toAdditionalInfo, ref: endValueInputRef })] }) }));
});
export default withTestIds(NumberRangeInput, getNumberRangeTestIds);
//# sourceMappingURL=NumberRangeInput.js.map