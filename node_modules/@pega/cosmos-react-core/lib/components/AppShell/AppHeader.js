import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useContext, useEffect } from 'react';
import Flex from '../Flex';
import Image from '../Image';
import SearchInput from '../SearchInput';
import { useBreakpoint, useElement } from '../../hooks';
import BareButton from '../Button/BareButton';
import VisuallyHiddenText from '../VisuallyHiddenText';
import AppShellOperator from './Operator';
import ContextSwitcher from './ContextSwitcher';
import { StyledAppHeader, StyledAppHeaderInfo, StyledAppHeaderSearchForm, StyledAppHeaderSpacer, StyledAppHeaderText, StyledAppHeaderOperator } from './AppHeader.styles';
import AppShellContext from './AppShellContext';
const AppHeader = forwardRef(function AppHeader({ appName, contextSwitcher: { contexts, onContextClick, label: contextSwitcherLabel } = {}, fullImageSrc, imageSrc, href, onClick, portalName, target, appNameHidden, operator, searchInput, searchLabel, searchPage }, ref) {
    const isMediumOrAbove = useBreakpoint('md');
    const [searchContainer, setSearchContainer] = useElement();
    const { drawerOpen, setSearchContainerEl } = useContext(AppShellContext);
    useEffect(() => {
        if (searchPage && searchContainer) {
            setSearchContainerEl(searchContainer);
        }
        else {
            setSearchContainerEl(null);
        }
    }, [searchPage, searchContainer, setSearchContainerEl]);
    let appInfoAs = 'div';
    if (href)
        appInfoAs = 'a';
    else if (onClick)
        appInfoAs = BareButton;
    return (_jsxs(Flex, { as: StyledAppHeader, container: { alignItems: 'center', pad: 1 }, hideTitle: !isMediumOrAbove, drawerOpen: drawerOpen, ref: ref, children: [contexts && contexts.length > 1 && onContextClick && (_jsx(ContextSwitcher, { contexts: contexts, onContextClick: onContextClick, label: contextSwitcherLabel })), _jsx(StyledAppHeaderInfo, { centerLogo: !fullImageSrc, children: _jsxs(Flex, { container: { inline: true, alignItems: 'center', gap: 1 }, as: appInfoAs, href: href, onClick: onClick, target: target, children: [_jsx(Image, { src: fullImageSrc || imageSrc, alt: '', "aria-hidden": 'true' }), isMediumOrAbove && (_jsxs(_Fragment, { children: [_jsx(StyledAppHeaderText, { as: appNameHidden ? VisuallyHiddenText : 'span', variant: 'primary', children: appName }), portalName && (_jsx(StyledAppHeaderText, { as: appNameHidden ? VisuallyHiddenText : 'span', variant: 'secondary', children: portalName }))] }))] }) }), _jsx(Flex, { item: { grow: 1 }, container: { justify: 'end' }, children: searchInput ? (_jsx(StyledAppHeaderSearchForm, { ref: setSearchContainer, role: 'search', "aria-label": searchLabel, onSubmit: e => e.preventDefault(), isMediumOrAbove: isMediumOrAbove, children: !searchPage && _jsx(SearchInput, { ...searchInput }) })) : (_jsx(StyledAppHeaderSpacer, {})) }), _jsx(AppShellOperator, { as: StyledAppHeaderOperator, actions: operator.actions, popover: { placement: 'bottom-start' }, children: operator.avatar })] }));
});
export default AppHeader;
//# sourceMappingURL=AppHeader.js.map