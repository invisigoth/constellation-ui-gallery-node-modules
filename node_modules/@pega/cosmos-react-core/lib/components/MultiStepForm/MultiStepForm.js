import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useRef, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { useAfterInitialEffect, useUID, useI18n, usePrevious, useBreakpoint, useTheme } from '../../hooks';
import { getFocusables } from '../../utils';
import { calculateFontSize } from '../../styles';
import Flex from '../Flex';
import Text from '../Text';
import HTML from '../HTML';
import VisuallyHiddenText from '../VisuallyHiddenText';
import Grid, { StyledGrid } from '../Grid';
import { defaultThemeProp } from '../../theme';
import Progress from '../Progress';
import VerticalFormProgress from './VerticalFormProgress';
import HorizontalFormProgress from './HorizontalFormProgress';
export const StyledForm = styled.form(({ actions, heading, theme }) => {
    return css `
      & > ${StyledGrid} {
        position: relative;

        ${actions &&
        css `
          padding-block-end: calc(2 * ${theme.base.spacing});
        `}

        ${heading &&
        css `
          padding-block-start: calc(2 * ${theme.base.spacing});
        `}
      }
    `;
});
StyledForm.defaultProps = defaultThemeProp;
export const StyledFormContent = styled.div ``;
export const StyledRequiredFieldLegend = styled(Text)(({ theme }) => {
    const { base: { 'font-size': fontSize, 'font-scale': fontScale, palette: { urgent } } } = theme;
    const { xxs: infoFontSize } = calculateFontSize(fontSize, fontScale);
    return css `
    font-size: ${infoFontSize};
    font-style: italic;

    &::before {
      display: 'inline';
      content: '\\00a0*';
      vertical-align: top;
      color: ${urgent};
    }
  `;
});
StyledRequiredFieldLegend.defaultProps = defaultThemeProp;
export const MultiStepForm = forwardRef(function MultiStepForm({ currentStepId, steps, heading, stepIndicator: stepIndicatorProp = steps.length < 2 ? 'none' : 'horizontal', progress, ...restProps }, ref) {
    const multiStepFormContentRef = useRef(null);
    const previousId = usePrevious(currentStepId);
    const currentStep = steps.find(step => step.id === currentStepId);
    const headingId = useUID();
    const descriptionId = useUID();
    const t = useI18n();
    const { base: { 'content-width': contentWidth } } = useTheme();
    const setFocus = () => {
        if (progress)
            return;
        const focusables = getFocusables(multiStepFormContentRef);
        focusables[0]?.focus();
    };
    useEffect(() => {
        if (previousId === undefined)
            return;
        if (previousId !== currentStepId) {
            const focusableElements = getFocusables(multiStepFormContentRef);
            if (focusableElements.length)
                focusableElements[0].focus();
        }
    }, [currentStepId, previousId]);
    useAfterInitialEffect(() => {
        if (!progress) {
            setFocus();
        }
    }, [progress]);
    const isSmallOrAbove = useBreakpoint('sm');
    const stepIndicator = stepIndicatorProp === 'vertical' && !isSmallOrAbove ? 'horizontal' : stepIndicatorProp;
    let areaDef = '';
    switch (stepIndicator) {
        case 'horizontal':
            areaDef += '"stepIndicator" ';
            if (currentStep.banners)
                areaDef += '"banners" ';
            if (currentStep.description)
                areaDef += '"description" ';
            areaDef += '"content"';
            break;
        case 'vertical':
            if (currentStep.banners)
                areaDef += '"banners stepIndicator" ';
            if (currentStep.description)
                areaDef += '"description stepIndicator" ';
            areaDef += '"content stepIndicator"';
            break;
        default:
            if (currentStep.banners)
                areaDef += '"banners" ';
            if (currentStep.description)
                areaDef += '"description" ';
            areaDef += '"content"';
    }
    return (_jsxs(StyledForm, { ref: ref, ...restProps, "aria-labelledby": heading ? headingId : undefined, "aria-describedby": currentStep.description ? descriptionId : undefined, heading: !!heading, actions: !!currentStep.actions, children: [heading && (_jsx(Text, { id: headingId, variant: 'h3', children: heading })), _jsxs(Grid, { container: {
                    cols: stepIndicator === 'vertical'
                        ? `2fr minmax(${contentWidth.xs}, 1fr)`
                        : 'minmax(0, 1fr)',
                    areas: areaDef,
                    gap: 2
                }, inert: progress ? '' : undefined, children: [steps.length > 1 && (_jsxs(Grid, { item: { area: 'stepIndicator' }, children: [stepIndicator === 'horizontal' && (_jsx(Grid, { item: { area: 'stepIndicator' }, as: HorizontalFormProgress, steps: steps, currentStepId: currentStepId })), stepIndicator === 'vertical' && (_jsx(Grid, { item: { area: 'stepIndicator' }, as: VerticalFormProgress, steps: steps, currentStepId: currentStepId })), _jsx(VisuallyHiddenText, { "aria-live": 'polite', children: previousId !== undefined && previousId !== currentStepId
                                    ? t('step_changed_to_name', [currentStep.name])
                                    : '' })] })), currentStep.banners && _jsx(Grid, { item: { area: 'banners' }, children: currentStep.banners }), currentStep.description && (_jsx(Grid, { item: { area: 'description' }, children: _jsx(HTML, { id: descriptionId, as: 'p', content: currentStep.description }) })), _jsx(Grid, { item: { area: 'content' }, as: StyledFormContent, ref: multiStepFormContentRef, children: currentStep.content }), _jsx(Progress, { visible: !!progress, focusOnVisible: true, placement: 'local', message: typeof progress === 'string' ? progress : undefined })] }), currentStep.actions && (_jsx(Flex, { container: { justify: 'between', alignItems: 'center' }, children: currentStep.actions }))] }));
});
export default MultiStepForm;
//# sourceMappingURL=MultiStepForm.js.map