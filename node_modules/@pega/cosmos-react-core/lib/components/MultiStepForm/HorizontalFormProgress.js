import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { remToPx, stripUnit } from 'polished';
import { useEffect, useState } from 'react';
import styled, { css } from 'styled-components';
import { useElement, useTheme } from '../../hooks';
import { calculateFontSize } from '../../styles';
import { defaultThemeProp } from '../../theme';
import { tryCatch } from '../../utils';
import Flex from '../Flex';
import Text from '../Text';
import Tooltip from '../Tooltip';
import { CurrentStepPopover, StepMarker, StyledBar, StyledFill } from './FormProgress.styles';
export const StyledFormProgress = styled(Flex)(({ theme }) => {
    const { base: { spacing, 'font-size': fontSize, 'font-scale': fontScale }, components: { text: { h4: { 'font-size': h4fontSize } } } } = theme;
    const fontSizes = calculateFontSize(fontSize, fontScale);
    return css `
    position: relative;
    padding-block-start: calc(${spacing} + ${fontSizes[h4fontSize]} * 1.35);
  `;
});
StyledFormProgress.defaultProps = defaultThemeProp;
const HorizontalFormProgress = ({ steps, currentStepId, ...restProps }) => {
    const curIdx = steps.findIndex(step => step.id === currentStepId);
    const curStep = steps[curIdx];
    const fillScale = curIdx / (steps.length - 1);
    const [currentStepEl, setCurrentStepEl] = useElement();
    const [stepEls, setStepEls] = useState({});
    const theme = useTheme();
    let popoverPlacement = 'top';
    if (curIdx === 0)
        popoverPlacement = 'top-start';
    else if (curIdx === steps.length - 1)
        popoverPlacement = 'top-end';
    useEffect(() => {
        setCurrentStepEl(stepEls[curStep.id]);
    }, [Object.keys(stepEls), curStep]);
    return (_jsxs(StyledFormProgress, { ...restProps, container: { alignItems: 'center' }, role: 'progressbar', "aria-valuenow": curIdx, "aria-valuemin": 0, "aria-valuetext": curStep.name, "aria-valuemax": steps.length, children: [_jsx(CurrentStepPopover, { show: true, target: currentStepEl, placement: popoverPlacement, strategy: 'absolute', portal: false, hideOnTargetHidden: true, modifiers: [
                    {
                        name: 'offset',
                        options: {
                            offset: [
                                0,
                                tryCatch(() => stripUnit(remToPx(theme.base.spacing)), () => 8)
                            ]
                        }
                    },
                    {
                        name: 'placeAndContain',
                        enabled: false
                    },
                    {
                        name: 'flip',
                        enabled: false
                    },
                    {
                        name: 'preventOverflow',
                        options: {
                            padding: 0
                        }
                    }
                ], children: _jsx(Text, { variant: 'h4', children: curStep.name }) }), _jsx(Flex, { container: { justify: 'between', alignItems: 'center' }, item: { grow: 1 }, children: steps.map((step, index) => {
                    return (_jsx(StepMarker, { ref: (el) => {
                            setStepEls(curr => {
                                const newEls = { ...curr };
                                if (!el && newEls[step.id]) {
                                    delete newEls[step.id];
                                    return newEls;
                                }
                                if (el)
                                    return { ...newEls, [step.id]: el };
                                return newEls;
                            });
                        }, "aria-label": step.name, "aria-describedby": step.id, current: index === curIdx, depth: step.depth, prior: index < curIdx, onClick: step.onMarkerClick, children: index !== curIdx && (_jsx(Tooltip, { target: stepEls[step.id], showDelay: 'none', hideDelay: 'short', portal: false, children: step.name })) }, step.id));
                }) }), _jsx(StyledBar, { children: _jsx(StyledFill, { style: { '--fillScale': fillScale } }) })] }));
};
export default HorizontalFormProgress;
//# sourceMappingURL=HorizontalFormProgress.js.map