import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { useConsolidatedRef, useI18n } from '../../hooks';
import Button from '../Button';
import Icon from '../Icon';
import MenuButton from '../MenuButton';
const Actions = forwardRef(function Actions({ items, menuAt = 2, iconOnly = true, menuButtonProps, contextualLabel }, ref) {
    const t = useI18n();
    const menuButtonRef = useConsolidatedRef(ref);
    if (!items || items.length === 0) {
        return null;
    }
    return items.length >= menuAt ? (_jsx(MenuButton, { ref: menuButtonRef, text: t('actions'), "aria-label": contextualLabel && t('actions_for', [contextualLabel]), iconOnly: true, icon: 'more', variant: 'simple', onClick: menuButtonProps?.onClick, onKeyDown: menuButtonProps?.onKeyDown, menu: {
            items: items.map(({ text, onClick, ...restProps }) => ({
                ...restProps,
                primary: text,
                onClick: onClick
                    ? (id, e) => {
                        onClick(id, e, menuButtonRef.current ?? undefined);
                    }
                    : undefined
            }))
        } })) : (_jsx(_Fragment, { children: items.map(({ id, icon, text, onClick, ...restProps }) => {
            return (_jsx(Button, { variant: icon && iconOnly ? 'simple' : undefined, onClick: (event) => onClick?.(id, event), label: icon ? text : undefined, icon: !!icon && iconOnly, "aria-label": contextualLabel ? `${text} - ${contextualLabel}` : text, ...restProps, children: icon && iconOnly ? _jsx(Icon, { name: icon }) : text }, id));
        }) }));
});
export default Actions;
//# sourceMappingURL=Actions.js.map