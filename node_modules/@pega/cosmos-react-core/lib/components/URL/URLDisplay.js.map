{"version":3,"file":"URLDisplay.js","sourceRoot":"","sources":["../../../src/components/URL/URLDisplay.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAsD,MAAM,OAAO,CAAC;AAEvF,OAAO,IAAI,MAAM,SAAS,CAAC;AAE3B,OAAO,MAAM,MAAM,WAAW,CAAC;AAC/B,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAgBzC;;;;;;GAMG;AACH,MAAM,iBAAiB,GAAG,CAAC,GAAW,EAAa,EAAE;IACnD,MAAM,SAAS,GAAG,GAAG;SAClB,KAAK,CAAC,IAAI,CAAC;QACZ,0EAA0E;SACzE,GAAG,CAAC,GAAG,CAAC,EAAE;QACT,OAAO,GAAG;aACP,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC;aACzB,OAAO,CAAC,kBAAkB,EAAE,QAAQ,CAAC;aACrC,OAAO,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IACtC,CAAC,CAAC;SACD,IAAI,CAAC,QAAQ,CAAC,CAAC;IAElB,4HAA4H;IAC5H,OAAO,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAc,CAAC,YAAY,EAAE,IAAI,EAAE,EAAE;QACxE,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,gBAAU,YAAY,CAAC,MAAM,CAAI,CAAC,CAAC;QAC3D,OAAO,YAAY,CAAC;IACtB,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC;AAEF,MAAM,UAAU,GAAsD,UAAU,CAC9E,SAAS,UAAU,CACjB,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,GAAG,MAAM,EAAE,GAAG,SAAS,EAAoC,EACxF,GAA2B;IAE3B,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,WAAW,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAC,OAAO,KAAG,CAAC;IAEnF,IAAI,OAAO,KAAK,MAAM,IAAI,CAAC,KAAK,EAAE;QAChC,OAAO,CACL,eAAM,GAAG,EAAE,GAA2B,KAAM,SAAS,YAClD,YAAY,GACR,CACR,CAAC;KACH;IACD,IAAI,OAAO,KAAK,QAAQ,EAAE;QACxB,OAAO,CACL,KAAC,MAAM,IACL,GAAG,EAAE,GAA4B,KAC7B,SAAS,EACb,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,WAAW,GAClB,CACH,CAAC;KACH;IACD,OAAO,CACL,KAAC,IAAI,IAAC,GAAG,EAAE,GAA6B,KAAM,SAAS,EAAE,IAAI,EAAE,KAAK,YACjE,YAAY,GACR,CACR,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,UAAU,CAAC","sourcesContent":["import { forwardRef, FunctionComponent, PropsWithoutRef, ReactNode, Ref } from 'react';\n\nimport Link from '../Link';\nimport { BaseProps, ForwardProps, NoChildrenProp } from '../../types';\nimport QRCode from '../QRCode';\nimport NoValue from '../NoValue/NoValue';\n\nexport interface URLDisplayProps extends BaseProps, NoChildrenProp {\n  /** URL address, includes scheme, 'http://', 'https://' */\n  value?: string;\n  /** The text to be displayed. */\n  displayText?: string;\n  /**\n   * Controls styling of the field.\n   * @default 'link'\n   */\n  variant?: 'link' | 'text' | 'qrcode';\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLAnchorElement | HTMLSpanElement | HTMLImageElement | HTMLDivElement>;\n}\n\n/**\n * Function gets the url as a string and converts it to a HTML markup with whitespace opportunity elements.\n * It helps breaking a long url correctly to avoid parent container overflow issues\n * according to \"The Chicago Manual of Style\" copywriting standard.\n * @param url input url to construct markup for\n * @returns array of nodes\n */\nconst generateUrlMarkup = (url: string): ReactNode => {\n  const markedUrl = url\n    .split('//')\n    // Insert \\x1f (unit separator) char as a placeholder at correct position.\n    .map(str => {\n      return str\n        .replace(/:/giu, '$&\\x1f')\n        .replace(/[/~.,\\\\-_?#%]/giu, '\\x1f$&')\n        .replace(/[=&]/giu, '\\x1f$&\\x1f');\n    })\n    .join('//\\x1f');\n\n  // Replace unit separator character with <wbr /> element. Create an array of nodes in place of string to pass tags escaping.\n  return markedUrl.split('\\x1f').reduce<ReactNode[]>((urlFragments, part) => {\n    urlFragments.push(part, <wbr key={urlFragments.length} />);\n    return urlFragments;\n  }, []);\n};\n\nconst URLDisplay: FunctionComponent<URLDisplayProps & ForwardProps> = forwardRef(\n  function URLDisplay(\n    { value, displayText, variant = 'link', ...restProps }: PropsWithoutRef<URLDisplayProps>,\n    ref: URLDisplayProps['ref']\n  ) {\n    const displayValue = value ? displayText || generateUrlMarkup(value) : <NoValue />;\n\n    if (variant === 'text' || !value) {\n      return (\n        <span ref={ref as Ref<HTMLSpanElement>} {...restProps}>\n          {displayValue}\n        </span>\n      );\n    }\n    if (variant === 'qrcode') {\n      return (\n        <QRCode\n          ref={ref as Ref<HTMLImageElement>}\n          {...restProps}\n          value={value}\n          label={displayText}\n        />\n      );\n    }\n    return (\n      <Link ref={ref as Ref<HTMLAnchorElement>} {...restProps} href={value}>\n        {displayValue}\n      </Link>\n    );\n  }\n);\n\nexport default URLDisplay;\n"]}