import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useEffect, useRef, useState } from 'react';
import * as QRCodeLib from 'qrcode';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
import Flex from '../Flex';
import Image from '../Image';
import { useI18n } from '../../hooks';
import EmptyState from '../EmptyState';
export const StyledEmptyQRWrapper = styled.div(({ theme }) => {
    return css `
    height: ${theme.base['content-width'].xs};
    width: ${theme.base['content-width'].xs};
    border: 0.0625rem solid ${theme.base.palette['border-line']};
    border-radius: calc(${theme.base['border-radius']} / 2);
    text-align: center;
  `;
});
StyledEmptyQRWrapper.defaultProps = defaultThemeProp;
const QRCode = forwardRef(function QRCode({ value, label = value, ...restProps }, ref) {
    const [dataURL, setDataURL] = useState('');
    const t = useI18n();
    const mounted = useRef(false);
    useEffect(() => {
        mounted.current = true;
        return () => {
            mounted.current = false;
        };
    }, []);
    useEffect(() => {
        QRCodeLib.toDataURL(value)
            .then(results => {
            if (mounted.current)
                setDataURL(results);
        })
            .catch(() => {
            setDataURL('');
        });
    }, [value]);
    return dataURL ? (_jsx(Image, { ...restProps, ref: ref, src: dataURL, alt: label })) : (_jsx(Flex, { ...restProps, ref: ref, container: {
            direction: 'column',
            alignItems: 'center',
            justify: 'center',
            gap: 1,
            pad: 2
        }, as: StyledEmptyQRWrapper, children: _jsx(EmptyState, { message: t('qr_code_not_available') }) }));
});
export default QRCode;
//# sourceMappingURL=QRCode.js.map