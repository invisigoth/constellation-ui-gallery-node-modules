import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useRef, useMemo, useLayoutEffect } from 'react';
import styled from 'styled-components';
import { useI18n } from '../../hooks';
import { windowIsAvailable } from '../../utils';
import Button from '../Button';
import ExpandCollapse from '../ExpandCollapse';
export const StyledShowMoreLessButton = styled(Button) ``;
const ShowMoreLess = ({ children, lines }) => {
    const [collapsed, setCollapsed] = useState(true);
    const [exceedsMaxHeight, setExceedsMaxHeight] = useState(false);
    const contentRef = useRef(null);
    const t = useI18n();
    const maxTextHeight = useMemo(() => {
        if (!windowIsAvailable)
            return Infinity;
        const computedLineHeight = Number.parseInt(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10) * 1.25;
        return lines * computedLineHeight;
    }, []);
    useLayoutEffect(() => {
        if (!contentRef.current)
            return;
        const observer = new ResizeObserver(entries => {
            const exceedsHeight = entries.some(({ target, contentRect }) => {
                if (target !== contentRef.current)
                    return;
                return contentRect.height > maxTextHeight;
            });
            setExceedsMaxHeight(exceedsHeight);
        });
        observer.observe(contentRef.current);
        return () => {
            observer.disconnect();
        };
    }, [contentRef.current, maxTextHeight]);
    return (_jsxs(_Fragment, { children: [_jsx(ExpandCollapse, { collapsed: collapsed, min: exceedsMaxHeight ? `${maxTextHeight}px` : 'max-content', children: _jsx("div", { ref: contentRef, children: children }) }), exceedsMaxHeight && (_jsx(StyledShowMoreLessButton, { variant: 'link', onClick: () => setCollapsed(current => !current), children: collapsed ? t('show_more') : t('show_less') }))] }));
};
export default ShowMoreLess;
//# sourceMappingURL=ShowMoreLess.js.map