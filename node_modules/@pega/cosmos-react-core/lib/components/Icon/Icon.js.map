{"version":3,"file":"Icon.js","sourceRoot":"","sources":["../../../src/components/Icon/Icon.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  forwardRef,\n  useState,\n  useEffect,\n  FunctionComponent,\n  Ref,\n  PropsWithoutRef,\n  ComponentType\n} from 'react';\nimport styled from 'styled-components';\n\nimport { useTheme } from '../../hooks';\nimport { BaseProps, ForwardProps, NoChildrenProp } from '../../types';\n\nexport interface IconProps extends BaseProps, NoChildrenProp {\n  /**\n   * The name of the icon set.\n   * @default theme.base['icon-set']\n   */\n  set?: string;\n  /** The name indicating the Cosmos Icon. Reference the catalog above for the available names. */\n  name: string;\n  /** Ref for the wrapping element. */\n  ref?: Ref<SVGSVGElement>;\n}\n\nexport interface IconDefinition {\n  Component: ComponentType;\n  viewBox?: string;\n}\n\nexport interface IconModule extends IconDefinition {\n  set?: IconProps['set'];\n  name: IconProps['name'];\n}\n\nconst iconRegistry = new Map<string, Map<string, IconDefinition>>([]);\n\nexport const registerIcon = (...icons: IconModule[]) => {\n  icons.forEach(({ set: modSet, name, ...iconDef }) => {\n    const set = modSet ?? 'budicon';\n\n    if (!iconRegistry.has(set)) {\n      iconRegistry.set(set, new Map([[name, iconDef]]));\n    } else if (!iconRegistry.get(set)!.has(name)) {\n      iconRegistry.get(set)!.set(name, iconDef);\n    }\n  });\n};\n\nexport const forceRegisterIcon = (...icons: IconModule[]) => {\n  icons.forEach(({ set: modSet, name, ...iconDef }) => {\n    const set = modSet ?? 'budicon';\n\n    if (!iconRegistry.has(set)) {\n      iconRegistry.set(set, new Map([[name, iconDef]]));\n    } else {\n      iconRegistry.get(set)!.set(name, iconDef);\n    }\n  });\n};\n\nexport const StyledIcon = styled.svg`\n  display: inline-block;\n  fill: currentColor;\n  height: 1.125rem;\n  width: 1.125rem;\n  vertical-align: middle;\n  flex-shrink: 0;\n`;\n\nconst emptyIconDefinition: Readonly<IconDefinition> = Object.freeze({ Component: () => null });\n\nconst Icon: FunctionComponent<IconProps & ForwardProps> = forwardRef(function Icon(\n  { set: setProp, name, ...restProps }: PropsWithoutRef<IconProps>,\n  ref: IconProps['ref']\n) {\n  const {\n    base: { 'icon-set': setTheme }\n  } = useTheme();\n\n  const set = setProp ?? setTheme ?? 'budicon';\n\n  const [iconDef, setIconDef] = useState(iconRegistry.get(set)?.get(name) ?? emptyIconDefinition);\n\n  useEffect(() => {\n    if (iconRegistry.get(set)?.has(name)) {\n      setIconDef(iconRegistry.get(set)!.get(name)!);\n      return;\n    }\n\n    const controller = new AbortController();\n\n    (async () => {\n      try {\n        const encodedName = encodeURIComponent(name);\n\n        let module: IconModule;\n\n        switch (set) {\n          case 'streamline':\n            module = await import(`./streamline-icons/${encodedName}.icon`);\n            break;\n          case 'budicon':\n            module = await import(`./icons/${encodedName}.icon`);\n            break;\n          default:\n            throw new Error('Unknown icon');\n        }\n\n        if (module.name !== name || !module.Component) throw new Error('Malformed icon definition');\n\n        registerIcon(module);\n      } catch {\n        registerIcon({ set, name, ...emptyIconDefinition });\n      }\n\n      if (!controller.signal.aborted) {\n        setIconDef(iconRegistry.get(set)!.get(name) ?? emptyIconDefinition);\n      }\n    })();\n\n    return () => controller.abort();\n  }, [name, set]);\n\n  return (\n    <StyledIcon role='presentation' {...restProps} viewBox={iconDef.viewBox} ref={ref}>\n      <iconDef.Component />\n    </StyledIcon>\n  );\n});\n\nexport default Icon;\n"]}