import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useState, useEffect } from 'react';
import styled from 'styled-components';
import { useTheme } from '../../hooks';
const iconRegistry = new Map([]);
export const registerIcon = (...icons) => {
    icons.forEach(({ set: modSet, name, ...iconDef }) => {
        const set = modSet ?? 'budicon';
        if (!iconRegistry.has(set)) {
            iconRegistry.set(set, new Map([[name, iconDef]]));
        }
        else if (!iconRegistry.get(set).has(name)) {
            iconRegistry.get(set).set(name, iconDef);
        }
    });
};
export const forceRegisterIcon = (...icons) => {
    icons.forEach(({ set: modSet, name, ...iconDef }) => {
        const set = modSet ?? 'budicon';
        if (!iconRegistry.has(set)) {
            iconRegistry.set(set, new Map([[name, iconDef]]));
        }
        else {
            iconRegistry.get(set).set(name, iconDef);
        }
    });
};
export const StyledIcon = styled.svg `
  display: inline-block;
  fill: currentColor;
  height: 1.125rem;
  width: 1.125rem;
  vertical-align: middle;
  flex-shrink: 0;
`;
const emptyIconDefinition = Object.freeze({ Component: () => null });
const Icon = forwardRef(function Icon({ set: setProp, name, ...restProps }, ref) {
    const { base: { 'icon-set': setTheme } } = useTheme();
    const set = setProp ?? setTheme ?? 'budicon';
    const [iconDef, setIconDef] = useState(iconRegistry.get(set)?.get(name) ?? emptyIconDefinition);
    useEffect(() => {
        if (iconRegistry.get(set)?.has(name)) {
            setIconDef(iconRegistry.get(set).get(name));
            return;
        }
        const controller = new AbortController();
        (async () => {
            try {
                const encodedName = encodeURIComponent(name);
                let module;
                switch (set) {
                    case 'streamline':
                        module = await import(`./streamline-icons/${encodedName}.icon`);
                        break;
                    case 'budicon':
                        module = await import(`./icons/${encodedName}.icon`);
                        break;
                    default:
                        throw new Error('Unknown icon');
                }
                if (module.name !== name || !module.Component)
                    throw new Error('Malformed icon definition');
                registerIcon(module);
            }
            catch {
                registerIcon({ set, name, ...emptyIconDefinition });
            }
            if (!controller.signal.aborted) {
                setIconDef(iconRegistry.get(set).get(name) ?? emptyIconDefinition);
            }
        })();
        return () => controller.abort();
    }, [name, set]);
    return (_jsx(StyledIcon, { role: 'presentation', ...restProps, viewBox: iconDef.viewBox, ref: ref, children: _jsx(iconDef.Component, {}) }));
});
export default Icon;
//# sourceMappingURL=Icon.js.map