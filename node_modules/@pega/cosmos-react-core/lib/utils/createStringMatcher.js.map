{"version":3,"file":"createStringMatcher.js","sourceRoot":"","sources":["../../src/utils/createStringMatcher.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C;;;;;;GAMG;AACH,MAAM,mBAAmB,GAAG,CAC1B,CAAS,EACT,OAA0C,UAAU,EACpD,QAAgB,GAAG,EACX,EAAE;IACV,MAAM,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IAChC,IAAI,OAAO,GAAW,OAAO,CAAC;IAE9B,IAAI,IAAI,KAAK,OAAO,EAAE;QACpB,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;KACzB;SAAM,IAAI,IAAI,KAAK,UAAU,EAAE;QAC9B,OAAO,GAAG,YAAY,OAAO,EAAE,CAAC;KACjC;IAED,OAAO,IAAI,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF,eAAe,mBAAmB,CAAC","sourcesContent":["import escapeRegExp from './escapeRegExp';\n\n/**\n * Generate a RegExp with a string parameter.\n * @param s The string to match.\n * @param type How to match.\n * @param flags Standard RegExp flags.\n * @returns A RegExp with the match pattern.\n */\nconst createStringMatcher = (\n  s: string,\n  type: 'contains' | 'start' | 'boundary' = 'contains',\n  flags: string = 'i'\n): RegExp => {\n  const escaped = escapeRegExp(s);\n  let pattern: string = escaped;\n\n  if (type === 'start') {\n    pattern = `^${escaped}`;\n  } else if (type === 'boundary') {\n    pattern = `(?:^|\\\\s)${escaped}`;\n  }\n\n  return new RegExp(pattern, flags);\n};\n\nexport default createStringMatcher;\n"]}