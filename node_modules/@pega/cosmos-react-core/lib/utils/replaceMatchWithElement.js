import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment } from 'react';
/** Return an array of strings and regex replaced components */
const replaceMatchWithElement = (str, re, render) => {
    const arr = [];
    // Only loop for stateful regexes.
    if (re.global || re.sticky) {
        let currIdx = 0;
        let match;
        // eslint-disable-next-line no-cond-assign
        while ((match = re.exec(str))) {
            arr.push(str.slice(currIdx, match.index), render(match[0]));
            currIdx = match.index + match[0].length;
        }
        arr.push(str.slice(currIdx));
    }
    else {
        const match = re.exec(str);
        if (!match)
            arr.push(str);
        else {
            arr.push(str.slice(0, match.index), render(match[0]), str.slice(match.index + match[0].length));
        }
    }
    return arr.flatMap((item, idx) => {
        if (!item)
            return [];
        return _jsx(Fragment, { children: item }, idx);
    });
};
export default replaceMatchWithElement;
//# sourceMappingURL=replaceMatchWithElement.js.map