{"version":3,"file":"throttle.js","sourceRoot":"","sources":["../../src/utils/throttle.ts"],"names":[],"mappings":"AAAA,yFAAyF;AACzF,MAAM,QAAQ,GAAG,CACf,EAAK,EACL,QAAgB,EACoB,EAAE;IACtC,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,OAAO,SAAS,SAAS,CAAY,GAAG,IAAI;QAC1C,IAAI,MAAM;YAAE,OAAO;QAEnB,MAAM,GAAG,IAAI,CAAC;QAEd,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;YACrB,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAErB,MAAM,GAAG,KAAK,CAAC;QACjB,CAAC,EAAE,QAAQ,CAAC,CAAC;IACf,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["/** @returns Throttled function that can be called at most once in given waitTime(ms). */\nconst throttle = <F extends (...args: any[]) => any>(\n  fn: F,\n  waitTime: number\n): ((...args: Parameters<F>) => void) => {\n  let paused = false;\n\n  return function throttled(this: any, ...args) {\n    if (paused) return;\n\n    paused = true;\n\n    window.setTimeout(() => {\n      fn.apply(this, args);\n\n      paused = false;\n    }, waitTime);\n  };\n};\n\nexport default throttle;\n"]}