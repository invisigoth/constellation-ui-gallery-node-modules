/** Compares two objects by comparing each key value regardless of order. */
const deepObjectComparison = (valueA, valueB) => {
    // If the values are strictly equal, return true
    if (valueA === valueB)
        return true;
    // If the values are not objects and are not equal, return false
    if (typeof valueA !== 'object' ||
        typeof valueB !== 'object' ||
        valueA === null ||
        valueB === null)
        return false;
    const keysA = Object.keys(valueA);
    const keysB = Object.keys(valueB);
    // If the objects have different numbers of keys, return false
    if (keysA.length !== keysB.length)
        return false;
    for (let i = 0; i < keysA.length; i += 1) {
        const key = keysA[i];
        // If there is not a 1:1 mapping of keys between the objects, return false
        if (!keysB.includes(key))
            return false;
        if (typeof valueA[key] === 'function' || typeof valueB[key] === 'function') {
            // If the value of a given key is a function, and the functions are not equivalent between the objects, return false
            if (valueA[key].toString() !== valueB[key].toString())
                return false;
            // If all checks have passed thus far, compare the next set of nested values
        }
        else if (!deepObjectComparison(valueA[key], valueB[key]))
            return false;
    }
    // If all checks have passed, the objects are deeply equal
    return true;
};
export default deepObjectComparison;
//# sourceMappingURL=deepObjectComparison.js.map