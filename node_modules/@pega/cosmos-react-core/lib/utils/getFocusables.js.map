{"version":3,"file":"getFocusables.js","sourceRoot":"","sources":["../../src/utils/getFocusables.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,MAAM,aAAa,GAAG,CAAC,aAAqC,EAAiB,EAAE;IAC7E,IAAI,CAAC,aAAa,CAAC,OAAO;QAAE,OAAO,EAAE,CAAC;IAEtC,MAAM,QAAQ,GAAG,8EAA8E,CAAC;IAEhG,OAAQ,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAmB,CAAC,MAAM,CACpF,EAAE,CAAC,EAAE,CACH,EAAE,YAAY,WAAW;QACzB,CAAC,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC;QAC5B,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,IAAI;QACpC,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CACzB,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["import type { RefObject } from 'react';\n\n/**\n * Returns all valid focusable elements within a given ref.\n * @param focusablesRef The ref containing the element to search for focusable elements within.\n * @returns a list of valid focusable elements within the given ref.\n */\nconst getFocusables = (focusablesRef: RefObject<HTMLElement>): HTMLElement[] => {\n  if (!focusablesRef.current) return [];\n\n  const selector = 'a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])';\n\n  return ([...focusablesRef.current.querySelectorAll(selector)] as HTMLElement[]).filter(\n    el =>\n      el instanceof HTMLElement &&\n      !el.hasAttribute('disabled') &&\n      el.getAttribute('tabindex') !== '-1' &&\n      !el.closest('[inert]')\n  );\n};\n\nexport default getFocusables;\n"]}