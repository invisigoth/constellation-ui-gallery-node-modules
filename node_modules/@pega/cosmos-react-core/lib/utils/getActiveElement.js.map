{"version":3,"file":"getActiveElement.js","sourceRoot":"","sources":["../../src/utils/getActiveElement.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,gBAAgB,GAAG,CAAC,OAA6B,QAAQ,EAAkB,EAAE;IACjF,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC;IAElC,IAAI,CAAC,QAAQ;QAAE,OAAO,IAAI,CAAC;IAE3B,IACE,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,QAAQ;QAC1C,QAA8B,CAAC,eAAe;QAE/C,QAAQ,GAAG,gBAAgB,CAAE,QAA8B,CAAC,eAAgB,CAAC,IAAI,QAAQ,CAAC;IAE5F,IAAI,QAAQ,CAAC,UAAU;QAAE,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC;IAEtF,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,eAAe,gBAAgB,CAAC","sourcesContent":["/**\n * Gets element that currently has focus with support for open shadow roots.\n * @param root Optional container to search for the active element. Defaults to `document`.\n * @returns The Element within the DOM that currently has focus.\n */\nconst getActiveElement = (root: DocumentOrShadowRoot = document): Element | null => {\n  let activeEl = root.activeElement;\n\n  if (!activeEl) return null;\n\n  if (\n    activeEl.tagName.toLowerCase() === 'iframe' &&\n    (activeEl as HTMLIFrameElement).contentDocument\n  )\n    activeEl = getActiveElement((activeEl as HTMLIFrameElement).contentDocument!) ?? activeEl;\n\n  if (activeEl.shadowRoot) activeEl = getActiveElement(activeEl.shadowRoot) ?? activeEl;\n\n  return activeEl;\n};\n\nexport default getActiveElement;\n"]}