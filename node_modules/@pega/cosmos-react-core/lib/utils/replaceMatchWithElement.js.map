{"version":3,"file":"replaceMatchWithElement.js","sourceRoot":"","sources":["../../src/utils/replaceMatchWithElement.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEjC,+DAA+D;AAC/D,MAAM,uBAAuB,GAAG,CAC9B,GAAW,EACX,EAAU,EACV,MAAsC,EACtC,EAAE;IACF,MAAM,GAAG,GAA6B,EAAE,CAAC;IAEzC,kCAAkC;IAClC,IAAI,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,MAAM,EAAE;QAC1B,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,KAA6B,CAAC;QAElC,0CAA0C;QAC1C,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;YAC7B,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE5D,OAAO,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;SACzC;QAED,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;KAC9B;SAAM;QACL,MAAM,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,KAAK;YAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrB;YACH,GAAG,CAAC,IAAI,CACN,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,EACzB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAChB,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CACzC,CAAC;SACH;KACF;IAED,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;QAC/B,IAAI,CAAC,IAAI;YAAE,OAAO,EAAE,CAAC;QAErB,OAAO,KAAC,QAAQ,cAAY,IAAI,IAAV,GAAG,CAAmB,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,eAAe,uBAAuB,CAAC","sourcesContent":["import { Fragment } from 'react';\n\n/** Return an array of strings and regex replaced components */\nconst replaceMatchWithElement = (\n  str: string,\n  re: RegExp,\n  render: (match: string) => JSX.Element\n) => {\n  const arr: (string | JSX.Element)[] = [];\n\n  // Only loop for stateful regexes.\n  if (re.global || re.sticky) {\n    let currIdx = 0;\n    let match: RegExpExecArray | null;\n\n    // eslint-disable-next-line no-cond-assign\n    while ((match = re.exec(str))) {\n      arr.push(str.slice(currIdx, match.index), render(match[0]));\n\n      currIdx = match.index + match[0].length;\n    }\n\n    arr.push(str.slice(currIdx));\n  } else {\n    const match = re.exec(str);\n    if (!match) arr.push(str);\n    else {\n      arr.push(\n        str.slice(0, match.index),\n        render(match[0]),\n        str.slice(match.index + match[0].length)\n      );\n    }\n  }\n\n  return arr.flatMap((item, idx) => {\n    if (!item) return [];\n\n    return <Fragment key={idx}>{item}</Fragment>;\n  });\n};\n\nexport default replaceMatchWithElement;\n"]}