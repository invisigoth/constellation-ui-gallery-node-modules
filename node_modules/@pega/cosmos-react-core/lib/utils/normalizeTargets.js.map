{"version":3,"file":"normalizeTargets.js","sourceRoot":"","sources":["../../src/utils/normalizeTargets.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,MAAM,gBAAgB,GAAG,CACvB,OAA2C,EACtC,EAAE;IACP,OAAO,OAAO,CAAC,OAAO,CAAI,CAAC,CAAiC,EAAE,EAAE;QAC9D,IAAI,CAAC,CAAC;YAAE,OAAO,EAAE,CAAC;QAElB,MAAM,MAAM,GAAG,CAAC,YAAY,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QACxD,IAAI,CAAC,MAAM;YAAE,OAAO,EAAE,CAAC;QAEvB,OAAO,CAAC,MAAM,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,eAAe,gBAAgB,CAAC","sourcesContent":["import type { RefObject } from 'react';\n\n/**\n * Returns normalized list of targets, ie. it de-reference the element from the RefObject if needed.\n * @param targets a list of targets or refs to normalize.\n * @returns a new list of the same length with the de-referenced targets.\n */\nconst normalizeTargets = <T extends EventTarget = EventTarget>(\n  targets: (T | null | RefObject<T | null>)[]\n): T[] => {\n  return targets.flatMap<T>((t: T | null | RefObject<T | null>) => {\n    if (!t) return [];\n\n    const target = t instanceof EventTarget ? t : t.current;\n    if (!target) return [];\n\n    return [target];\n  });\n};\n\nexport default normalizeTargets;\n"]}