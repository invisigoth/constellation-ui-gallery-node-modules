import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef, useMemo, useEffect, useRef, createRef } from 'react';
import styled, { css } from 'styled-components';
import { Flex, useI18n, defaultThemeProp, TabPanel, Tabs, EmptyState, Progress, getFocusables, useLiveLog, useItemIntersection } from '@pega/cosmos-react-core';
import ArticleListFilter from './ArticleListFilter';
import ArticleSummary from './ArticleSummary';
import ArticleListHeader from './ArticleListHeader';
const StyledSummaryList = styled.ul(({ theme }) => {
    return css `
    max-height: calc(100vh - 8 * ${theme.base.spacing});
    flex-grow: 1;
    height: 100%;
    list-style-type: none;
    overflow-y: auto;
    border-end-start-radius: ${theme.base['border-radius']};
    border-end-end-radius: ${theme.base['border-radius']};
  `;
});
StyledSummaryList.defaultProps = defaultThemeProp;
const StyledArticleTabPanel = styled.div(({ theme }) => {
    return css `
    display: flex;
    flex-direction: column;
    min-height: 0;
    flex: 1 1;
    gap: ${theme.base.spacing};
  `;
});
StyledArticleTabPanel.defaultProps = defaultThemeProp;
const StyledArticleList = styled.article(({ theme }) => {
    return css `
    height: 100%;
    padding-block: 0;
    background: ${theme.base.palette['primary-background']};
    border-radius: ${theme.components.card['border-radius']};
  `;
});
StyledArticleList.defaultProps = defaultThemeProp;
const ArticleList = forwardRef(function ArticleList(props, ref) {
    const { header, suggested, followed, search, onTabClick, activeTab, loading = false, loadingMore = false, onQuickFilterClick, onLoadMore, ...restProps } = props;
    const t = useI18n();
    const { announcePolite } = useLiveLog();
    const articleContentRefs = useRef([]);
    const activeTabContentRef = useRef(null);
    const tabsRef = useRef(null);
    const activeElementRef = useRef(null);
    const tabs = useMemo(() => {
        const tabsArr = [];
        if (suggested)
            tabsArr.push({
                id: 'Suggested',
                name: t('suggested'),
                count: suggested?.count,
                content: suggested.articles ?? []
            });
        if (search)
            tabsArr.push({
                id: 'Search',
                name: t('search'),
                count: search?.count,
                content: search?.articles ?? []
            });
        if (followed)
            tabsArr.push({
                id: 'Followed',
                name: t('followed'),
                count: followed?.count,
                content: followed?.articles ?? []
            });
        return tabsArr;
    }, [suggested, followed, search]);
    const listUlRef = tabs.reduce((acc, tab) => {
        return { ...acc, [tab.id]: createRef() };
    }, {});
    useEffect(() => {
        if (tabsRef.current && getFocusables(tabsRef)?.length > 0)
            activeElementRef.current = getFocusables(tabsRef)[0];
        else {
            activeTabContentRef.current =
                articleContentRefs.current[tabs.findIndex(({ id }) => id === activeTab)];
            if (activeTabContentRef && getFocusables(activeTabContentRef)?.length > 0) {
                activeElementRef.current = getFocusables(activeTabContentRef)[0];
            }
        }
    }, []);
    useEffect(() => {
        if (!loading) {
            const currentTabContent = tabs.find(tab => tab.id === activeTab)?.content;
            announcePolite({
                type: 'status',
                message: currentTabContent && currentTabContent?.length > 0
                    ? `${header?.title || t('article_list_label_a11y')} ${t('loaded')}`
                    : t('no_items')
            });
        }
    }, [loading]);
    const getItemLength = (tabName) => {
        const currentTab = tabs.find(item => item.id === tabName);
        if (!currentTab || !currentTab.content) {
            return 0;
        }
        return currentTab.content.length - 1;
    };
    useItemIntersection(listUlRef[activeTab], getItemLength(activeTab), () => {
        if (!loadingMore)
            onLoadMore?.();
    }, ':scope > li[role="article"]');
    const articleContent = ({ content, tabId, headerTitle }) => {
        return (_jsxs(_Fragment, { children: [activeTab === t('search') && search && _jsx(ArticleListFilter, { ...search }), activeTab === t('followed') && followed && _jsx(ArticleListFilter, { ...followed }), loading && (_jsx(Progress, { visible: !!loading, placement: 'block', message: t('loading'), liveConfig: { contextualLabel: headerTitle ?? t('article_list_label_a11y') } })), !loading &&
                    (content.length > 0 ? (_jsxs(Flex, { container: { direction: 'column', gap: 0.5, pad: [1, 2] }, as: StyledSummaryList, role: 'feed', ref: listUlRef[tabId], children: [content.map(summaryItem => (_createElement(ArticleSummary, { ...summaryItem, key: summaryItem.articleId, onQuickFilterClick: onQuickFilterClick }))), loadingMore && _jsx(Progress, { placement: 'block' })] })) : (_jsx(EmptyState, {})))] }));
    };
    return (_jsxs(Flex, { ...restProps, container: {
            direction: 'column',
            pad: [0.5, undefined]
        }, as: StyledArticleList, "aria-label": t('article_list_label_a11y'), ref: ref, ...(loading ? { 'aria-busy': true } : undefined), children: [header && (_jsx(ArticleListHeader, { icon: header.icon, title: header.title, actions: header.actions })), tabs.length === 1 &&
                articleContent({
                    content: tabs[0].content,
                    tabId: tabs[0].id,
                    headerTitle: header?.title
                }), tabs.length > 1 && (_jsxs(_Fragment, { children: [_jsx(Tabs, { ref: tabsRef, tabs: tabs, onTabClick: (name, e) => {
                            if (document.activeElement instanceof HTMLElement) {
                                activeElementRef.current = document.activeElement;
                                onTabClick?.(name, e);
                            }
                        }, currentTabId: activeTab }), tabs.map(({ id, content }) => {
                        return (_jsx(TabPanel, { tabId: id, currentTabId: activeTab, as: activeTab === id ? StyledArticleTabPanel : undefined, children: activeTab === id &&
                                articleContent({ content, tabId: id, headerTitle: header?.title }) }, id));
                    })] }))] }));
});
export default ArticleList;
//# sourceMappingURL=ArticleList.js.map