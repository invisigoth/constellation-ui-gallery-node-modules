import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef } from 'react';
import styled, { css } from 'styled-components';
import { Button, Flex, SearchInput, useI18n, defaultThemeProp, ComboBox, StyledSearchInput, Text, Selectable } from '@pega/cosmos-react-core';
import { StyledFormContent } from '@pega/cosmos-react-core/lib/components/MultiStepForm/MultiStepForm';
const StyledClearButton = styled(Button)(({ theme }) => {
    return css `
    margin-block-start: calc(4.5 * ${theme.base.spacing});
  `;
});
StyledClearButton.defaultProps = defaultThemeProp;
const StyledFilterContainer = styled(Flex) `
  flex-grow: 1;
`;
const StyledSelectable = styled(Selectable)(({ theme }) => {
    return css `
    line-height: calc(2 * ${theme.base.spacing});
    margin: calc(0.25 * ${theme.base.spacing});
  `;
});
StyledSelectable.defaultProps = defaultThemeProp;
const StyledSearchFilters = styled.div(({ theme }) => {
    return css `
    width: 100%;
    padding-block-start: ${theme.base.spacing};
    padding-inline: calc(2 * ${theme.base.spacing});

    > div:last-child {
      margin: 0;
    }

    ${StyledFormContent} {
      gap: ${theme.base.spacing};
    }

    ${StyledFilterContainer} > div {
      margin-top: calc(1.5 * ${theme.base.spacing});
      width: 100%;
    }
    ${StyledSearchInput} {
      flex-grow: 1;
    }
  `;
});
StyledSearchFilters.defaultProps = defaultThemeProp;
const ArticleListFilter = (props) => {
    const { searchInput, category, sortBy, onClearClick, articles, quickFilters = [], showResults = false, handleQuickFilterRemove, ...restProps } = props || {};
    const t = useI18n();
    const searchResults = t('results_count', [articles?.length ?? 0]);
    const quickFiltersRef = useRef([]);
    useEffect(() => {
        if (quickFilters.length > 0 && quickFiltersRef.current.length > 0) {
            quickFiltersRef.current[quickFilters.length - 1]?.focus();
        }
    }, [articles]);
    return (_jsxs(StyledSearchFilters, { ...restProps, children: [_jsx(Flex, { container: { alignItems: 'center', gap: 1, pad: [0.5, undefined] }, children: _jsx(SearchInput, { ...searchInput }) }), quickFilters.map(({ id, name }, i) => (_jsx(StyledSelectable, { id: id, ref: (el) => {
                    quickFiltersRef.current[i] = el;
                }, onRemove: handleQuickFilterRemove ? () => handleQuickFilterRemove?.(id) : undefined, onClick: handleQuickFilterRemove ? () => handleQuickFilterRemove?.(id) : undefined, children: name }))), _jsxs(StyledFilterContainer, { container: { gap: 1, alignItems: 'start' }, children: [category && _jsx(ComboBox, { ...category }), sortBy && _jsx(ComboBox, { ...sortBy }), onClearClick && (_jsx(StyledClearButton, { variant: 'link', label: t('clear'), "aria-label": t('clear_filters'), onClick: onClearClick, children: t('clear') }))] }), showResults && _jsx(Text, { variant: 'secondary', children: searchResults })] }));
};
export default ArticleListFilter;
//# sourceMappingURL=ArticleListFilter.js.map