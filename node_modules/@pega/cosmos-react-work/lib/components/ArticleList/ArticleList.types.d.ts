import { MouseEvent, MouseEventHandler } from 'react';
import { Action, BaseProps, ComboBoxProps, OmitStrict, RequireAtLeastOne, SearchInputProps } from '@pega/cosmos-react-core';
import { ArticleMetaProps } from '../Article/ArticleMeta';
export interface ArticleSummaryProps extends BaseProps {
    /** Unique id of article */
    articleId: string;
    /** URL or DOM id to navigate to. This will render the nav item as a link. */
    href?: string;
    /** Article title */
    title: string;
    /** Article content */
    abstract: string;
    /** Callback fired when article title is clicked */
    onTitleClick?: (id?: string, event?: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => void;
    /** Primary actions which needs to be displayed with an icon */
    primaryActions?: Action[];
    /** A list of elements to be rendered within a MetaList. */
    meta?: ArticleMetaProps;
    /** Quick filters to filter articles */
    quickFilters?: QuickFilter[];
    /** callback fired when quick filter is clicked */
    onQuickFilterClick?: ArticleListProps['onQuickFilterClick'];
}
export interface Articles {
    /** List of articles */
    articles: ArticleSummaryProps[];
    /** count of articles */
    count?: number;
    /** Props related to the Search Input. */
    searchInput: OmitStrict<SearchInputProps, 'placeholder' | 'onSearchSubmit' | 'searchResults' | 'recentSearches' | 'advancedSearchLink' | 'resultsPopover'>;
    /** Props related to the Category Input. */
    category?: OmitStrict<ComboBoxProps, 'id' | 'labelHidden' | 'required' | 'disabled' | 'readOnly' | 'status' | 'info' | 'actions' | 'additionalInfo'>;
    /** Props related to the SortBy Input. */
    sortBy?: OmitStrict<ComboBoxProps, 'id' | 'labelHidden' | 'required' | 'disabled' | 'readOnly' | 'status' | 'info' | 'mode' | 'actions' | 'additionalInfo' | 'onChange' | 'value'>;
    /** Callback fired when clear button is clicked */
    onClearClick?: MouseEventHandler<HTMLButtonElement>;
    /** Quick filters to filter articles */
    quickFilters?: QuickFilter[];
    /** Callback fired when applied quick filter is removed */
    handleQuickFilterRemove?: (id: string) => void;
    /** Prop to enable show / hide results */
    showResults?: boolean;
}
export interface ArticleListHeaderProps {
    /** Title of article list */
    title: string;
    /** Article list header icon */
    icon?: string;
    /** Actions which needs to be displayed with an icon */
    actions?: Action[];
}
export type ArticleListProps = RequireAtLeastOne<{
    /** Props related to article list header */
    header?: ArticleListHeaderProps;
    /** Data of suggested articles */
    suggested?: Pick<Articles, 'articles' | 'count'>;
    /** Data of followed articles */
    followed?: Articles;
    /** Data of search articles */
    search?: Articles;
    /** current active tab whose list has to be rendered */
    activeTab: string;
    /** Callback fired when tab is clicked */
    onTabClick?: (name: string, event?: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => void;
    /**
     * Optionally renders an indeterminate progress indicator while articles are being fetched.
     * @default false
     */
    loading?: boolean;
    /**
     * Optionally renders an indeterminate progress indicator while progressively fetching articles
     * @default false
     */
    loadingMore?: boolean;
    /** callback fired when quick filter is clicked */
    onQuickFilterClick?: (quickFilterParam: QuickFilter, event: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => void;
    /** Callback to fetch more rows */
    onLoadMore?: () => void;
}, 'suggested' | 'followed' | 'search'>;
export interface QuickFilter {
    /** Unique id of quick Filter */
    id: string;
    /** Name of quick Filter */
    name: string;
}
export type ArticleListTabId = 'Suggested' | 'Followed' | 'Search';
//# sourceMappingURL=ArticleList.types.d.ts.map