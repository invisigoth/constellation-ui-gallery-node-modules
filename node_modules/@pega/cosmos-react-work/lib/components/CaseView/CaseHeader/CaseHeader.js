import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useLayoutEffect, useRef, useState } from 'react';
import { Breadcrumbs, Flex, getEdge, Icon, registerIcon, Text, Link, Button, MenuButton, throttle, useDirection, useI18n, useAfterInitialEffect } from '@pega/cosmos-react-core';
import * as pencilIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/pencil.icon';
import * as moreIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/more.icon';
import { StyledCaseHeader, StyledCaseIconWrap, StyledCaseHeaderText, StyledExpandCollapseSummaryButton, StyledSubheading, StyledHeaderActions, StyledCaseHeaderPromotedAction } from '../CaseView.styles';
import { useCaseViewContext } from '../CaseView.context';
import Summary from './Summary';
registerIcon(pencilIcon, moreIcon);
const CaseHeader = () => {
    const t = useI18n();
    const { ltr } = useDirection();
    const { testIds, caseId, icon, heading, subheading, actions, caseLink, parentCases, onEdit, followed, onFollowedChange, promotedActions, summaryExpanded, summaryFields, onToggleSummary, isPreview, aboveSM, aboveMD, persistentUtility } = useCaseViewContext();
    const [wrapPromotedActions, setWrapPromotedActions] = useState(false);
    const [summaryResetID, setSummaryResetID] = useState(Math.random());
    const wrapActionsBreakpoint = useRef(null);
    const contentsEl = useRef(null);
    const headerGroupEl = useRef(null);
    const actionsContainerEl = useRef(null);
    const caseActions = actions
        ? actions.map(action => {
            return {
                ...action,
                primary: action.text,
                visual: action.icon ? _jsx(Icon, { name: action.icon }) : null
            };
        })
        : undefined;
    const toggleButtonRef = useRef(null);
    // FIXME: This is a hack to get the Tooltip to reset its position when the summary changes layout.
    useAfterInitialEffect(() => {
        if (toggleButtonRef.current && toggleButtonRef.current === document.activeElement) {
            toggleButtonRef.current.blur();
            setTimeout(() => {
                toggleButtonRef.current?.focus();
            }, 0);
        }
    }, [summaryExpanded]);
    const showExpandCollapse = !isPreview && aboveMD;
    const collapsedMainHeader = (!isPreview && !aboveMD && aboveSM) || (showExpandCollapse && !summaryExpanded);
    // Actions wrapping
    useLayoutEffect(() => {
        if (!wrapPromotedActions &&
            contentsEl.current &&
            headerGroupEl.current &&
            actionsContainerEl.current) {
            const contentStart = getEdge({
                el: contentsEl.current,
                side: 'leading',
                ltr
            });
            const headerGroupEnd = getEdge({
                el: headerGroupEl.current,
                side: 'trailing',
                ltr
            });
            const actionsContainerWidth = actionsContainerEl.current.getBoundingClientRect().width;
            wrapActionsBreakpoint.current =
                Math.ceil(headerGroupEnd) - Math.ceil(contentStart) + Math.ceil(actionsContainerWidth);
        }
        const promotedActionsWrapHandler = () => {
            if (wrapActionsBreakpoint.current && contentsEl.current) {
                setWrapPromotedActions(Math.ceil(contentsEl.current.offsetWidth) < wrapActionsBreakpoint.current);
            }
        };
        const resizeObserver = new ResizeObserver(throttle(promotedActionsWrapHandler, 30));
        promotedActionsWrapHandler();
        if (contentsEl.current) {
            resizeObserver.observe(contentsEl.current, { box: 'border-box' });
        }
        return () => {
            resizeObserver.disconnect();
        };
    }, [
        contentsEl,
        headerGroupEl,
        actionsContainerEl,
        promotedActions,
        heading,
        subheading,
        wrapPromotedActions
    ]);
    // Reset summary
    useEffect(() => {
        setSummaryResetID(Math.random());
    }, [heading, summaryFields, promotedActions]);
    return (_jsxs(Flex, { "data-testid": testIds.header, as: StyledCaseHeader, container: { direction: 'column', gap: 1.5 }, children: [_jsxs(Flex, { container: true, ref: contentsEl, children: [showExpandCollapse && onToggleSummary && !persistentUtility && (_jsx(StyledExpandCollapseSummaryButton, { ref: toggleButtonRef, onClick: onToggleSummary, label: t(summaryExpanded ? 'collapse' : 'expand'), "aria-label": t(summaryExpanded ? 'collapse_summary' : 'expand_summary'), icon: true, compact: true, children: _jsx(Icon, { name: 'arrow-micro-left' }) })), icon && (_jsx(Flex, { container: true, item: { shrink: 0 }, as: StyledCaseIconWrap, children: icon })), _jsxs(Flex, { as: StyledCaseHeaderText, container: {
                            direction: 'column',
                            pad: [0.5, 2, 0.5, 1.5],
                            alignItems: 'start'
                        }, item: aboveSM ? { shrink: wrapPromotedActions ? 1 : 0 } : { shrink: 1, grow: 1 }, ref: headerGroupEl, children: [_jsx(Text, { "data-testid": testIds.heading, variant: 'h1', children: caseLink ? _jsx(Link, { ...caseLink, children: heading }) : heading }), subheading && (!parentCases || subheading !== caseId) && (_jsx(StyledSubheading, { "data-testid": testIds.subheading, children: subheading })), parentCases && (_jsx(Breadcrumbs, { forwardedAs: 'p', path: [
                                    ...parentCases,
                                    {
                                        ...caseLink,
                                        id: caseId,
                                        primary: caseId,
                                        href: caseLink?.href
                                    }
                                ], leafOnly: true }))] }), collapsedMainHeader && !wrapPromotedActions && (_jsx(Summary, { siblingRef: actionsContainerEl }, summaryResetID)), _jsxs(Flex, { as: StyledHeaderActions, item: { shrink: 0 }, container: { alignItems: 'start', pad: [0, 0, 0, 2] }, offsetEnd: !summaryExpanded, ref: actionsContainerEl, children: [collapsedMainHeader &&
                                !wrapPromotedActions &&
                                promotedActions &&
                                promotedActions.length > 0 ? (_jsx(_Fragment, { children: promotedActions.map(promotedAction => (_jsx(StyledCaseHeaderPromotedAction, { variant: 'secondary', onClick: (e) => promotedAction.onClick?.(promotedAction.id, e), children: promotedAction.text }, promotedAction.id))) })) : null, onEdit && (_jsx(Button, { "data-testid": testIds.edit, icon: true, variant: 'simple', onClick: onEdit, label: t('edit'), children: _jsx(Icon, { name: 'pencil' }) })), caseActions && (_jsx(MenuButton, { "data-testid": testIds.actions, icon: 'more', iconOnly: true, variant: 'simple', text: t('actions'), menu: {
                                    items: followed !== undefined
                                        ? [
                                            {
                                                id: 'follow',
                                                primary: followed ? t('unfollow') : t('follow'),
                                                onClick: () => onFollowedChange?.(!followed)
                                            },
                                            ...caseActions
                                        ]
                                        : caseActions,
                                    scrollAt: 20
                                } }))] })] }), (!collapsedMainHeader || wrapPromotedActions || !aboveSM) &&
                promotedActions &&
                promotedActions.length > 0 ? (_jsx(Flex, { "data-testid": testIds.promotedActions, container: { justify: 'start', wrap: 'wrap', gap: 1, pad: [0, 0, 0.5] }, children: promotedActions.map(({ id, text, onClick }) => (_jsx("div", { children: _jsx(StyledCaseHeaderPromotedAction, { variant: 'secondary', onClick: (e) => onClick?.(id, e), children: text }) }, text))) })) : null] }));
};
export default CaseHeader;
//# sourceMappingURL=CaseHeader.js.map