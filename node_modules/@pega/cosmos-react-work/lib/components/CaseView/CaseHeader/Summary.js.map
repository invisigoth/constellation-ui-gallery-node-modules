{"version":3,"file":"Summary.js","sourceRoot":"","sources":["../../../../src/components/CaseView/CaseHeader/Summary.tsx"],"names":[],"mappings":"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","sourcesContent":["import { RefObject, useEffect, useRef, useState } from 'react';\n\nimport {\n  Flex,\n  getEdge,\n  registerIcon,\n  StyledStackedFieldValue,\n  StyledLabel,\n  StyledFieldName,\n  useDirection,\n  useChToPxConversionFactor,\n  NoValue\n} from '@pega/cosmos-react-core';\nimport * as pencilIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/pencil.icon';\nimport * as moreIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/more.icon';\n\nimport {\n  StyledHeaderSummary,\n  StyledHeaderSummaryValue,\n  StyledHeaderSummaryBlock\n} from '../CaseView.styles';\nimport { useCaseViewContext } from '../CaseView.context';\nimport { SummaryField } from '../CaseView.types';\n\nregisterIcon(pencilIcon, moreIcon);\n\nconst Field = ({\n  item,\n  primary,\n  truncate\n}: {\n  item: SummaryField;\n  primary: boolean;\n  truncate: boolean;\n}) => {\n  const { name, value, simpleValue } = item;\n  const displayValue = simpleValue ?? value ?? <NoValue />;\n\n  return (\n    <StyledStackedFieldValue>\n      <StyledLabel as={StyledFieldName}>{name}</StyledLabel>\n      <StyledHeaderSummaryValue bold={primary} truncate={truncate}>\n        {displayValue}\n      </StyledHeaderSummaryValue>\n    </StyledStackedFieldValue>\n  );\n};\n\nconst Summary = ({ siblingRef }: { siblingRef: RefObject<HTMLDivElement> }) => {\n  const { ltr } = useDirection();\n  const { summaryFields } = useCaseViewContext();\n  const chToPxConversionFactor = useChToPxConversionFactor();\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const listRef = useRef<HTMLDListElement>(null);\n\n  const primaryItems = summaryFields?.primary ?? [];\n  const secondaryItems = summaryFields?.secondary ?? [];\n  const items = [...primaryItems, ...secondaryItems];\n\n  const [displayCount, setDisplayCount] = useState(items.length);\n  const [truncatedIndices, setTruncatedIndices] = useState<number[] | undefined>(\n    items.map((_, i) => i)\n  );\n\n  const priorTrailingEdgeStack = useRef<number[]>([]);\n  const priorAvailableSpace = useRef<number | null>(null);\n\n  const evalItemAddition = ({\n    nextSiblingLeadingEdge\n  }: {\n    nextSiblingLeadingEdge: number;\n  }): {\n    indicesToTruncate: number[];\n    nextDisplayCount: number;\n  } => {\n    const indicesToTruncate: number[] = truncatedIndices ? [...truncatedIndices] : [];\n    let nextDisplayCount = displayCount;\n\n    const reversedTrailingEdgeStack = [...priorTrailingEdgeStack.current].reverse();\n    for (let i = 0; i < reversedTrailingEdgeStack.length; i += 1) {\n      const priorEdge = reversedTrailingEdgeStack[i];\n\n      const shouldRender = ltr\n        ? priorEdge < nextSiblingLeadingEdge\n        : priorEdge > nextSiblingLeadingEdge;\n\n      if (shouldRender) {\n        priorTrailingEdgeStack.current.pop();\n\n        if (!indicesToTruncate.includes(nextDisplayCount)) {\n          indicesToTruncate.push(nextDisplayCount);\n        }\n\n        nextDisplayCount += 1;\n      } else {\n        break;\n      }\n    }\n\n    return { indicesToTruncate, nextDisplayCount };\n  };\n\n  const evalTruncationReduction = ({\n    listChildren,\n    availableSpace\n  }: {\n    listChildren: Element[];\n    availableSpace: number;\n  }): {\n    indicesToTruncate: number[];\n  } => {\n    const indicesToTruncate: number[] = [];\n    let hasAvailableSpace = availableSpace;\n\n    listChildren.forEach((item, index) => {\n      const valueEl = item.lastChild as HTMLElement;\n      const truncatedSpace = Math.floor(valueEl.scrollWidth - valueEl.offsetWidth);\n      const shouldTruncate = truncatedSpace === 0 ? false : hasAvailableSpace - truncatedSpace <= 0;\n\n      if (shouldTruncate) {\n        if (!truncatedIndices?.includes(index)) {\n          hasAvailableSpace += truncatedSpace;\n        }\n\n        indicesToTruncate.push(index);\n      } else if (truncatedIndices?.includes(index)) {\n        hasAvailableSpace -= truncatedSpace;\n      }\n    });\n\n    return { indicesToTruncate };\n  };\n\n  const evalTruncationIncrease = ({\n    listChildren,\n    availableSpace\n  }: {\n    listChildren: Element[];\n    availableSpace: number;\n  }): {\n    indicesToTruncate: number[];\n    availableSpace: number;\n  } => {\n    const indicesToTruncate: number[] = [];\n    const lastIndex = listChildren.length - 1;\n    let hasAvailableSpace = availableSpace;\n\n    [...listChildren].reverse().forEach((item, index) => {\n      if (truncatedIndices?.includes(lastIndex - index)) {\n        indicesToTruncate.push(lastIndex - index);\n      } else if (hasAvailableSpace < 0) {\n        const truncatedElMaxWidth = 20 * chToPxConversionFactor;\n        const valueEl = item.lastChild as HTMLElement;\n        const spaceToTruncate = Math.max(Math.floor(valueEl.offsetWidth - truncatedElMaxWidth), 0);\n\n        if (spaceToTruncate) {\n          indicesToTruncate.push(lastIndex - index);\n          hasAvailableSpace += spaceToTruncate;\n        }\n      }\n    });\n\n    return { indicesToTruncate, availableSpace: hasAvailableSpace };\n  };\n\n  const evalItemRemoval = ({\n    listChildren,\n    availableSpace,\n    nextSiblingLeadingEdge\n  }: {\n    listChildren: Element[];\n    availableSpace: number;\n    nextSiblingLeadingEdge: number;\n  }): { displayCount: number } => {\n    let nextDisplayCount = displayCount;\n    let hasAvailableSpace = availableSpace;\n    let lastChildIndex = listChildren.length - 1;\n\n    do {\n      const itemTrailingEdge = getEdge({\n        el: listChildren[lastChildIndex],\n        side: 'trailing',\n        ltr\n      });\n      hasAvailableSpace = Math.floor(\n        ltr ? nextSiblingLeadingEdge - itemTrailingEdge : itemTrailingEdge - nextSiblingLeadingEdge\n      );\n\n      if (hasAvailableSpace < 0) {\n        priorTrailingEdgeStack.current = [...priorTrailingEdgeStack.current, itemTrailingEdge];\n\n        nextDisplayCount -= 1;\n        lastChildIndex -= 1;\n      }\n    } while (hasAvailableSpace < 0 && lastChildIndex > -1);\n\n    return { displayCount: nextDisplayCount };\n  };\n\n  const evaluateSummaryDisplay = () => {\n    const containerEl = containerRef.current;\n    if (!containerEl) return;\n\n    const listChildren = Array.from(listRef.current?.children ?? []);\n    const lastSummaryItem = listChildren.length ? listChildren[listChildren.length - 1] : undefined;\n    const nextSibling = siblingRef?.current ?? document.body;\n    const nextSiblingLeadingEdge = getEdge({\n      el: nextSibling,\n      side: 'leading',\n      ltr\n    });\n    const testEdge = lastSummaryItem\n      ? getEdge({ el: lastSummaryItem, side: 'trailing', ltr })\n      : getEdge({ el: containerEl, side: 'leading', ltr });\n    let availableSpace = Math.floor(\n      ltr ? nextSiblingLeadingEdge - testEdge : testEdge - nextSiblingLeadingEdge\n    );\n    if (availableSpace === priorAvailableSpace.current) return;\n\n    priorAvailableSpace.current = availableSpace;\n\n    let indicesToTruncate: number[] | undefined;\n    let nextDisplayCount = displayCount;\n\n    if (availableSpace >= 0) {\n      if (displayCount !== items.length) {\n        const additionsConfig = evalItemAddition({ nextSiblingLeadingEdge });\n\n        indicesToTruncate = additionsConfig.indicesToTruncate;\n        nextDisplayCount = additionsConfig.nextDisplayCount;\n      } else if (truncatedIndices?.length) {\n        const truncationConfig = evalTruncationReduction({\n          listChildren,\n          availableSpace\n        });\n\n        indicesToTruncate = truncationConfig.indicesToTruncate;\n      }\n    } else if (listChildren) {\n      const truncationConfig = evalTruncationIncrease({\n        listChildren,\n        availableSpace\n      });\n\n      indicesToTruncate = truncationConfig.indicesToTruncate;\n      availableSpace = truncationConfig.availableSpace;\n\n      if (availableSpace < 0) {\n        const removalConfig = evalItemRemoval({\n          listChildren,\n          availableSpace,\n          nextSiblingLeadingEdge\n        });\n\n        nextDisplayCount = removalConfig.displayCount;\n      }\n    }\n\n    setDisplayCount(nextDisplayCount);\n\n    if (indicesToTruncate) {\n      setTruncatedIndices(indicesToTruncate);\n    }\n  };\n\n  // Initial display evaluation\n  useEffect(() => {\n    evaluateSummaryDisplay();\n  }, []);\n\n  // Overflow resize observer\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(evaluateSummaryDisplay);\n\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current, { box: 'border-box' });\n    }\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [evaluateSummaryDisplay]);\n\n  return (\n    <Flex\n      as={StyledHeaderSummaryBlock}\n      item={{ grow: 1, shrink: 1 }}\n      container={{ pad: [0.5, 0], alignItems: 'center' }}\n      ref={containerRef}\n      hasItems={displayCount > 0}\n    >\n      <Flex as={StyledHeaderSummary} container={{ gap: 4 }} ref={listRef}>\n        {items.slice(0, displayCount).map((item, index) => {\n          return (\n            <Field\n              item={item}\n              primary={!!primaryItems?.length && index < primaryItems.length}\n              truncate={!!truncatedIndices?.includes(index)}\n              key={item.name}\n            />\n          );\n        })}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Summary;\n"]}