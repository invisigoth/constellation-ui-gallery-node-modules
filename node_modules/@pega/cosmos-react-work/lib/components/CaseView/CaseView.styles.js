import styled, { css } from 'styled-components';
import { getContrast, hideVisually, meetsContrastGuidelines, parseToHsl, readableColor, rgba, transparentize } from 'polished';
import { Button, calculateFontSize, CardContent, defaultThemeProp, StyledBreadcrumbs, StyledButtonLink, StyledFieldValue, StyledStackedFieldValue, StyledIcon, StyledLabel, StyledPopover, StyledText, StyledTooltip, tryCatch, FieldValueList, StyledLink, readableHue, StyledCard, Text, useDirection } from '@pega/cosmos-react-core';
import { StyledMenu } from '@pega/cosmos-react-core/lib/components/Menu/Menu.styles';
import { colCountChWidth } from '@pega/cosmos-react-work/lib/components/Details/Details.styles';
import { StyledStage, StyledStages } from '../Stages/Stages.styles';
import { StyledAssignments } from '../Assignments/Assignments.styles';
import { useCaseViewContext } from './CaseView.context';
const labelChWidth = 16;
const inlineEndButtonOffset = '0.375rem';
export const StyledCaseSummaryFields = styled.div ``;
StyledCaseSummaryFields.defaultProps = defaultThemeProp;
export const StyledSummaryPrimaryList = styled(FieldValueList)(({ theme, wrapped }) => {
    const fontSizes = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
      ${wrapped
        ? css `
            grid-template-columns: minmax(0, 1fr);
          `
        : css `
            grid-template-columns: ${labelChWidth}ch auto;
          `}

      ${StyledFieldValue} {
        font-size: ${fontSizes[theme.components.text.h1['font-size']]};
        font-weight: ${theme.components.text.h1['font-weight']};
      }
    `;
});
StyledSummaryPrimaryList.defaultProps = defaultThemeProp;
export const StyledSummarySecondaryList = styled(FieldValueList)(() => {
    return css `
    ${StyledStackedFieldValue} {
      grid-column: 1 / -1;
    }
  `;
});
export const StyledSummaryTabContent = styled(CardContent)(({ theme }) => {
    const { base: { spacing } } = theme;
    const containerWidthCh = colCountChWidth[1].containerWidth;
    const containerWidthMinusLabel = `${containerWidthCh - labelChWidth}ch`;
    return css `
    ${StyledSummarySecondaryList} {
      > ${StyledStackedFieldValue} {
        max-width: ${containerWidthCh}ch;
      }

      > ${StyledFieldValue} {
        max-width: calc(${containerWidthMinusLabel} - 2 * ${spacing});
      }
    }
  `;
});
StyledSummaryTabContent.defaultProps = defaultThemeProp;
export const StyledCaseHeader = styled.header(({ theme }) => {
    const color = tryCatch(() => readableColor(theme.base.palette['brand-primary']));
    return css `
    background-color: ${theme.base.palette['brand-primary']};
    color: ${color};
    padding: ${theme.base.spacing} calc(2 * ${theme.base.spacing});
    position: relative;

    h1:focus-visible {
      outline: transparent;
      box-shadow: ${theme.base.shadow.focus};
    }

    ${StyledMenu} {
      color: ${theme.base.palette['foreground-color']};
      z-index: ${theme.base['z-index'].popover + 1};
    }
  `;
});
StyledCaseHeader.defaultProps = defaultThemeProp;
export const StyledCaseIconWrap = styled.div(({ theme }) => {
    const spacing = theme.base.spacing;
    const borderRadius = theme.base['border-radius'];
    const backgroundColor = tryCatch(() => {
        const { lightness } = parseToHsl(theme.base.palette['brand-primary']);
        return lightness > 0.35 ? 'rgba(0, 0, 0, 0.2)' : 'rgba(255, 255, 255, 0.2)';
    });
    return css `
    background: ${backgroundColor};
    width: calc(4 * ${spacing});
    height: calc(4 * ${spacing});
    border-radius: calc(${borderRadius} / 2);
    margin-block-start: ${spacing};

    ${StyledIcon} {
      font-size: calc(2 * ${spacing});
      margin: auto;
    }
  `;
});
StyledCaseIconWrap.defaultProps = defaultThemeProp;
export const StyledFollowIconWrap = styled.label `
  font-size: 1.25rem;
  input {
    ${hideVisually}
  }

  input:focus + svg {
    box-shadow: ${({ theme }) => theme.base.shadow.focus};
  }
`;
StyledFollowIconWrap.defaultProps = defaultThemeProp;
export const StyledSubheading = styled.p ``;
StyledSubheading.defaultProps = defaultThemeProp;
export const StyledHeaderActions = styled.div(({ offsetEnd, theme }) => {
    return css `
    margin-inline-start: auto;
    padding-block: ${theme.base.spacing};
    padding-inline-start: calc(2 * ${theme.base.spacing});

    ${offsetEnd &&
        css `
      padding-inline-end: ${inlineEndButtonOffset};
    `};
  `;
});
StyledHeaderActions.defaultProps = defaultThemeProp;
export const StyledCaseHeaderText = styled.hgroup(({ theme }) => {
    const color = readableColor(theme.base.palette['brand-primary']);
    const transparentColor = tryCatch(() => transparentize(0.1, color));
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    const idStyle = css `
    color: ${transparentColor};
    font-size: ${fontSize.s};
    font-weight: normal;
  `;
    return css `
    word-break: break-word;

    ${StyledSubheading} {
      ${idStyle}
    }

    ${StyledBreadcrumbs} {
      max-width: 100%;

      > a,
      > span,
      > button,
      > svg {
        ${idStyle}
      }

      > a,
      > button {
        &:focus {
          box-shadow: ${theme.base.shadow.focus};
        }
      }

      ${StyledPopover}:not(${StyledTooltip}) {
        color: ${theme.base.palette['foreground-color']};
      }
    }

    > ${StyledText} > ${StyledLink} {
      color: ${color};
    }

    + ${StyledHeaderActions} {
      padding-inline-start: 0;
    }
  `;
});
StyledCaseHeaderText.defaultProps = defaultThemeProp;
export const StyledCaseHeaderPromotedAction = styled(Button)(({ theme }) => {
    const { base: { palette: { 'brand-primary': primary, interactive } } } = theme;
    const interactiveUsable = getContrast(primary, interactive) >= 4.5;
    const color = interactiveUsable ? interactive : readableColor(primary);
    let hoverBackground = rgba(color, 0.15);
    if (interactiveUsable) {
        hoverBackground = readableHue(hoverBackground, color);
    }
    return css `
    --button-background-color: ${primary};
    color: ${color};
    background-color: ${primary};
    border-color: ${color};

    @media (hover: hover) {
      &:hover {
        --button-background-color: ${hoverBackground};
        color: ${color};
        background-color: ${hoverBackground};
        border-color: ${color};
      }
    }
  `;
});
StyledCaseHeaderPromotedAction.defaultProps = defaultThemeProp;
export const StyledHeaderSummaryBlock = styled.div(({ hasItems, theme }) => {
    const { base: { spacing, palette: { 'brand-primary': primary } } } = theme;
    const color = readableColor(primary);
    const transparentColor = tryCatch(() => transparentize(0.5, color));
    return css `
    ${hasItems &&
        css `
      border-inline-start: 0.0625rem solid ${transparentColor};
    `}

    ${StyledStackedFieldValue}:first-child {
      margin-inline-start: calc(2 * ${spacing});
    }
  `;
});
StyledHeaderSummaryBlock.defaultProps = defaultThemeProp;
const popoverColorReset = (theme) => {
    const { base: { palette: { interactive, light, 'foreground-color': baseForeground } } } = theme;
    return css `
    ${StyledPopover}:not(${StyledTooltip}) {
      color: ${baseForeground};

      ${StyledButtonLink},
      ${StyledLink} {
        color: ${interactive};
        text-decoration: none;

        &:hover,
        &:active {
          text-decoration: underline;
        }

        &:focus {
          box-shadow: inset 0 0 0 0.0625rem ${light}, 0 0 0.125rem 0.0625rem ${interactive};
        }
      }
    }
  `;
};
export const StyledHeaderSummary = styled.dl(({ theme }) => {
    const { base: { palette: { 'brand-primary': primary, interactive } } } = theme;
    const interactiveUsable = meetsContrastGuidelines(primary, interactive).AA;
    const color = readableColor(primary);
    const transparentColor = tryCatch(() => transparentize(0.1, color));
    return css `
    max-width: 100%;
    min-width: 0;

    > ${StyledStackedFieldValue} {
      > ${StyledLabel} {
        color: ${transparentColor};
        white-space: nowrap;
      }

      > ${StyledFieldValue} {
        color: ${color};
        white-space: nowrap;
      }

      ${StyledButtonLink},
      ${StyledLink} {
        &:focus-visible {
          box-shadow: inset 0 0 0 0.0625rem ${color};
        }

        ${!interactiveUsable &&
        css `
          color: ${color};
          text-decoration: underline;
        `}
      }

      ${popoverColorReset(theme)}
    }
  `;
});
StyledHeaderSummary.defaultProps = defaultThemeProp;
export const StyledHeaderSummaryValue = styled(StyledFieldValue)(({ bold, truncate, theme }) => {
    const { base: { 'content-width': { xs } }, components: { text: { h1: { 'font-weight': h1Weight } } } } = theme;
    return css `
      overflow: hidden;
      text-overflow: ellipsis;

      ${truncate &&
        css `
        max-width: ${xs};
      `}

      ${bold &&
        css `
        font-weight: ${h1Weight};
      `}

      /*
       * :not([hidden]) necessary to prevent hidden span with preview a11y instructions from
       * factoring into scrollWidth of element when determining truncation.
       */
      > :not([hidden]) {
        display: inline;
      }
    `;
});
StyledHeaderSummaryValue.defaultProps = defaultThemeProp;
export const StyledCaseSummaryInfo = styled.div(() => {
    const { intelligentGuidance } = useCaseViewContext();
    return css `
    overflow: auto;
    flex: 1;
    ${intelligentGuidance &&
        css `
      /* Accounts for collapsed intelligentGuidance list covering summary panel content when fully scrolled. */
      padding-block-end: 4rem;
    `}
  `;
});
StyledCaseSummaryInfo.defaultProps = defaultThemeProp;
export const StyledCaseSummaryContainer = styled.div(({ theme }) => {
    return css `
    padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);
  `;
});
StyledCaseSummaryContainer.defaultProps = defaultThemeProp;
export const StyledExpandCollapseButton = styled(Button)(() => {
    return css `
    border: none;

    ${StyledIcon} {
      width: 1.5rem;
      height: 1.5rem;
    }
  `;
});
StyledExpandCollapseButton.defaultProps = defaultThemeProp;
export const StyledExpandCollapseSummaryButton = styled(StyledExpandCollapseButton)(({ theme }) => {
    const { summaryExpanded } = useCaseViewContext();
    const { rtl } = useDirection();
    return css `
    --half-compact-btn-height: calc(${theme.base['hit-area'].compact} / 2);
    --half-btn-compact-difference: calc(
      (${theme.base['hit-area'].mouse} - ${theme.base['hit-area'].compact}) / 2
    );
    --half-case-icon-compact-difference: calc(
      ((4 * ${theme.base.spacing}) - ${theme.base['hit-area'].compact}) / 2
    );
    @media (pointer: coarse) {
      --half-btn-compact-difference: calc(
        (${theme.base['hit-area'].finger} - ${theme.base['hit-area'].compact}) / 2
      );
    }
    position: absolute;
    z-index: 1;
    box-shadow: ${theme.base.shadow.low};

    ${summaryExpanded
        ? css `
          inset-block-start: calc(2 * ${theme.base.spacing} + var(--half-btn-compact-difference));
          inset-inline-start: calc(100% - var(--half-compact-btn-height));
        `
        : css `
          inset-block-end: calc(var(--half-compact-btn-height) * -1);
          inset-inline-start: calc(
            2 * ${theme.base.spacing} + var(--half-case-icon-compact-difference)
          );
        `}

    ${StyledIcon} {
      ${summaryExpanded
        ? css `
            transform: rotate(${rtl ? '180deg' : '0'});
          `
        : css `
            transform: rotate(-90deg);
          `}
    }
  `;
});
StyledExpandCollapseSummaryButton.defaultProps = defaultThemeProp;
export const StyledCaseSummary = styled.div(() => {
    const { summaryExpanded, aboveMD } = useCaseViewContext();
    return css `
    position: relative;
    height: 100%;
    ${aboveMD &&
        summaryExpanded &&
        css `
      width: 25rem;
    `}
  `;
});
export const StyledWorkArea = styled.div(({ theme }) => {
    const { summaryExpanded, aboveMD, intelligentGuidance, stages, tasks } = useCaseViewContext();
    let pbeRem = 0;
    if (intelligentGuidance) {
        pbeRem = aboveMD && !summaryExpanded ? 4 : 6;
    }
    return css `
    grid-area: work-area;
    padding: calc(2 * ${theme.base.spacing});

    ${aboveMD &&
        css `
      padding: calc(2 * ${theme.base.spacing}) 0;

      /* This is required to make scrollStick work. */
      height: max-content;

      ${!summaryExpanded &&
            css `
        margin-inline-start: calc(2 * ${theme.base.spacing});
      `}
    `}

    /* Order of style here is necessary for overriding styles above. */
    ${pbeRem > 0 &&
        css `
      /* Accounts for collapsed intelligentGuidance bubble covering work area content when fully scrolled. */
      padding-block-end: ${pbeRem}rem;
    `}

    ${stages &&
        tasks &&
        css `
      ${StyledStages} {
        border-block-end: 0.0625rem solid ${theme.base.palette['border-line']};

        &,
        > ${StyledStage}:first-child {
          border-end-start-radius: 0;
        }

        &,
        > ${StyledStage}:last-child {
          border-end-end-radius: 0;
        }
      }

      ${StyledCard}${StyledAssignments} {
        margin-block-start: calc(-2 * ${theme.base.spacing});
        border-start-start-radius: 0;
        border-start-end-radius: 0;
      }
    `}
  `;
});
StyledWorkArea.defaultProps = defaultThemeProp;
export const StyledUtilitiesHeading = styled(Text) ``;
export const StyledExpandCollapseUtilitiesButton = styled(StyledExpandCollapseButton)(() => {
    const { utilitiesExpanded } = useCaseViewContext();
    const { rtl } = useDirection();
    return css `
    /* Centers button over the utilities summary */
    margin-inline-end: ${utilitiesExpanded && '0.625rem'};

    ${StyledIcon} {
      ${utilitiesExpanded !== rtl
        ? css `
            transform: rotate(180deg);
          `
        : css `
            transform: rotate(0);
          `}
    }
  `;
});
StyledExpandCollapseUtilitiesButton.defaultProps = defaultThemeProp;
export const StyledUtilities = styled.div(({ theme }) => {
    const { utilitiesExpanded, aboveLG, aboveMD } = useCaseViewContext();
    return css `
    height: max-content;
    margin-block: calc(2 * ${theme.base.spacing});

    /* If utilities are in an expanded drawer. */
    ${utilitiesExpanded &&
        aboveMD &&
        !aboveLG &&
        css `
      /* Maintains the column width to avoid page content shift. */
      visibility: hidden;
    `}

    ${aboveLG &&
        utilitiesExpanded &&
        css `
      width: 25rem;
    `}


    /* Selects the h2 in the utilities column, not the drawer. */
    ${StyledUtilitiesHeading} {
      /* Hide the utilities h2 under certain conditions.*/
      ${((aboveMD && !utilitiesExpanded) || (aboveMD && utilitiesExpanded && !aboveLG)) &&
        hideVisually()}
    }
  `;
});
StyledUtilities.defaultProps = defaultThemeProp;
export const StyledSummary = styled.div(({ theme }) => {
    const { summaryExpanded, aboveMD } = useCaseViewContext();
    return css `
    top: ${summaryExpanded ? 'var(--top-offset)' : 'var(--appshell-offset, 0)'};
    width: 100%;
    background-color: ${theme.base.palette['primary-background']};
    z-index: ${theme.base['z-index'].popover};

    ${aboveMD &&
        summaryExpanded &&
        css `
      height: var(--case-view-height);
    `}

    ${aboveMD
        ? css `
          position: sticky;
        `
        : css `
          @media (min-height: ${theme.base.breakpoints.sm}) {
            position: sticky;
          }
        `}
  `;
});
StyledSummary.defaultProps = defaultThemeProp;
export const StyledCaseDrawer = styled.div(({ theme }) => {
    return css `
    min-width: 21.875rem;
    max-width: 31.25rem;
    width: calc((100vw - 31.25rem) / 10 + 21.875rem);
    background-color: ${theme.base.palette['primary-background']};
    height: var(--case-view-height);
    top: var(--top-offset);
    z-index: ${theme.base['z-index'].drawer - 1};
  `;
});
StyledCaseDrawer.defaultProps = defaultThemeProp;
export const StyledCaseDrawerContent = styled.div(({ theme }) => {
    return css `
    background-color: ${theme.base.palette['app-background']};
    padding: calc(2 * ${theme.base.spacing});
    height: 100%;
    overflow: auto;
  `;
});
StyledCaseDrawerContent.defaultProps = defaultThemeProp;
export const StyledPersistentUtility = styled.div(({ theme }) => {
    return css `
    width: ${theme.base['content-width'].md};
    overflow: auto;
    position: sticky;
    z-index: 1;
    height: var(--case-view-height);
    top: var(--top-offset);
    padding-block: calc(2 * ${theme.base.spacing});
  `;
});
StyledPersistentUtility.defaultProps = defaultThemeProp;
export const ScrollStick = styled.div `
  position: sticky;
  top: 0;
`;
export const StyledCaseView = styled.div(({ theme }) => {
    const { aboveMD } = useCaseViewContext();
    return css `
    --top-offset: calc(var(--appshell-offset, 0rem) + var(--summary-height));
    --case-view-height: calc(100vh - var(--top-offset));
    position: relative;
    min-height: var(--case-view-height);
    background-color: ${theme.base.palette['app-background']};

    ${aboveMD &&
        css `
      ${StyledUtilities}:last-child {
        margin-inline-end: calc(2 * ${theme.base.spacing});
      }
    `}
  `;
});
StyledCaseView.defaultProps = defaultThemeProp;
export const StyledUtilitiesHeader = styled(Text) `
  align-self: center;

  &:not(:focus) {
    ${hideVisually}
  }
`;
StyledUtilitiesHeader.defaultProps = defaultThemeProp;
//# sourceMappingURL=CaseView.styles.js.map