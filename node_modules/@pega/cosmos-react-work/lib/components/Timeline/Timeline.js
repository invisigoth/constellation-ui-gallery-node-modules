import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect, useState } from 'react';
import { Progress, useConsolidatedRef, useItemIntersection, DateTimeDisplay, Grid } from '@pega/cosmos-react-core';
import { groupByActivity, sortByDate } from './utils';
import { StyledDate, StyledTimeline, StyledLoadingCell } from './Timeline.styles';
import TimelineItem from './TimelineItem';
const Timeline = forwardRef(function Timeline({ activity, currentTime, sortOrder = 'descending', groupBy = 'date', loading, loadMore, ...restProps }, ref) {
    const [sortedData, setSortedData] = useState(() => sortByDate(activity, sortOrder));
    const listRef = useConsolidatedRef(ref);
    useItemIntersection(listRef, activity.length - 1, () => {
        if (!loading)
            loadMore?.();
    }, `:scope li > div`);
    useEffect(() => {
        setSortedData(sortByDate(activity, sortOrder));
    }, [activity, sortOrder]);
    return (_jsxs(Grid, { ...restProps, container: {
            cols: 'auto 1fr',
            colGap: 0.75,
            alignItems: 'start'
        }, sm: { container: { cols: 'auto auto  1fr', colGap: 0.25 } }, as: StyledTimeline, ref: listRef, children: [groupBy === 'none'
                ? sortedData.map((item, index) => (_jsx(TimelineItem, { item: item, timeFormat: 'datetime', prevItemDate: sortedData[index - 1]?.date, nextItemDate: sortedData[index + 1]?.date, currentTime: currentTime }, item.id)))
                : groupByActivity(sortedData, groupBy).map(groupedData => (_jsxs(Grid, { item: { colStartEnd: '1/-1' }, as: 'li', children: [_jsx(DateTimeDisplay, { as: StyledDate, variant: groupBy, format: 'long', value: groupedData[0].date }), _jsx("ol", { children: groupedData.map((item, index) => (_jsx(TimelineItem, { item: item, timeFormat: groupBy === 'date' ? 'time' : 'datetime', prevItemDate: groupedData[index - 1]?.date, nextItemDate: groupedData[index + 1]?.date, currentTime: currentTime }, item.id))) })] }, groupedData[0].id))), loading && (_jsx("li", { children: _jsx(StyledLoadingCell, { children: _jsx(Progress, { placement: 'local' }) }) }))] }));
});
export default Timeline;
//# sourceMappingURL=Timeline.js.map