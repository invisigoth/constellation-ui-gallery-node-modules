import styled, { css } from 'styled-components';
import { Button, calculateFontSize, Card, CardContent, DateTimeDisplay, defaultThemeProp, Flex, Grid, StyledBackdrop, StyledIcon, useDirection } from '@pega/cosmos-react-core';
export const StyledCard = styled(Card)(({ theme }) => {
    return css `
    border-block-start: 0.0625rem solid ${theme.base.palette['border-line']};
    padding-block: ${theme.base.spacing};
    &:not(& &) {
      border-radius: 0;
      background-color: transparent;
    }
  `;
});
StyledCard.defaultProps = defaultThemeProp;
export const StyledCardContent = styled(CardContent)(({ theme }) => {
    return css `
    &:not(${StyledCard} ${StyledCard} > &) {
      padding: ${theme.base.spacing} 0 ${theme.base.spacing} ${theme.base['hit-area']['mouse-min']};
      @media (pointer: coarse) {
        padding-inline-start: ${theme.base['hit-area']['finger-min']};
      }
    }
  `;
});
StyledCardContent.defaultProps = defaultThemeProp;
export const StyledToggleButton = styled(Button)(({ theme, collapsed }) => {
    return css `
    transition: transform calc(2 * ${theme.base.animation.speed})
      ${theme.base.animation.timing.ease};
    transform: ${collapsed ? 'rotate(-90deg)' : 'rotate(0)'};
  `;
});
StyledToggleButton.defaultProps = defaultThemeProp;
export const StyledCardHeader = styled(Grid) `
  padding: 0;
  min-height: 2rem;
`;
StyledCardHeader.defaultProps = defaultThemeProp;
export const StyledTimelineIcon = styled(Flex)(({ theme }) => {
    return css `
    border-radius: 50%;
    color: ${theme.base.palette.light};
    background: ${theme.base.palette.info};
    & > ${StyledIcon} {
      height: 1em;
      width: 1em;
    }
  `;
});
StyledTimelineIcon.defaultProps = defaultThemeProp;
export const StyledBulletWrapper = styled.span(({ theme, hasPrev, hasNext, isPrevFuture, isNextFuture, hasIcon }) => {
    const { rtl } = useDirection();
    return css `
      height: 100%;
      position: relative;
      text-align: center;
      padding-block-start: calc(2.25 * ${theme.base.spacing} + 0.0625rem);
      min-width: 2rem;

      ${hasPrev &&
        css `
        &::before {
          content: '';
          display: block;
          position: absolute;
          inset-block-start: 0;
          inset-inline-start: 50%;
          transform: translateX(${rtl ? '50%' : '-50%'});
          width: 0.0625rem;
          height: calc(2.25 * ${theme.base.spacing} + 0.75rem);
          border-inline-start: 0.0625rem ${isPrevFuture ? 'dashed' : 'solid'}
            ${theme.base.palette.info};
        }
      `}

      ${hasNext &&
        css `
        &::after {
          content: '';
          display: block;
          position: absolute;
          inset-block-start: calc(2.25 * ${theme.base.spacing} + 0.75rem);
          inset-inline-start: 50%;
          transform: translateX(${rtl ? '50%' : '-50%'});
          width: 0.0625rem;
          height: calc(100% - 2.25 * ${theme.base.spacing} - 0.75rem);
          border-inline-start: 0.0625rem ${isNextFuture ? 'dashed' : 'solid'}
            ${theme.base.palette.info};
        }
      `}

      & > ${StyledTimelineIcon} {
        position: relative;
        margin: 0;
        z-index: 1;
        width: ${hasIcon ? '1.5rem' : '0.5rem'};
        height: ${hasIcon ? '1.5rem' : '0.5rem'};
      }

      @media (min-width: ${theme.base.breakpoints.sm}) {
        padding-block-start: calc(${theme.base.spacing} + 0.0625rem);
        &::before {
          height: calc(${theme.base.spacing} + 0.75rem);
        }
        &::after {
          inset-block-start: calc(${theme.base.spacing} + 0.75rem);
          height: calc(100% - ${theme.base.spacing} - 0.75rem);
        }
      }
    `;
});
StyledBulletWrapper.defaultProps = defaultThemeProp;
export const StyledDate = styled.h2(({ theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, spacing }, components: { text } } }) => {
    const fontSizes = calculateFontSize(fontSize, fontScale);
    return css `
      grid-column: 1 / -1;
      padding-block: calc(3 * ${spacing}) calc(1.25 * ${spacing});
      font-size: ${fontSizes[text.h2['font-size']]};
      font-weight: ${text.h2['font-weight']};
    `;
});
StyledDate.defaultProps = defaultThemeProp;
export const StyledTimeline = styled.ol(({ theme }) => {
    return css `
    ol,
    li {
      display: contents;
    }

    li:first-child ${StyledDate} {
      padding-block-start: 0;
    }

    @media (min-width: ${theme.base.breakpoints.sm}) {
      ${StyledCard} {
        padding-block: calc(0.5 * ${theme.base.spacing});
      }
    }
  `;
});
StyledTimeline.defaultProps = defaultThemeProp;
export const StyledTime = styled(DateTimeDisplay)(({ theme }) => {
    return css `
    opacity: ${theme.base.transparency['transparent-2']};
    white-space: nowrap;
    @media (min-width: ${theme.base.breakpoints.sm}) {
      text-align: end;
      line-height: ${theme.base['hit-area']['mouse-min']};
      padding-block-start: calc(0.5 * ${theme.base.spacing} + 0.0625rem);
    }
  `;
});
StyledTime.defaultProps = defaultThemeProp;
export const StyledLoadingCell = styled.div `
  grid-column: 1 / -1;
  position: relative;
  height: 2.8rem;

  ${StyledBackdrop} {
    background: transparent;
  }
`;
//# sourceMappingURL=Timeline.styles.js.map