import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { CardHeader, useI18n, EmptyState, ExpandCollapse, Icon, Text, Count, Flex, useUID } from '@pega/cosmos-react-core';
import TaskList, { TaskItem } from '../Tasks/TaskList';
import { StyledAssignments, StyledCardContent, StyledExpandButton } from './Assignments.styles';
const Assignments = ({ items, count, collapsed, onToggleCollapsed, ...restProps }) => {
    const openItem = items.find(item => item.content);
    const t = useI18n();
    const assignmentsId = useUID();
    const TaskItems = useMemo(() => {
        return openItem ? _jsx(TaskItem, { ...openItem }) : _jsx(TaskList, { items: items });
    }, [items, openItem]);
    const tasks = (_jsx(StyledCardContent, { openItem: openItem, children: items.length > 0 ? TaskItems : _jsx(EmptyState, {}) }));
    const header = (_jsxs(Flex, { container: { alignItems: 'center', gap: 1 }, children: [typeof collapsed === 'boolean' && _jsx(Icon, { name: 'caret-right' }), _jsx(Text, { variant: 'h2', children: t('assignments') }), _jsx(Count, { children: count })] }));
    return (_jsxs(StyledAssignments, { ...restProps, openItem: !!openItem, "data-app-region": true, children: [!openItem && (_jsxs(CardHeader, { container: { justify: 'start', alignItems: 'center', gap: 1 }, children: [typeof collapsed === 'boolean' && onToggleCollapsed && (_jsx(StyledExpandButton, { type: 'button', variant: 'text', onClick: () => {
                            onToggleCollapsed();
                        }, "aria-controls": assignmentsId, "aria-expanded": !collapsed ? 'true' : 'false', "aria-label": t('assignments'), children: header })), collapsed === undefined && header] })), typeof collapsed === 'boolean' && onToggleCollapsed && !openItem ? (_jsx(ExpandCollapse, { collapsed: collapsed, children: tasks })) : (tasks)] }));
};
export default Assignments;
//# sourceMappingURL=Assignments.js.map