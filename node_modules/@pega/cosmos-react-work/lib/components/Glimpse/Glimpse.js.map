{"version":3,"file":"Glimpse.js","sourceRoot":"","sources":["../../../src/components/Glimpse/Glimpse.tsx"],"names":[],"mappings":";AAAA,OAAO,EACL,UAAU,EAMX,MAAM,OAAO,CAAC;AAEf,OAAO,EAEL,MAAM,EAEN,cAAc,EAEd,IAAI,EAEJ,UAAU,EAIV,OAAO,EACR,MAAM,yBAAyB,CAAC;AAsBjC,MAAM,OAAO,GAAmD,UAAU,CAAC,SAAS,OAAO,CACzF,EACE,OAAO,EACP,MAAM,GAAG,EAAE,EACX,MAAM,EACN,SAAS,EACT,IAAI,EACJ,QAAQ,EACR,aAAa,EACb,GAAG,SAAS,EACkB,EAChC,GAAwB;IAExB,MAAM,CAAC,GAAG,OAAO,EAAE,CAAC;IAEpB,OAAO,CACL,KAAC,UAAU,OACL,SAAS,EACb,MAAM,EAAE,MAAM,EACd,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,GAAG,EAAE,GAAG,YAER,MAAC,IAAI,IAAC,SAAS,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,aAClE,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,KAAC,cAAc,IAAC,MAAM,EAAE,MAAM,GAAI,EAEvD,CAAC,aAAa,IAAI,IAAI,CAAC,IAAI,CAC1B,KAAC,MAAM,IACL,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,CAAC,CAAgC,EAAE,EAAE;wBAC5C,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;wBACnB,SAAS,EAAE,CAAC;oBACd,CAAC,YAEA,CAAC,CAAC,cAAc,CAAC,GACX,CACV,IACI,GACI,CACd,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,eAAe,OAAO,CAAC","sourcesContent":["import {\n  forwardRef,\n  FunctionComponent,\n  MouseEvent,\n  MouseEventHandler,\n  PropsWithoutRef,\n  Ref\n} from 'react';\n\nimport {\n  BaseProps,\n  Button,\n  ButtonProps,\n  FieldValueList,\n  FieldValueListProps,\n  Flex,\n  ForwardProps,\n  InfoDialog,\n  InfoDialogProps,\n  NoChildrenProp,\n  OmitStrict,\n  useI18n\n} from '@pega/cosmos-react-core';\n\ntype InfoDialogSummaryHeading = Extract<InfoDialogProps['heading'], object>;\n\nexport interface GlimpseProps\n  extends BaseProps,\n    OmitStrict<InfoDialogProps, 'children'>,\n    NoChildrenProp {\n  /** The unique id for the operator. */\n  id: string;\n  /** Primary, secondary and avatar for the glimpse. */\n  heading?: InfoDialogSummaryHeading;\n  /** The set of field values to render in the list. */\n  fields?: FieldValueListProps['fields'];\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLDivElement>;\n  /** Callback for click event on View profile button. Passing this will render View profile button */\n  onViewProfile?: MouseEventHandler<HTMLButtonElement>;\n  /** A URL location to navigate to. Passing an href will render View profile button as a link. */\n  href?: ButtonProps['href'];\n}\n\nconst Glimpse: FunctionComponent<GlimpseProps & ForwardProps> = forwardRef(function Glimpse(\n  {\n    heading,\n    fields = [],\n    target,\n    onDismiss,\n    href,\n    progress,\n    onViewProfile,\n    ...restProps\n  }: PropsWithoutRef<GlimpseProps>,\n  ref: GlimpseProps['ref']\n) {\n  const t = useI18n();\n\n  return (\n    <InfoDialog\n      {...restProps}\n      target={target}\n      heading={heading}\n      progress={progress}\n      onDismiss={onDismiss}\n      ref={ref}\n    >\n      <Flex container={{ direction: 'column', alignItems: 'start', gap: 2 }}>\n        {fields.length > 0 && <FieldValueList fields={fields} />}\n\n        {(onViewProfile || href) && (\n          <Button\n            href={href}\n            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n              onViewProfile?.(e);\n              onDismiss();\n            }}\n          >\n            {t('view_profile')}\n          </Button>\n        )}\n      </Flex>\n    </InfoDialog>\n  );\n});\n\nexport default Glimpse;\n"]}