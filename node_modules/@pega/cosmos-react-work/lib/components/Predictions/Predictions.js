import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect, useMemo, useRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { registerIcon, useI18n, Modal, useModalManager, InfoDialog, StyledLabel, Text, SummaryList, defaultThemeProp } from '@pega/cosmos-react-core';
import * as polarisIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/polaris.icon';
import * as informationIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/information.icon';
registerIcon(polarisIcon, informationIcon);
// Expand minimum width to ensure the chart is readable enough
const StyledPredictionExplanationDialog = styled(InfoDialog)(({ theme }) => {
    return css `
    min-width: min(${theme.base['content-width'].md}, calc(100vw - 2rem));
  `;
});
StyledPredictionExplanationDialog.defaultProps = defaultThemeProp;
const PredictionsList = forwardRef(function PredictionsList({ items: itemsProp, progress, ...restProps }, ref) {
    const t = useI18n();
    const [currentItemIdTarget, setCurrentItemIdTarget] = useState();
    const currentItem = itemsProp?.find(({ id }) => id === currentItemIdTarget?.id);
    const items = useMemo(() => (itemsProp ?? []).map(item => ({
        id: item.id,
        primary: _jsx(StyledLabel, { forwardedAs: 'span', children: item.label }),
        secondary: (_jsx(Text, { variant: 'h1', as: 'span', children: item.value })),
        overflowStrategy: 'ellipsis',
        actions: item.additionalInfo
            ? [
                {
                    id: item.id,
                    text: t('learn_more'),
                    icon: 'information',
                    onClick: (id, e) => {
                        setCurrentItemIdTarget({
                            id: item.id,
                            target: e.currentTarget
                        });
                    }
                }
            ]
            : undefined
    })), [itemsProp]);
    return (_jsxs(_Fragment, { children: [_jsx(SummaryList, { ...restProps, loading: progress, ref: ref, items: items }), currentItemIdTarget && currentItem?.additionalInfo && (_jsx(StyledPredictionExplanationDialog, { heading: currentItem.label, target: currentItemIdTarget.target, onDismiss: () => {
                    setCurrentItemIdTarget(undefined);
                }, children: currentItem.additionalInfo }))] }));
});
const PredictionsViewAllModal = ({ count, progress, ...restProps }) => {
    const t = useI18n();
    return (_jsx(Modal, { heading: t('all_predictions'), count: count, progress: progress, children: _jsx(PredictionsList, { ...restProps }) }));
};
const Predictions = forwardRef(function Predictions({ count, items, progress, ...restProps }, ref) {
    const t = useI18n();
    const { create } = useModalManager();
    const viewAllModalRef = useRef();
    useEffect(() => {
        viewAllModalRef.current?.update({
            items,
            progress,
            count
        });
    }, [items, progress, count]);
    return (_jsx(PredictionsList, { ...restProps, ref: ref, name: t('predictions'), headingTag: 'h3', icon: 'polaris', count: count, items: items?.slice(0, 3), progress: progress, onViewAll: () => {
            viewAllModalRef.current = create(PredictionsViewAllModal, {
                items,
                progress,
                count
            });
        } }));
});
export default Predictions;
//# sourceMappingURL=Predictions.js.map