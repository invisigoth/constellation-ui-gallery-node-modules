import styled, { css } from 'styled-components';
import { lighten, readableColor, rgba, transparentize } from 'polished';
import { defaultThemeProp, StyledButton, StyledCard, StyledFlex, StyledIcon, StyledEmptyState, SummaryList, StyledText, tryCatch, StyledSummaryItem, StyledVisual, readableHue, Text, calculateFontSize, StyledSecondary } from '@pega/cosmos-react-core';
import { StyledCardHeader } from '@pega/cosmos-react-core/lib/components/Card/CardHeader';
import { StyledTabs } from '@pega/cosmos-react-core/lib/components/Tabs/Tabs';
import { StyledTab } from '@pega/cosmos-react-core/lib/components/Tabs/Tab';
import { StyledCount } from '@pega/cosmos-react-core/lib/components/Badges/Count';
const itemIconSize = '2rem';
export const StyledNew = styled(Text)(({ theme }) => {
    const readableBackground = readableHue(theme.base.palette['brand-primary'], theme.base.palette['primary-background']);
    const readableTextColor = readableColor(readableBackground);
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    position: absolute;
    inset-block-start: 0;
    inset-inline-start: 0;
    text-transform: uppercase;
    background-color: ${readableBackground};
    color: ${readableTextColor};
    padding-inline: calc(0.75 * ${theme.base.spacing});
    font-size: ${fontSize.xxs};
    font-weight: ${theme.base['font-weight']['semi-bold']};
  `;
});
StyledNew.defaultProps = defaultThemeProp;
export const StyledBorderLine = styled.span(({ theme }) => {
    const readableBackground = readableHue(theme.base.palette['brand-primary'], theme.base.palette['primary-background']);
    return css `
    position: absolute;
    inset-block-start: 0;
    inset-inline-start: 0;
    content: '';
    background-color: ${readableBackground};
    height: 100%;
    width: 0.125rem;
  `;
});
StyledBorderLine.defaultProps = defaultThemeProp;
export const StyledIntelligentGuidanceList = styled(SummaryList)(({ theme }) => {
    const color = theme.base.palette.light;
    const borderColor = tryCatch(() => lighten(0.1, theme.components['app-shell'].nav['background-color']));
    const hoverColor = tryCatch(() => lighten(0.05, theme.components['app-shell'].nav['background-color']));
    const secondaryColor = tryCatch(() => rgba(color, theme.base.transparency['transparent-2']));
    const scrollbarColor = tryCatch(() => rgba(color, theme.base.transparency['transparent-3']));
    return css `
    max-height: min(calc(100vh - var(--headerHeight) - 4ch), 21ch);
    overflow: auto;

    ::-webkit-scrollbar-thumb {
      box-shadow: inset 0 0 0.125rem 0.25rem ${scrollbarColor};
    }

    ::-webkit-scrollbar-thumb:hover {
      box-shadow: inset 0 0 0.125rem 0.25rem ${secondaryColor};
    }

    ${theme.base.animation.timing.ease};

    ${StyledSummaryItem} {
      position: relative;
      padding: ${theme.base.spacing};
      outline: none;

      &:not(:first-of-type) {
        border-top: ${theme.components.button['border-width']} solid ${borderColor};
      }

      ${StyledVisual} ${StyledIcon} {
        width: ${itemIconSize};
        height: ${itemIconSize};
        padding: calc(0.75 * ${theme.base.spacing});
      }

      ${StyledButton} {
        visibility: hidden;
      }

      ${StyledSecondary} ${StyledText} {
        color: ${secondaryColor};
      }

      &:not(:last-child) {
        border-bottom: none;
      }

      &:hover {
        background-color: ${hoverColor};
        cursor: pointer;
      }

      &:hover,
      &:focus,
      &:focus-within {
        ${StyledButton} {
          visibility: visible;
        }
      }
      &:enabled:focus,
      &:not([disabled]):focus {
        box-shadow: ${theme.base.shadow['focus-inset']};
      }
    }

    ${StyledEmptyState} {
      padding-block: ${theme.base.spacing};
      ${StyledIcon}, ${StyledText} {
        color: ${color};
      }
    }
  `;
});
StyledIntelligentGuidanceList.defaultProps = defaultThemeProp;
export const StyledIntelligentGuidance = styled(StyledCard)(({ theme, isCollapsed }) => {
    const color = theme.base.palette.light;
    const borderColor = tryCatch(() => lighten(0.1, theme.components['app-shell'].nav['background-color']));
    const tabPrimaryColor = theme.base.colors.blue.light;
    const lightenedTabColor = tryCatch(() => transparentize(0.3, tabPrimaryColor)) ?? '';
    return css `
      position: fixed;
      inset-inline-start: calc(2 * ${theme.base.spacing} + var(--appshell-horizontal-offset, 0rem));
      transition: inset-inline-start ${theme.base.animation.speed}
          ${theme.base.animation.timing.ease},
        transform calc(4 * ${theme.base.animation.speed}) ${theme.base.animation.timing.ease};
      bottom: 0;
      z-index: ${theme.base['z-index'].popover};
      min-width: 20rem;
      max-width: 20rem;
      color: ${color};
      overflow: hidden;
      box-shadow: ${theme.base.shadow.low};

      @media (min-width: ${theme.base.breakpoints.lg}) {
        min-width: 23rem;
        max-width: 23rem;
      }

      ${isCollapsed &&
        css `
        transform: translateY(calc(100% - var(--headerHeight)));
      `}

      &:not(& &) {
        background-color: ${theme.components['app-shell'].nav['background-color']};
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
      }
      ${StyledCardHeader} {
        & ${StyledButton} {
          transition: transform calc(2 * ${theme.base.animation.speed})
            ${theme.base.animation.timing.ease};
          transform: ${isCollapsed ? 'rotate(-180deg)' : 'rotate(0)'};
        }

        &:not(${StyledCard} ${StyledCard} > &) {
          padding: ${theme.base.spacing};
        }

        ${StyledFlex} > ${StyledIcon} {
          width: ${itemIconSize};
          height: ${itemIconSize};
          padding: calc(0.75 * ${theme.base.spacing});
          border-radius: calc(3 * ${theme.base['border-radius']});
          background-color: ${theme.base.palette.success};
        }
      }

      ${StyledTabs} {
        padding-inline: ${theme.base.spacing};
        border-block: 0.0625rem solid ${borderColor};
        ${StyledTab} {
          flex: 1;
          justify-content: center;
          ${StyledCount} {
            background-color: ${theme.base.palette.urgent};
          }
          span {
            color: ${color};
          }
          ::after {
            background-color: ${lightenedTabColor};
          }
          &[aria-selected='true'] {
            span:not(${StyledCount}) {
              color: ${tabPrimaryColor};
            }
            ::after {
              background-color: ${tabPrimaryColor};
            }
          }
        }
      }

      ${StyledButton}:enabled:focus {
        box-shadow: ${theme.base.shadow.focus};
      }
    `;
});
StyledIntelligentGuidance.defaultProps = defaultThemeProp;
//# sourceMappingURL=IntelligentGuidance.styles.js.map