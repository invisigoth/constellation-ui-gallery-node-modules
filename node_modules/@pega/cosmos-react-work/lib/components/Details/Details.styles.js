import styled, { css } from 'styled-components';
import { calculateFontSize, defaultThemeProp, StyledFieldValue, StyledStackedFieldValue, StyledFieldValueList, StyledIcon, useDirection, StyledButton } from '@pega/cosmos-react-core';
const verticalGapSpacingMultiplier = 1;
// colWidth reduces by 20% as column count increases
export const colCountChWidth = {
    '1': {
        containerWidth: 100,
        colWidth: 100
    },
    '2': {
        containerWidth: 80 * 2,
        colWidth: 80
    },
    '3': {
        containerWidth: 64 * 3,
        colWidth: 64
    }
};
export const flexGapProp = 5.5;
export const StyledFieldValueGroupLabel = styled.div(({ theme }) => {
    const { base: { spacing, animation } } = theme;
    const { rtl } = useDirection();
    return css `
    width: 100%;
    grid-column-start: 1;
    grid-column-end: -1;
    margin-block-end: calc(0.5 * ${spacing});
    margin-block-start: calc(1.5 * ${spacing});

    ${StyledButton} ${StyledIcon} {
      transition: transform ${animation.speed} ${animation.timing.ease};
    }

    ${StyledButton}[aria-expanded='true'] ${StyledIcon} {
      transform: rotate(90deg);
    }

    ${StyledButton}[aria-expanded='false'] ${StyledIcon} {
      transform: rotate(${rtl ? 180 : 0}deg);
    }
  `;
});
StyledFieldValueGroupLabel.defaultProps = defaultThemeProp;
export const StyledDetailDescription = styled.div(({ theme }) => {
    const { base: { spacing, 'content-width': { xl } } } = theme;
    return css `
    max-width: ${xl};
    margin-block: calc(1.5 * ${spacing});
  `;
});
StyledDetailDescription.defaultProps = defaultThemeProp;
export const StyledHighlightedDetailList = styled.dl(({ theme }) => {
    const { base: { spacing, palette } } = theme;
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    max-width: ${colCountChWidth[3].containerWidth}ch;
    padding-block-end: calc(1.5 * ${spacing});

    dd {
      font-size: ${fontSize[theme.components.text.h1['font-size']]};
      font-weight: ${theme.components.text.h1['font-weight']};
    }

    + hr {
      border-top: unset;
      border-radius: unset;
      border-style: unset;
      border-bottom: 0.0625rem solid ${palette['border-line']};
      margin-block-end: calc(1.5 * ${spacing});
    }
  `;
});
StyledHighlightedDetailList.defaultProps = defaultThemeProp;
export const StyledDetails = styled.div ``;
export const StyledDetailList = styled(StyledFieldValueList)(({ stacked, flex, nested, labelLength, variant, theme, wrapped = false, columnCount = 1, narrow = false }) => {
    const { base: { spacing } } = theme;
    const isValueComparison = variant === 'value-comparison';
    const containerWidthCh = colCountChWidth[columnCount].containerWidth;
    const columnWidthCh = colCountChWidth[columnCount].colWidth;
    const containerWidthMinusLabel = `${containerWidthCh - (labelLength ?? 0)}ch`;
    return css `
      /* Top Level Styles */
      ${!nested &&
        css `
        ${StyledFieldValue} {
          word-break: break-word;
          overflow: auto;
        }

        ${StyledStackedFieldValue} {
          grid-column: 1 / -1;
        }
      `}

      /* Nested List */
      ${nested &&
        css `
        grid-column: 1 / -1;
      `}

      /* As Field Grid */
      ${!flex &&
        css `
        display: grid;
        grid-template-columns: minmax(14ch, ${labelLength}ch) minmax(14ch, 1fr);
        column-gap: calc(2 * ${spacing});
        row-gap: calc(${verticalGapSpacingMultiplier} * ${spacing});

        ${stacked &&
            css `
          grid-template-columns: minmax(0, 1fr);
          row-gap: 0;
        `}

        > ${StyledStackedFieldValue} {
          max-width: ${containerWidthCh}ch;
        }

        > ${StyledFieldValue} {
          max-width: calc(${containerWidthMinusLabel} - calc(2 * ${spacing}));

          ${!isValueComparison &&
            css `
            width: 100%;
          `}
        }

        ${isValueComparison &&
            css `
          grid-template-columns: auto auto;
          column-gap: 0;
          row-gap: calc(0.5 * ${spacing});
          max-width: ${containerWidthCh}ch;

          > dd {
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
          }
        `}

        > ${StyledDetails} {
          grid-column: 1 / -1;
        }
      `}

      /* As Flex Container */
      ${flex &&
        css `
        display: flex;
        flex-direction: ${wrapped ? 'column' : 'row'};
        column-gap: calc(${flexGapProp} * ${spacing});
        align-items: flex-start;
        max-width: ${containerWidthCh}ch;

        ${!wrapped &&
            css `
          > * {
            width: 100%;
            max-width: ${columnWidthCh}%;
          }
        `}

        > ${StyledDetails} {
          width: 100%;
        }
      `}

      /* Key / Group Label Spacing */
      ${stacked &&
        !isValueComparison &&
        css `
        > dt {
          margin-block-start: calc(${verticalGapSpacingMultiplier} * ${spacing});
        }
      `}

      /* Responsive behavior */
      ${narrow &&
        !stacked &&
        !isValueComparison &&
        css `
        grid-template-columns: minmax(14ch, ${labelLength}ch) minmax(50%, 1fr);
      `}
    `;
});
StyledDetailList.defaultProps = defaultThemeProp;
//# sourceMappingURL=Details.styles.js.map