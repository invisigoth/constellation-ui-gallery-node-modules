import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useRef } from 'react';
import styled, { css } from 'styled-components';
import { registerIcon, Flex, MenuButton, Text, defaultThemeProp, Button, Icon, Progress, useI18n, useDirection } from '@pega/cosmos-react-core';
import * as caretLeftIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/caret-left.icon';
import * as caretRightIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/caret-right.icon';
import ArticleListHeader from '../ArticleList/ArticleListHeader';
import ArticleFooter from './ArticleFooter';
import ArticleMeta from './ArticleMeta';
registerIcon(caretRightIcon, caretLeftIcon);
const StyledArticleWrapper = styled.div(props => {
    const { theme } = props;
    return css `
    background: ${theme.base.palette['primary-background']};
    padding: calc(1.5 * ${theme.base.spacing});
    border-radius: calc(0.5 * ${theme.base['border-radius']});
    max-height: inherit;
  `;
});
const StyledArticleHeader = styled.header `
  flex-shrink: 0;
`;
const StyledArticleContent = styled.div(props => {
    const { theme, theme: { base: { spacing } } } = props;
    return css `
    flex-grow: 1;
    overflow-y: auto;
    padding: 0 calc(1.5 * ${spacing});
    margin: 0 calc(-1.5 * ${spacing});
    ul,
    ol {
      padding-left: calc(3 * ${spacing});
    }
    a {
      color: ${theme.components.link.color};
    }
    * {
      margin: revert;
    }
  `;
});
const StyledBackNavButton = styled(Button)(({ theme: { base: { spacing } } }) => {
    return css `
      display: flex;
      align-items: start;
      gap: calc(0.5 * ${spacing});
      margin-inline-end: calc(1.5 * ${spacing});
    `;
});
StyledArticleContent.defaultProps = defaultThemeProp;
StyledArticleWrapper.defaultProps = defaultThemeProp;
StyledBackNavButton.defaultProps = defaultThemeProp;
const Article = (props) => {
    const { header, meta, title, backNavigation, content, primaryActions, secondaryActions, footer, loading, ...restProps } = props;
    const { rtl, ltr, end, start } = useDirection();
    const t = useI18n();
    const backButtonRef = useRef(null);
    useEffect(() => {
        if (!loading) {
            backButtonRef.current?.focus();
        }
    }, [loading]);
    return (_jsxs(Flex, { ...restProps, container: { direction: 'column', gap: 1 }, as: StyledArticleWrapper, "aria-busy": loading ? true : undefined, children: [header && _jsx(ArticleListHeader, { ...header }), (backNavigation || primaryActions || secondaryActions) && (_jsxs(Flex, { container: { alignItems: 'start' }, item: { grow: 1 }, children: [_jsx(Flex, { container: { pad: [1, undefined, undefined] }, item: { grow: 1 }, children: _jsxs(Button, { as: StyledBackNavButton, onClick: backNavigation?.onClick, variant: 'link', ref: backButtonRef, children: [ltr && _jsx(Icon, { name: `caret-${start}` }), backNavigation?.title, rtl && _jsx(Icon, { name: `caret-${end}` })] }) }), !loading && (_jsxs(_Fragment, { children: [primaryActions?.map(({ id, label, onClick, icon }) => {
                                return (_jsx(Button, { onClick: (e) => onClick(id, e), variant: 'simple', label: label, icon: true, children: _jsx(Icon, { name: icon }) }, id));
                            }), secondaryActions && (_jsx(MenuButton, { variant: 'simple', text: t('actions'), icon: 'more', iconOnly: true, menu: {
                                    items: secondaryActions.map(({ text, ...rest }) => ({
                                        ...rest,
                                        primary: text
                                    }))
                                } }))] }))] })), !loading && (_jsxs(_Fragment, { children: [_jsx(Flex, { container: true, as: StyledArticleHeader, children: _jsx(Text, { variant: 'h2', children: title }) }), meta && (_jsx(Flex, { container: true, item: { shrink: 0 }, children: _jsx(ArticleMeta, { ...meta }) })), _jsx(StyledArticleContent, { children: content }), footer && _jsx(ArticleFooter, { ...footer })] })), _jsx(Progress, { visible: !!loading, placement: 'block', message: t('loading'), liveConfig: { contextualLabel: title ?? t('article_label_a11y') } })] }));
};
export default Article;
//# sourceMappingURL=Article.js.map