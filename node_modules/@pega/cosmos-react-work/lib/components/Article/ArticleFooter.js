import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import styled, { css } from 'styled-components';
import { Flex, Tag, defaultThemeProp, Button, Text, Link, useI18n, FileUploadItem, Grid } from '@pega/cosmos-react-core';
import { StyledTag } from '@pega/cosmos-react-core/lib/components/Badges/Tag';
const StyledRelatedItemsContainer = styled.div ``;
const StyledRelatedItemsList = styled.div ``;
const StyledArticleFooter = styled.div(({ theme }) => {
    return css `
    flex-shrink: 0;
    &::before {
      content: '';
      display: block;
      background: ${theme.base.palette['border-line']};
      height: 0.0625rem;
      margin-bottom: calc(2 * ${theme.base.spacing});
    }

    ${StyledRelatedItemsContainer} {
      margin-block-start: ${theme.base.spacing};
      & > ${StyledRelatedItemsList} * {
        margin-inline-start: 0;
      }
    }
  `;
});
StyledArticleFooter.defaultProps = defaultThemeProp;
const StyledTags = styled.div(({ theme }) => {
    return css `
    padding: calc(0.25 * ${theme.base.spacing});
    margin: 0 calc(-0.5 * ${theme.base.spacing});
    & > ${StyledTag} {
      margin: calc(0.25 * ${theme.base.spacing});
    }
  `;
});
StyledTags.defaultProps = defaultThemeProp;
const ArticleFooter = (props) => {
    const { tags, relatedLinks, relatedArticles, feedback, attachments, ...restProps } = props;
    const t = useI18n();
    return (_jsxs(Flex, { as: StyledArticleFooter, container: {
            direction: 'column',
            gap: 2
        }, ...restProps, children: [feedback && (_jsx(Flex, { container: { gap: 2, alignItems: 'center' }, children: feedback.showThanksMessage ? (_jsx(Text, { children: t('article_thank_you_for_your_feedback') })) : (_jsxs(_Fragment, { children: [_jsx(Text, { children: t('article_was_this_helpful') }), _jsxs(Flex, { container: true, children: [_jsx(Button, { variant: feedback.status === 'liked' ? 'primary' : 'secondary', onClick: (e) => feedback.onFeedbackClick('like', e), children: t('yes') }), _jsx(Button, { variant: feedback.status === 'disliked' ? 'primary' : 'secondary', onClick: (e) => feedback.onFeedbackClick('dislike', e), children: t('no') })] })] })) })), tags && (_jsx(Flex, { container: { wrap: 'wrap' }, as: StyledTags, children: tags.list.map(tag => (_jsx(Tag, { tabIndex: 0, type: 'pill', variant: 'light', "data-tag-id": tag.id, ...(tags.onTagClick ? { onClick: () => tags.onTagClick?.(tag.id) } : undefined), rel: 'tag', children: tag.tagName }, tag.id))) })), relatedLinks && (_jsxs(Flex, { as: StyledRelatedItemsContainer, container: { direction: 'column', gap: 1 }, children: [_jsx(Text, { variant: 'h3', children: t('article_related_links') }), _jsx(Flex, { as: StyledRelatedItemsList, container: { direction: 'column', alignItems: 'start', gap: 0.5 }, children: relatedLinks?.map(({ title, href }) => {
                            return (_jsx(Link, { href: href, target: '_blank', children: title }, title));
                        }) })] })), relatedArticles && (_jsxs(Flex, { as: StyledRelatedItemsContainer, container: { direction: 'column', gap: 1 }, children: [_jsx(Text, { variant: 'h3', children: t('article_more_like_this') }), _jsx(Flex, { as: StyledRelatedItemsList, container: { direction: 'column', alignItems: 'start', gap: 0.5 }, children: relatedArticles?.map(({ id, title, onClick }) => {
                            return (_jsx(Button, { variant: 'link', onClick: (e) => onClick(id, e), children: title }, id));
                        }) })] })), attachments && (_jsxs(Flex, { as: StyledRelatedItemsContainer, container: { direction: 'column', gap: 1 }, children: [_jsx(Text, { variant: 'h3', children: t('article_attachments') }), _jsx(Grid, { container: {
                            cols: 'repeat(auto-fill, minmax(10rem, 1fr))',
                            gap: 1
                        }, as: 'ul', children: attachments?.map(attachment => (_createElement(FileUploadItem, { ...attachment, key: attachment.name }))) })] }))] }));
};
export default ArticleFooter;
//# sourceMappingURL=ArticleFooter.js.map