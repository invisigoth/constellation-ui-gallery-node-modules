import { FunctionComponent, ReactNode, Ref, MouseEvent } from 'react';
import { ForwardProps, TestIdProp, ActionsProps } from '@pega/cosmos-react-core';
export interface TaskItemProps extends TestIdProp {
    id: string;
    /** Name of the task displayed in the list. */
    name: string;
    /** Name of the process for the task. */
    processName?: string;
    /** Avatar element to represent the task's assignee. */
    avatar?: ReactNode;
    /** MetaList element with info related to the task. */
    meta?: ReactNode;
    /** Provide a callback to render a button for a task. */
    onOpen?: (id: TaskItemProps['id'], e: MouseEvent<HTMLButtonElement>) => void;
    /** Content for the task when open. */
    content?: ReactNode;
    /** An array of actions to add to open task. */
    additionalActions?: ActionsProps['items'];
}
export interface TaskListProps extends TestIdProp {
    items: TaskItemProps[];
    hasFooter?: boolean;
    /** Ref for the wrapping element. */
    ref?: Ref<HTMLElement>;
}
interface Announcement {
    name: string;
    status: 'removed' | 'added';
}
export declare const TaskItem: (({ testId, id, name, avatar, meta, processName, onOpen, content, addAnnouncement, additionalActions, ...restProps }: TaskItemProps & {
    addAnnouncement?: ((announcement: Announcement) => void) | undefined;
}) => JSX.Element) & {
    getTestIds: (testIdProp?: string | undefined) => import("@pega/cosmos-react-core").TestIdsRecord<readonly ["open-task"]>;
};
declare const _default: FunctionComponent<TaskListProps & ForwardProps> & {
    getTestIds: (testIdProp?: string | undefined) => import("@pega/cosmos-react-core").TestIdsRecord<readonly []>;
};
export default _default;
//# sourceMappingURL=TaskList.d.ts.map