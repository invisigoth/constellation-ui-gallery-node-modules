import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import styled, { css } from 'styled-components';
import { Card, CardHeader, CardContent, CardFooter, Button, useI18n, defaultThemeProp, ListToolbar, EmptyState, useTestIds, Avatar, withTestIds } from '@pega/cosmos-react-core';
import TaskList, { TaskItem } from './TaskList';
import { getTasksTestIds } from './Tasks.test-ids';
export const StyledTasks = styled(Card)(({ theme, openItem }) => {
    return openItem
        ? css `
        box-shadow: ${theme.base.shadow.low};
      `
        : null;
});
StyledTasks.defaultProps = defaultThemeProp;
const Tasks = (props) => {
    const { testId, items = [], name, avatar, viewSelector, count = items.length, search, onExpandToggle, ...restProps } = props;
    const testIds = useTestIds(testId, getTasksTestIds);
    const openItem = items.find(item => item.content);
    const t = useI18n();
    const hasFooter = !!(!openItem && onExpandToggle && count > 0);
    const TaskItems = useMemo(() => {
        return openItem ? (_jsx(TaskItem, { ...openItem })) : (_jsx(TaskList, { items: items, hasFooter: hasFooter, testId: testIds.root }));
    }, [items, openItem]);
    return (_jsxs(StyledTasks, { "data-testid": testIds.root, ...restProps, openItem: !!openItem, "data-app-region": true, children: [!openItem && (_jsxs(CardHeader, { container: { justify: 'start', alignItems: 'center', gap: 1 }, children: [avatar && _jsx(Avatar, { ...avatar }), _jsx(ListToolbar, { name: name, headingTag: 'h2', viewSelector: viewSelector, count: { total: count }, search: search, item: { grow: 1 } })] })), _jsx(CardContent, { children: items.length > 0 ? TaskItems : _jsx(EmptyState, {}) }), hasFooter && (_jsx(CardFooter, { justify: 'center', children: _jsx(Button, { "data-testid": testIds.showMoreLess, variant: 'link', "aria-label": t(!!count && count > items.length ? 'show_more' : 'show_less', ['tasks']), onClick: (e) => {
                        onExpandToggle?.();
                        if (!!count && count <= items.length) {
                            const { currentTarget } = e;
                            requestAnimationFrame(() => {
                                if (currentTarget.getBoundingClientRect().top < 0)
                                    currentTarget.scrollIntoView();
                            });
                        }
                    }, children: t(!!count && count > items.length ? 'show_more' : 'show_less') }) }))] }));
};
export default withTestIds(Tasks, getTasksTestIds);
//# sourceMappingURL=Tasks.js.map