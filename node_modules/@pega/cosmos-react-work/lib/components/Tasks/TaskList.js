import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect, useRef } from 'react';
import styled, { css } from 'styled-components';
import { SummaryItem, StyledSummaryListItem, Flex, defaultThemeProp, Button, useI18n, VisuallyHiddenText, Breadcrumbs, StyledBreadcrumbs, StyledText, useTestIds, useLiveLog, debounce, Actions, withTestIds } from '@pega/cosmos-react-core';
import { getTaskListTestIds, getTaskItemTestIds } from './Tasks.test-ids';
const StyledTaskList = styled.ul(({ theme, hasFooter }) => {
    return css `
    ${hasFooter &&
        css `
      > li:last-child {
        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};
      }
    `}

    ${StyledBreadcrumbs} > ${StyledText} {
      font-weight: ${theme.base['font-weight']['semi-bold']};
    }
  `;
});
StyledTaskList.defaultProps = defaultThemeProp;
export const TaskItem = withTestIds(({ testId, id, name, avatar, meta, processName, onOpen, content, addAnnouncement, additionalActions, ...restProps }) => {
    const testIds = useTestIds(testId, getTaskItemTestIds);
    const t = useI18n();
    useEffect(() => {
        addAnnouncement?.({ name, status: 'added' });
        return () => {
            addAnnouncement?.({ name, status: 'removed' });
        };
    }, []);
    const summary = (_jsx(SummaryItem, { visual: avatar, primary: processName ? (_jsx(Breadcrumbs, { path: [
                { id: 'processName', primary: processName },
                { id: 'name', primary: name }
            ] })) : (name), secondary: meta, actions: content
            ? additionalActions && _jsx(Actions, { menuAt: 1, items: additionalActions })
            : onOpen && (_jsxs(Button, { "data-testid": testIds.openTask, variant: 'primary', onClick: (e) => onOpen(id, e), children: [_jsx("span", { children: t('go') }), _jsx(VisuallyHiddenText, { children: `-${processName ?? ''} ${name}` })] })) }));
    return (_jsxs(Flex, { "data-testid": testIds.root, ...restProps, container: { direction: 'column', gap: 1 }, item: { grow: 1 }, as: StyledSummaryListItem, forwardedAs: 'li', children: [summary, content] }));
}, getTaskItemTestIds);
const TaskList = forwardRef(function TaskList({ testId, items, hasFooter = false }, ref) {
    const testIds = useTestIds(testId, getTaskListTestIds);
    const t = useI18n();
    const { announcePolite } = useLiveLog();
    const announcements = useRef([]);
    const debouncedAnnounce = debounce(() => {
        if (announcements.current.length > 0) {
            let tasksAdded = 0;
            let tasksRemoved = 0;
            announcements.current.forEach(item => {
                if (item.status === 'removed') {
                    tasksRemoved += 1;
                }
                else {
                    tasksAdded += 1;
                }
            });
            let message = tasksAdded ? t('tasks_added', [tasksAdded], { count: tasksAdded }) : '';
            if (tasksRemoved) {
                message += t('tasks_removed', [tasksRemoved], { count: tasksRemoved });
            }
            announcePolite({ message });
            announcements.current = [];
        }
    }, 2000);
    const addAnnouncement = (announcement) => {
        announcements.current = [...announcements.current, announcement];
        debouncedAnnounce();
    };
    return (_jsx(Flex, { "data-testid": testIds.root, container: { direction: 'column' }, as: StyledTaskList, hasFooter: hasFooter, ref: ref, children: items.map((item, i) => (_createElement(TaskItem, { ...item, addAnnouncement: addAnnouncement, key: `${i + 1}` }))) }));
});
export default withTestIds(TaskList, getTaskListTestIds);
//# sourceMappingURL=TaskList.js.map