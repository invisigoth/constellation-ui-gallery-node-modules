import type { ITrieNode, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { PartialTrieInfo, TrieInfo } from '../ITrieNode/TrieInfo.js';
import type { TrieData } from '../TrieData.js';
export declare class TrieBlob implements TrieData {
    protected nodes: Uint32Array;
    readonly charIndex: readonly string[];
    protected charToIndexMap: Record<string, number>;
    readonly info: Readonly<TrieInfo>;
    private _forbidIdx;
    private _size;
    private _iTrieRoot;
    wordToCharacters: (word: string) => string[];
    constructor(nodes: Uint32Array, charIndex: readonly string[], info: PartialTrieInfo);
    private _lookUpCharIndex;
    private wordToNodeCharIndexSequence;
    private letterToNodeCharIndexSequence;
    has(word: string): boolean;
    isForbiddenWord(word: string): boolean;
    hasForbiddenWords(): boolean;
    getRoot(): ITrieNodeRoot;
    private _getRoot;
    getNode(prefix: string): ITrieNode | undefined;
    private _has;
    /**
     * Find the node index for the given character.
     * @param nodeIdx - node index to start the search
     * @param char - character to look for
     * @returns
     */
    private _lookupNode;
    /**
     * Find the node index for the given character.
     * @param nodeIdx - node index to start the search
     * @param char - character to look for
     * @returns
     */
    private _lookupNodeByCharIndexSeq;
    words(): Iterable<string>;
    get size(): number;
    toJSON(): {
        options: Readonly<TrieInfo>;
        nodes: NodeElement[];
        charIndex: readonly string[];
    };
    encodeBin(): Uint8Array;
    static decodeBin(blob: Uint8Array): TrieBlob;
    static NodeMaskEOW: number;
    static NodeMaskNumChildren: number;
    static NodeMaskNumChildrenShift: number;
    static NodeChildRefShift: number;
    /**
     * Only 8 bits are reserved for the character index.
     * The max index is {@link TrieBlob.SpecialCharIndexMask} - 1.
     * Node chaining is used to reference higher character indexes.
     * - @see {@link TrieBlob.SpecialCharIndexMask}
     * - @see {@link TrieBlob.MaxCharIndex}
     */
    static NodeMaskChildCharIndex: number;
    /** SpecialCharIndexMask is used to indicate a node chain */
    static SpecialCharIndexMask: number;
    static MaxCharIndex: number;
    /**
     * SpecialCharIndex8bit is used to indicate a node chain. Where the final character index is 248 + the index found in the next node.
     */
    static SpecialCharIndex8bit: number;
    static SpecialCharIndex16bit: number;
    static SpecialCharIndex24bit: number;
    /**
     * Since it is only possible to store single byte indexes, a multi-byte index is stored as a sequence of indexes chained between nodes.
     * @param charIndex - character index to convert to a sequence of indexes
     * @returns encoded index values.
     */
    static toCharIndexSequence(charIndex: number): number[];
    static fromCharIndexSequence(charIndexes: Iterable<number>): Iterable<number>;
    static charactersToCharIndexSequence(chars: readonly string[], charToIndexMap: Readonly<Record<string, number>> | ((char: string) => number)): number[];
    static charIndexSequenceToCharacters(charIndexSequence: number[], charIndex: readonly string[] | Readonly<Record<number, string>>): readonly string[];
    static nodesView(trie: TrieBlob): Readonly<Uint32Array>;
}
interface NodeElement {
    id: number;
    eow: boolean;
    c: {
        c: number | string;
        o: number;
    }[];
    n: number;
}
export {};
//# sourceMappingURL=TrieBlob.d.ts.map