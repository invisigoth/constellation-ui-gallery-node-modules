import type { ITrieNode, ITrieNodeId, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { TrieInfo } from '../ITrieNode/TrieInfo.js';
import type { FastTrieBlobInternals } from './FastTrieBlobInternals.js';
type Node = readonly number[];
type NodeIndex = number;
declare class FastTrieBlobINode implements ITrieNode {
    readonly trie: FastTrieBlobInternals;
    readonly nodeIdx: NodeIndex;
    readonly id: number;
    readonly node: Node;
    readonly eow: boolean;
    private _keys;
    private _count;
    private _size;
    private _chained;
    private _nodesEntries;
    private _entries;
    private _values;
    protected charToIdx: Readonly<Record<string, NodeIndex>> | undefined;
    constructor(trie: FastTrieBlobInternals, nodeIdx: NodeIndex);
    /** get keys to children */
    keys(): readonly string[];
    values(): readonly ITrieNode[];
    entries(): readonly (readonly [string, ITrieNode])[];
    /** get child ITrieNode */
    get(char: string): ITrieNode | undefined;
    has(char: string): boolean;
    hasChildren(): boolean;
    child(keyIdx: number): ITrieNode;
    getCharToIdxMap(): Record<string, number>;
    private containsChainedIndexes;
    private getNodesEntries;
    private walkChainedIndexes;
    get size(): number;
}
export declare class FastTrieBlobIRoot extends FastTrieBlobINode implements ITrieNodeRoot {
    readonly info: Readonly<TrieInfo>;
    constructor(trie: FastTrieBlobInternals, nodeIdx: number, info: Readonly<TrieInfo>);
    resolveId(id: ITrieNodeId): ITrieNode;
}
export {};
//# sourceMappingURL=FastTrieBlobIRoot.d.ts.map