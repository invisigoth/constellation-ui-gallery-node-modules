import type { ITrieNode, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { PartialTrieInfo, TrieInfo } from '../ITrieNode/TrieInfo.js';
import type { TrieData } from '../TrieData.js';
import { type FastTrieBlobBitMaskInfo } from './FastTrieBlobBitMaskInfo.js';
import { FastTrieBlobInternals } from './FastTrieBlobInternals.js';
import { TrieBlob } from './TrieBlob.js';
export declare class FastTrieBlob implements TrieData {
    private nodes;
    private _charIndex;
    readonly bitMasksInfo: FastTrieBlobBitMaskInfo;
    private _charToIndexMap;
    private _readonly;
    private _forbidIdx;
    private _iTrieRoot;
    wordToCharacters: (word: string) => readonly string[];
    readonly info: Readonly<TrieInfo>;
    private constructor();
    private _lookUpCharIndex;
    private wordToNodeCharIndexSequence;
    private letterToNodeCharIndexSequence;
    has(word: string): boolean;
    private _has;
    words(): Iterable<string>;
    toTrieBlob(): TrieBlob;
    isReadonly(): boolean;
    freeze(): this;
    toJSON(): {
        info: Readonly<TrieInfo>;
        nodes: NodeElement[];
        charIndex: readonly string[];
    };
    static create(data: FastTrieBlobInternals, options?: PartialTrieInfo): FastTrieBlob;
    static toITrieNodeRoot(trie: FastTrieBlob): ITrieNodeRoot;
    static NodeMaskEOW: number;
    static NodeChildRefShift: number;
    static NodeMaskChildCharIndex: number;
    static DefaultBitMaskInfo: FastTrieBlobBitMaskInfo;
    get iTrieRoot(): ITrieNodeRoot;
    getRoot(): ITrieNodeRoot;
    getNode(prefix: string): ITrieNode | undefined;
    isForbiddenWord(word: string): boolean;
    hasForbiddenWords(): boolean;
    /** number of nodes */
    get size(): number;
    private _lookupCharIndexNode;
    /** Search from nodeIdx for the node index representing the character. */
    private _searchNodeForChar;
    get charIndex(): readonly string[];
    static fromTrieBlob(trie: TrieBlob): FastTrieBlob;
}
interface NodeElement {
    id: number;
    eow: boolean;
    n: number;
    c: {
        c: number | string;
        i: number;
    }[];
}
export {};
//# sourceMappingURL=FastTrieBlob.d.ts.map